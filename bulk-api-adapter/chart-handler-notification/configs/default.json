{{- $kafkaHost := ( .Values.config.kafka_host | replace "$release_name" .Release.Name ) -}}
{{- $centralServicesHost := ( .Values.config.central_services_host | replace "$release_name" .Release.Name ) -}}
{{- $objStoreUri := ( .Values.config.objstore_uri | replace "$release_name" .Release.Name ) -}}
{
  "PORT": {{ .Values.service.internalPort }},
  "HOSTNAME": "{{ .Values.ingress.hosts.api }}",
  "ENDPOINT_SOURCE_URL": "http://{{ $centralServicesHost }}:{{ .Values.config.central_services_port }}/participants/{{"{{"}}fsp{{"}}"}}/endpoints",
  "ENDPOINT_HEALTH_URL": "http://{{ $centralServicesHost }}:{{ .Values.config.central_services_port }}/health",
  "ENDPOINT_CACHE_CONFIG": {
    "expiresIn": 180000,
    "generateTimeout": 30000
  },
  "MONGODB": {
    "URI": {{ (default .Values.config.objstore_uri $objStoreUri) | quote }}
  },
  "ENDPOINT_SECURITY": {
    "TLS": {
      "rejectUnauthorized": {{ .Values.config.security.callback.rejectUnauthorized }}
    }
  },
  "MAX_FULFIL_TIMEOUT_DURATION_SECONDS": 300,
  "AMOUNT": {
    "PRECISION": 18,
    "SCALE": 4
  },
  "HANDLERS": {
    "DISABLED": false,
    "API": {
      "DISABLED": false
    }
  },
  "INSTRUMENTATION": {
    "METRICS": {
      "DISABLED": {{ not .Values.metrics.enabled }},
      "config": {
        "timeout": {{ .Values.metrics.config.timeout }},
        "prefix": {{ .Values.metrics.config.prefix | quote }},
        "defaultLabels": {
          {{- range $key, $value := .Values.metrics.config.defaultLabels }}
          {{ $key | quote }}: {{ $value | quote }}
          {{- end }}
        }
      }
    }
  },
  "KAFKA": {
    "TOPIC_TEMPLATES": {
      "GENERAL_TOPIC_TEMPLATE": {
        "TEMPLATE": "topic-{{"{{"}}functionality{{"}}"}}-{{"{{"}}action{{"}}"}}",
        "REGEX": "topic-(.*)-(.*)"
      }
    },
    "CONSUMER": {
      "NOTIFICATION": {
        "EVENT": {
          "config": {
            "options": {
              "mode": 2,
              "batchSize": 1,
              "pollFrequency": 10,
              "recursiveTimeout": 100,
              "messageCharset": "utf8",
              "messageAsJSON": true,
              "sync": true,
              "consumeTimeout": 1000
            },
            "rdkafkaConf": {
              "client.id": "bulk-con-notification-event",
              "group.id": "bulk-group-notification-event",
              "metadata.broker.list": "{{ $kafkaHost }}:{{ .Values.config.kafka_port }}",
              "socket.keepalive.enable": true
            },
            "topicConf": {
              "auto.offset.reset": "earliest"
            }
          }
        }
      }
    },
    "PRODUCER": {
      "BULK": {
        "PREPARE": {
          "config": {
            "options": {
              "messageCharset": "utf8"
            },
            "rdkafkaConf": {
              "metadata.broker.list": "{{ $kafkaHost }}:{{ .Values.config.kafka_port }}",
              "client.id": "bulk-prod-bulk-prepare",
              "event_cb": true,
              "dr_cb": true,
              "socket.keepalive.enable": true,
              "queue.buffering.max.messages": 10000000
            },
            "topicConf": {  
              "request.required.acks": "all"
            }
          }
        },
        "FULFIL": {
          "config": {
            "options": {
              "messageCharset": "utf8"
            },
            "rdkafkaConf": {
              "metadata.broker.list": "{{ $kafkaHost }}:{{ .Values.config.kafka_port }}",
              "client.id": "bulk-prod-bulk-fulfil",
              "event_cb": true,
              "dr_cb": true,
              "socket.keepalive.enable": true,
              "queue.buffering.max.messages": 10000000
            },
            "topicConf": {  
              "request.required.acks": "all"
            }
          }
        },
        "GET": {
          "config": {
            "options": {
              "messageCharset": "utf8"
            },
            "rdkafkaConf": {
              "metadata.broker.list": "{{ $kafkaHost }}:{{ .Values.config.kafka_port }}",
              "client.id": "bulk-prod-bulk-get",
              "event_cb": true,
              "dr_cb": true,
              "socket.keepalive.enable": true,
              "queue.buffering.max.messages": 10000000
            },
            "topicConf": {  
              "request.required.acks": "all"
            }
          }
        }
      }
    }
  }
}
