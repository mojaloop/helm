{{- $dbHost := printf "%s-%s" .Release.Name .Values.postgresql.nameOverride -}}
apiVersion: {{ template "centralenduserregistry.apiVersion.Deployment" . }}
kind: Deployment
metadata:
  name: {{ template "centralenduserregistry.fullname" . }}
  labels:
    app: {{ template "centralenduserregistry.fullname" . }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "centralenduserregistry.fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
      {{- if .Values.init.enabled }}
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://{{ .Values.postgresql.postgresUser }}:{{ .Values.postgresql.postgresPassword }}@{{ $dbHost }}:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.postgresDatabase }}?sslmode=disable"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          {{- range $port := .Values.service.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.internalPort }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.service.ports.api.internalPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.service.ports.api.internalPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          {{- end }}
          # securityContext:
          #   capabilities:
          #     add:
          #       - NET_ADMIN
          env:
            - name: CREG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ template "centralenduserregistry.fullname" . }}
                  key: server.host
            - name: CREG_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ template "centralenduserregistry.fullname" . }}
                  key: server.port
            - name: CREG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: {{ template "centralenduserregistry.fullname" . }}
                  key: db.uri
          volumeMounts:
          - name: {{ template "centralenduserregistry.fullname" . }}-config-volume
            mountPath: /opt/mock-pathfinder/config
      volumes:
        - name: {{ template "centralenduserregistry.fullname" . }}-config-volume
          configMap:
            name: {{ template "centralenduserregistry.fullname" . }}
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
