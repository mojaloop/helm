{{- $centralenduserregistryHost := printf "%s-%s" .Release.Name .Values.centralenduserregistry.nameOverride -}}
{{- $mockpathfinderHost := printf "%s-%s" .Release.Name .Values.mockpathfinder.nameOverride -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "centraldirectory.fullname" . }}
  labels:
      app: {{ template "centraldirectory.fullname" . }}
      chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
data:
  server.host: {{ .Values.ingress.hosts.api | quote }}
  server.port: {{ .Values.service.ports.api.internalPort | quote }}
  cdir.admin.key: {{ .Values.config.CDIR_ADMIN_KEY | quote}}
  cdir.admin.secret: {{ .Values.config.CDIR_ADMIN_SECRET | quote}}
  cdir.pathfinder.provisioning.address: {{ .Values.config.CDIR_PATHFINDER__PROVISIONING__ADDRESS | replace "$pathfinder_host" $mockpathfinderHost | quote}}
  cdir.pathfinder.query.address: {{ .Values.config.CDIR_PATHFINDER__QUERY__ADDRESS | replace "$pathfinder_host" $mockpathfinderHost | quote}}
  cdir.pathfinder.query.port: {{ .Values.config.CDIR_PATHFINDER__QUERY__PORT | quote}}
  default.json: |
    {{ .Values.config.default_json | replace "$service_port" (printf "%.0f" .Values.service.ports.api.internalPort) | replace "$ingress_host" .Values.ingress.hosts.api | replace "$centralenduserregistry_host" $centralenduserregistryHost | replace "$centralenduserregistry_port" (printf "%.0f" .Values.centralenduserregistry.service.ports.api.externalPort) | replace "$pathfinder_host" $mockpathfinderHost | replace "$pathfinder_provisioning_port" (printf "%.0f" .Values.mockpathfinder.service.ports.provisioning.externalPort) | replace "$pathfinder_query_port" (printf "%.0f" .Values.mockpathfinder.service.ports.tcp_query.externalPort) }}
  
  knexfile.js: |
    'use strict'

    const migrationsDirectory = '/opt/central-end-user-registry/migrations'
    const Config = require('/opt/central-end-user-registry/src/lib/config')
    module.exports = {
      client: 'pg',
      connection: Config.DATABASE_URI,
      migrations: {
        directory: migrationsDirectory,
        tableName: 'migrations',
        stub: `${migrationsDirectory}/migration.template`
      }
    }
