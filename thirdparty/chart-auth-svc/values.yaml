enabled: true
replicaCount: 1
image:
  repository: mojaloop/auth-service
  tag: v13.0.2
  command: '[ "npm", "run", "start" ]'
  pullPolicy: IfNotPresent

## Pod scheduling preferences.
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

## Set toleration for scheduler
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## @param initContainers Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "hello world"']
##    env:
##      - name: debug
##        value: trace
##
# initContainers: []
initContainers:
  - name: run-migration
    image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
    imagePullPolicy: IfNotPresent
    command:
      - sh
      - -c
      - npm run migrate
    env:
      - name: NODE_ENV
        value: production
    volumeMounts:
      - name: auth-svc-config-volume
        mountPath: /opt/app/dist/config/production.json
        subPath: production.json

livenessProbe:
  initialDelaySeconds: 30
  httpGet:
    path: /health
    port: 4004
readinessProbe:
  initialDelaySeconds: 30
  httpGet:
    path: /health
    port: 4004

# Add extra environment variables here
env:
  - name: NODE_ENV
    value: production
  # e.g. to change the Log Level:
  # - name: LOG_LEVEL
  #   value: debug

config:
  production.json: {
    "PORT": 4004,
    "HOST": "0.0.0.0",
    "PARTICIPANT_ID": "centralauth",
    "REDIS": {
      "PORT": 6379,
      "HOST": "auth-svc-redis-svc",
      "TIMEOUT": 100
    },
    "INSPECT": {
      "DEPTH": 4,
      "SHOW_HIDDEN": false,
      "COLOR": true
    },
    "SHARED": {
      "THIRDPARTY_REQUESTS_ENDPOINT": "tp-api-svc:3008",
      "ALS_ENDPOINT": "$release_name-account-lookup-service",
      "JWS_SIGN": false,
      "JWS_SIGNING_KEY": "./secrets/jwsSigningKey.key",
      "WSO2_AUTH": {
        "staticToken": "0706c62f-c022-3c42-8d14-8b5df128876d",
        "tokenEndpoint": "",
        "clientKey": "test-client-key",
        "clientSecret": "test-client-secret",
        "refreshSeconds": 3600
      },
      "TLS": {
        "mutualTLS": {
          "enabled": false
        },
        "creds": {
          "ca": "./secrets/client.crt",
          "cert": "./secrets/client.crt",
          "key": "./secrets/client.crt"
        }
      }
    },
    "DATABASE": {
      "client": "mysql",
      "version": "5.5",
      "connection": {
        "host": "mysql-auth-svc",
        "port": 3306,
        "user": "auth-svc",
        "password": "password",
        "database": "auth-svc",
        "timezone": "UTC"
      },
      "pool": {
        "min": 10,
        "max": 10,
        "acquireTimeoutMillis": 30000,
        "createTimeoutMillis": 30000,
        "destroyTimeoutMillis": 5000,
        "idleTimeoutMillis": 30000,
        "reapIntervalMillis": 1000,
        "createRetryIntervalMillis": 200
      },
      "migrations": {
        "tableName": "auth-svc",
        "loadExtensions": [
          ".js"
        ]
      },
      "seeds": {
        "loadExtensions": [
          ".js"
        ]
      }
    },
    "DEMO_SKIP_VALIDATION_FOR_CREDENTIAL_IDS": [
      "Jfo5k6w4np09IUtYNHnxMM696jJHqvccUdBmd0xP6XEWwH0xLei1PUzDJCM19SZ3A2Ex0fNLw0nc2hrIlFnAtw=="
    ]
  }

service:
  type: ClusterIP
  ports:
    name: api
    externalPort: 4004
    internalPort: 4004

ingress:
  enabled: true
  # Used to create an Ingress record.
  hosts:
    - host: auth-service.local
      port: 4004
      name: auth-svc
      paths: ['/']

  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 8m
    ## https://kubernetes.github.io/ingress-nginx/examples/rewrite/
    # nginx.ingress.kubernetes.io/rewrite-target: '/'
    # nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    ## https://kubernetes.github.io/ingress-nginx/user-guide/multiple-ingress/
    # kubernetes.io/ingress.class: nginx
    ## https://kubernetes.github.io/ingress-nginx/user-guide/tls/#automated-certificate-management-with-kube-lego
    # kubernetes.io/tls-acme: "true"
  tls: []
