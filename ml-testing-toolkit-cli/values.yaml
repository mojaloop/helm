# Default values for ml-testing-toolkit-cli.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
image:
  repository: mojaloop/ml-testing-toolkit-client-lib
  tag: v1.2.0
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []

## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/job/#handling-pod-and-container-failures
backoffLimit: 0
restartPolicy: Never



## Bash script for TTK CLI
script: |
    echo "Downloading the test collection...";
    wget {{ .Values.config.testCasesZipUrl }} -O downloaded-test-collections.zip;
    mkdir tmp_test_cases;
    unzip -d tmp_test_cases -o downloaded-test-collections.zip;
    npm run cli -- \
      -c cli-default-config.json \
      -e cli-testcase-environment.json \
      -i tmp_test_cases/{{ .Values.config.testCasesPathInZip }} \
      -u {{ .Values.config.ttkBackendURL | replace "$release_name" .Release.Name }} \
      --report-format html \
      {{- if .Values.config.awsS3BucketName }}
      --report-target s3://{{ .Values.config.awsS3BucketName }}/{{ .Values.config.awsS3FilePath }}/report.html \
      {{- end }}
      --report-auto-filename-enable true \
      {{- if .Values.configCreds.SLACK_WEBHOOK_URL }}
      --slack-webhook-url $SLACK_WEBHOOK_URL \
      {{- end }}
      --extra-summary-information="Test Suite:{{ .Values.config.testSuiteName }},Environment:{{ .Values.config.environmentName }}" \
      {{- if .Values.config.saveReport }}
      --save-report true \
      {{- end }}
      {{- if .Values.config.reportName }}
      --report-name {{ .Values.config.reportName }} \
      {{- end }}
      {{- if .Values.config.saveReportBaseUrl }}
      --save-report-base-url {{ .Values.config.saveReportBaseUrl }}
      {{- end }};
    {{- if .Values.config.allowFailures }}
    export TEST_RUNNER_EXIT_CODE="$?"
    echo "Test Runner finished with exit code: $TEST_RUNNER_EXIT_CODE"
    echo "Config 'allowFailures' is '{{ .Values.config.allowFailures }}', exiting with '0' exit code!";
    exit 0;
    {{- else }}
    export TEST_RUNNER_EXIT_CODE="$?";
    echo "Test Runner finished with exit code: $TEST_RUNNER_EXIT_CODE";
    exit $TEST_RUNNER_EXIT_CODE;
    {{- end }}

scheduling:
  enabled: false
  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-suspension
  ## You can suspend execution of Jobs for a CronJob, by setting this field to true. The field defaults to false.
  suspend: false
  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#jobs-history-limits
  successfulJobsHistoryLimit: 7
  failedJobsHistoryLimit: 7
  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
  timeZone: 'Etc/UTC'
  ## Note: First Cronjob may fail as the Hub setup & Sim onboarding may not be completed. These must be run either via Post-hooks or via running `Helm test`.
  ## cronSchedule format as follows:
  ## Ref: https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#example
  ## ┌───────────── minute (0 - 59)
  ## │ ┌───────────── hour (0 - 23)
  ## │ │ ┌───────────── day of the month (1 - 31)
  ## │ │ │ ┌───────────── month (1 - 12)
  ## │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
  ## │ │ │ │ │                                   7 is also Sunday on some systems)
  ## │ │ │ │ │
  ## │ │ │ │ │
  ## * * * * *
  cronSchedule: '0 8 * * *'

tests:
  enabled: false
  weight: -5
  deletePolicy: before-hook-creation

postInstallHook:
  enabled: false
  weight: -5
  deletePolicy: before-hook-creation

job:
  enabled: false
  ## Set the TTL for Job Cleanup - ref: https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/
  # ttlSecondsAfterFinished: 50
  generateNameEnabled: true

  annotations: {}
  # Add custom annotations here. Use the following line as examples, it will overrride the default helm hook.
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/sync-wave: "-5"
  #### If passing the arguments using commad line, may be necessary scape the "." character -> i.e: "argocd\.argoproj\.io/hook": PostSync
  
  # Add custom labels of job template here.
  templateLabels: {}
  
config:
  ## Test-case archive zip for test-cases: https://github.com/mojaloop/testing-toolkit-test-cases
  testCasesZipUrl: https://github.com/mojaloop/testing-toolkit-test-cases/archive/v<TAG_VERSION>.zip
  ## Choose one of the following test-case paths for Provisioning or Golden Path test-cases:
  # testCasesPathInZip: testing-toolkit-test-cases-12.0.0/collections/hub/provisioning
  testCasesPathInZip: testing-toolkit-test-cases-<TAG_VERSION>/collections/hub/golden_path
  ## Optional config for uploading reports to S3 Buckets. If enabled: WS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION under the 'configCreds' is required.
  # awsS3BucketName: 's3_bucket_name'
  # awsS3FilePath: ttk-tests/reports
  ttkBackendURL: http://testing-toolkit-adminapi.local
  testSuiteName: GP Tests
  environmentName: Development
  saveReport: false
  saveReportBaseUrl: "testing-toolkit.local"
  ## `allowFailures` configures this TTK CLI Test Runner to return failure exit-codes to the terminal,
  ## by default this is `false` - which means that any consecutive Helm tests will not be executed by Helm.
  ## If this is set to `true` - it will allow all Helm tests to be executed regardless of any failures.
  allowFailures: false

## Optionally you can specify some parameters here and the references in the environment file like the format '$param_<Param Name>' will be replaced with their values specified here
parameters: {}
configCreds:
  ## Define AWS Config
  AWS_ACCESS_KEY_ID: 'some_aws_access_key'
  AWS_SECRET_ACCESS_KEY: 'some_aws_secret_key'
  AWS_REGION: 'us-west-2'
  ## Define Slack Webhook URL for announcements
  # SLACK_WEBHOOK_URL: 'slack_inbound_webhook'

## Optionally specify the config file defaults for TTK CLI
## You should specify at least mode here
# configFileDefaults: {
#   "mode": "outbound",
#   "reportFormat": "html",
#   "baseURL": "",
#   "reportTarget": "",
#   "reportAutoFilenameEnable": true,
#   "slackWebhookUrl": "",
#   "slackPassedImage": "",
#   "slackFailedImage": ""
# }
configFileDefaults: {"mode": "outbound", "logLevel": "2"}

testCaseEnvironmentFile:
  ## inputValues are Key-value pairs in the following format: <filename.json>: { <JSON> }
  #  inputValues:
  #    hub-k8s-local-environment.json: {
  #      "inputValues": {
  #        "BASE_CENTRAL_LEDGER_ADMIN": "",
  #       }
  #     }
  inputValues: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

