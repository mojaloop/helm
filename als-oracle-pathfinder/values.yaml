# Default values for als-oracle-pathfinder.
# This is a YAML-formatted file.
# Declare global configurations
global: {}
# Declare variables to be passed into your templates.
image:
  repository: mojaloop/als-oracle-pathfinder
  tag: v12.1.0
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
replicaCount: 1
command: '["node", "/opt/app/src/index.js"]'
## Enable diagnostic mode in the deployment
##
diagnosticMode:
  ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
  ##
  enabled: false
  ## @param diagnosticMode.command Command to override all containers in the deployment
  ##
  command:
    - node
    - /opt/app/src/index.js
  ## @param diagnosticMode.args Args to override all containers in the deployment
  ##
  args:
    - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
  ## @param diagnosticMode.debug config to override all debug information
  ##
  debug:
    internalPort: 9229
    port: 9229
## Pod scheduling preferences.
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
## Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}
## Set toleration for scheduler
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []
## Configure Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param containerSecurityContext.enabled Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context
## @param containerSecurityContext.runAsUser Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser
##
containerSecurityContext:
  enabled: true
  runAsUser: 1001
readinessProbe:
  enabled: true
  httpGet:
    path: /
  initialDelaySeconds: 45
  periodSeconds: 15
livenessProbe:
  enabled: true
  httpGet:
    path: /
  initialDelaySeconds: 45
  periodSeconds: 15
config:
  db:
    type: 'mysql'
    driver: 'mysql'
    central_ledger:
      host: '$release_name-centralledger-mysql'
      port: '3306'
      database: 'central_ledger'
      user: 'central_ledger'
      ## Secret-Management
      ### Set this if you are using a clear password configured in the config section
      password: ''
      ### Configure this if you want to use a secret. Note, this will override the db_password,
      ### Use the next line if you do wish to use the db_password value instead.
      # secret:
      ### Example config for an existing secret
      # secret:
      #   name: mysqldb
      #   key: mysql-password
    account_lookup:
      host: '$release_name-account-lookup-mysql'
      port: '3306'
      database: 'account_lookup'
      user: 'account_lookup'
      ## Secret-Management
      ### Set this if you are using a clear password configured in the config section
      password: ''
      ### Configure this if you want to use a secret. Note, this will override the db_password,
      ### Use the next line if you do wish to use the db_password value instead.
      # secret:
      ### Example config for an existing secret
      # secret:
      #   name: mysqldb
      #   key: mysql-password
  log_level: 'info'
  pathfinder:
    # Example host IP to be replaced by valid IP
    host: '156.154.59.224'
    port: 7007
    queryTimeoutMs: 10000
    tls:
      certs:
        # These are example keys, please get valid keys for your deployment
        client_cert: |-
          -----BEGIN CERTIFICATE-----
          MIIDJTCCAg2gAwIBAgIUJCP4oT84Rhs5PUkj/CCBVArsccowDQYJKoZIhvcNAQEL
          BQAwIjEgMB4GA1UEAwwXY2FzYWJsYW5jYS5tb2R1c2JveC5jb20wHhcNMTgwOTE4
          MTMxNjQ5WhcNMjgwOTE1MTMxNjQ5WjAiMSAwHgYDVQQDDBdjYXNhYmxhbmNhLm1v
          ZHVzYm94LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu3Tmcp
          K2MRD2xVoCD3oB5O52sCCrZso1u0Si7IrKIHO/RG8+134MomjmJEEYRsPNkmWVtd
          Bn6f2tMVN7xcB5p67Ol4JODZ/xCGAAoynvAj1gCRTal5VO7KPW7h54tCIEZBbLag
          Wynh3UnM57ax7e9LIEc3gNru/Gr2FLs/WK3VLC89by4n0rNg7BQdyGfodQfYSuhk
          8iv+WZe0kCeCeglZSEqoGjT7syPcauAxyJA35BKo1gugjeN6vd6guCDqfLxVm6UC
          pzaFaM8JWsS/cwY0afGyN5Ie0y6BwJLUXURJM0tl9Fi5bhiyivZIklmIx+J6j3ak
          zTAfEKYiXaf9GCkCAwEAAaNTMFEwHQYDVR0OBBYEFNh261m/df16u43jwMnOngK5
          tj0tMB8GA1UdIwQYMBaAFNh261m/df16u43jwMnOngK5tj0tMA8GA1UdEwEB/wQF
          MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIQz2me3O0NArs+zLZZ9JkOy3ZDN3B2o
          djt5ku4PY/dORclf54NOBclzV8XH+ZIcIR0Ihwt1uxXawcC14skTDFRH4jBATfci
          6a88ykBpzd5IuwnedKpLXpGEVrPCVZjhacdsyoxSeoErsgJRT5aEkO23d4pzrtFv
          nZjc01XMrPhILUaQjqs7bsqTnyEGJTkZBrUr2NlnB9p7vbah1jhSCTr6zRy6j71u
          w/IqTDvkNX++PnfT7e0ZYkNxKec4gcPG86REEw/SNDxUMwkss3l+k0fnw4UCWst7
          Qau7YTXMeZC95YG4SGj2uUpXYOynTsW1PnDjYdfyIXFAXQR09M+mtss=
          -----END CERTIFICATE-----
        client_key: |-
          -----BEGIN RSA PRIVATE KEY-----
          MIIEogIBAAKCAQEAy7dOZykrYxEPbFWgIPegHk7nawIKtmyjW7RKLsisogc79Ebz
          7XfgyiaOYkQRhGw82SZZW10Gfp/a0xU3vFwHmnrs6Xgk4Nn/EIYACjKe8CPWAJFN
          qXlU7so9buHni0IgRkFstqBbKeHdSczntrHt70sgRzeA2u78avYUuz9YrdUsLz1v
          LifSs2DsFB3IZ+h1B9hK6GTyK/5Zl7SQJ4J6CVlISqgaNPuzI9xq4DHIkDfkEqjW
          C6CN43q93qC4IOp8vFWbpQKnNoVozwlaxL9zBjRp8bI3kh7TLoHAktRdREkzS2X0
          WLluGLKK9kiSWYjH4nqPdqTNMB8QpiJdp/0YKQIDAQABAoIBAArt3qryLn22IJmz
          Tk/2eQSnPwsipOh8k5cL6R7xbTGUKcdFNzj6QXkW8HSdKkNseyc7Q3f/WaXZdaf1
          b3QPi+jhx2wPIgteJq0AQ2hIpvZDNev536zD8aaN+xXD0ORLu+eJAwgZOkrY70JS
          V+wZR6aa5TRs6eDVCX3DjgEtuNg6ivNmSiYm64v167NCJgMahrGF76iigkwn61yA
          vd8sMpwD9GLpNifU93m2kWiODyNL3hbvpH27S6BZ3/0sNrNrwBKfBz8PzG81v7je
          ZhsuOj2SlW6H15UKoFWSD6r3lV7/Tj6VCCU6uNYSIBK2kaigjGfw8RY3JiBTN07+
          Jgcj+/ECgYEA+vhF/8nWH3Kv2PsdlqNvd0ytU+8KItV2Ct8bCDEv3BvHqUXTg6FR
          SyzH0TUusKSsLA+pgEi9JpvdRLS6p1dzw9Gn3DmvwjCxuMGh5DFFkU2yVolWIbRx
          GfUym/sTL0nllKIOtytNDjMsYMsj8+pIHescVrAPJYuqBl2hlF6DtaMCgYEAz8yS
          2DTE6FcCpYFr3FfNB1ak6IQeT0ojktcsJKfUFsbwPrN1Rmjq0hKZeD1A29Nx/R9p
          reguvFj678SIS6ThWmHcgFv1JupKl2XJZPyW5vpEslf1H7QpZn9S1sG/aFRVQjNw
          9fNB/pCOvu5fbBvMF7pml8gGDHMjz5VIyztZH8MCgYBfg4mwdbJmOZGvNLLoF79e
          WfJFVV44L6FDNfHlxkJ+tJviUk7Tc9uqjpplhqYEWEemZTePOR+zx/IIKfg3o9LN
          HceSyumXME0TEa55WD8vs7BBuvbq0O+Sf30JXB7LCoazcJHFKFelJdin5egC9pEH
          wekBHPRGx8ansY7DFs1tnQKBgCTXLRWdzWcvve1f06KeAmCRsOz0N3dxOntXIKFj
          C8v5+y/ymxEfmrohyAm0OmJ+y0/IGPFXH6oO0HZfzpYypi1i+jfblcwPb6gFyL3Z
          tls+9Zz00SWMyGY+no4qjWfOw8rX2egQ95tNP7GEC3DcQMPYLUYtlTzx0OCFpAE8
          BWIHAoGALUC9fyvcipxs6C+HYnVxeoPBwaNz22KTLrLIRiDCE/Ag7TZ7bsRi565/
          xD2e+6FT+f9ZTiF4vW7clIe3e343OYCrYUdYUtMEGEnAT6a+XoxXK9XlOZFHdyzt
          yg9yPUB7DlZ8ve69Kw5nZs8uqmLczgRpb5gg59jvldfqXjSeYG4=
          -----END RSA PRIVATE KEY-----
        pathfinder_cert: |-
          -----BEGIN CERTIFICATE-----
          MIIHKzCCBhOgAwIBAgIQC8BA31WxPISc4+/Oo/5WwzANBgkqhkiG9w0BAQsFADBe
          MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
          d3cuZGlnaWNlcnQuY29tMR0wGwYDVQQDExRHZW9UcnVzdCBSU0EgQ0EgMjAxODAe
          Fw0xOTAyMjIwMDAwMDBaFw0yMTA1MjMxMjAwMDBaMH0xCzAJBgNVBAYTAlVTMREw
          DwYDVQQIEwhWaXJnaW5pYTERMA8GA1UEBxMIU3RlcmxpbmcxFDASBgNVBAoTC05l
          dXN0YXIgSW5jMQ0wCwYDVQQLEwRFbnVtMSMwIQYDVQQDExpwYXRoZmluZGVyLXNz
          bC5uZXVzdGFyLmJpejCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANuI
          9MyqFTTX0xOoy8H/seS8+66OTp6mzie1DLMQeQf4rTlqEc6/TyjdlIwhVnFxZeNw
          ni/1kIrQVs9dy6blOEtrgii25FmJ5N2rffssu24drnj1sa6TJoBL94Ym7fg0mHOM
          duvtc1KtOTT76cyxxTHjTSLHMUORjBQhNXjpqIu+512AWyMF1K3OinvJCzS4rl9p
          3C2fjOEBZIBx/y/Nf3etFr87eTbETtykCkbZ9pqZ+ZT8MjEIcTnxXA3kY78yB984
          Y2VD8s/TiNdmf6dbWEHsekGueB2fUQdhSbJ7bhbVuYXiU0xPkygrvwes3j6gnfUp
          LX7k1u9UtrnDIVLCMn8CAwEAAaOCA8QwggPAMB8GA1UdIwQYMBaAFJBY/7CcdahR
          VHex7fKjQxY4nmzFMB0GA1UdDgQWBBTLbqLmDnv+kWj9B1SNw7iYMByu4DBFBgNV
          HREEPjA8ghpwYXRoZmluZGVyLXNzbC5uZXVzdGFyLmJpeoIecGF0aGZpbmRlci1j
          dGUtc3NsLm5ldXN0YXIuYml6MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggr
          BgEFBQcDAQYIKwYBBQUHAwIwPgYDVR0fBDcwNTAzoDGgL4YtaHR0cDovL2NkcC5n
          ZW90cnVzdC5jb20vR2VvVHJ1c3RSU0FDQTIwMTguY3JsMEwGA1UdIARFMEMwNwYJ
          YIZIAYb9bAEBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv
          bS9DUFMwCAYGZ4EMAQICMHUGCCsGAQUFBwEBBGkwZzAmBggrBgEFBQcwAYYaaHR0
          cDovL3N0YXR1cy5nZW90cnVzdC5jb20wPQYIKwYBBQUHMAKGMWh0dHA6Ly9jYWNl
          cnRzLmdlb3RydXN0LmNvbS9HZW9UcnVzdFJTQUNBMjAxOC5jcnQwCQYDVR0TBAIw
          ADCCAfYGCisGAQQB1nkCBAIEggHmBIIB4gHgAHYApLkJkLQYWBSHuxOizGdwCjw1
          mAT5G9+443fNDsgN3BAAAAFpFiFVvAAABAMARzBFAiEA9sjfAGNdf12MKfjrEbZ3
          leBomrp5NX6EDzEjntFRV1ACIFTAuvWB1joOomVAjdZJ/N6SiIq5cmDh2kgwSco1
          mDQVAHYAh3W/51l8+IxDmV+9827/Vo1HVjb/SrVgwbTq/16ggw8AAAFpFiFXBwAA
          BAMARzBFAiEA6GvIepqPozNDFdsAPzRmZi54+ca5DfFiTZrA4goU67QCIE7psPkD
          rYe0J5hwlnXOY4fg258my+WZL6jwx67zfBH7AHYARJRlLrDuzq/EQAfYqP4owNrm
          gr7YyzG1P9MzlrW2gagAAAFpFiFV6wAABAMARzBFAiEAltYOx4KFbyLN6nhwkrAI
          F1Kyb9zyZ/GuEXS9U3f4lAYCICwIa6eKWvzynXiwOdDeHeA1vvsYFbL0NoqlzvZ/
          5HqtAHYAVhQGmi/XwuzT9eG9RLI+x0Z2ubyZEVzA75SYVdaJ0N0AAAFpFiFXHgAA
          BAMARzBFAiEAgj8cUt4qwhQpODoj1kpOm5Jj5/OFMXZFaSJ/c3t3EHwCIAyQDtFB
          b4xP0k43+HxdoC+IA4fm8lpvmvm+fg7ivu1rMA0GCSqGSIb3DQEBCwUAA4IBAQCT
          OBEW2mF6mT6KW4FHIOnzoOaNoB56JqGjcUr5T8WAX9UYUK/K+9RikS5hYmy71nZN
          HWZ2fWR/xSvZwyVb3alNDcAlYq+JUxuspkS1n+wVVOD1KaqZ/OJ80rDsOeGhhoxs
          Iorc21NsJUTxSdBTgk0i8fYr5hxNCm/3R3+f08XtfeS6wnWgrzCoaQHRm+tovlkW
          jzFdj3yKdHQrzdRHBvaY9rx9txnyzzlMsLESndHiq3SsJn0hjmhuv4fUdHZ4bOAF
          gH9xXsp2OkeQC2W4JHMQXREK35dvTbkmdwiv7m1nUFQIsdVCoNLyQgCxE9WeoWVZ
          swAuMNNA04475W70JPPB
          -----END CERTIFICATE-----
        pathfinder_intermediate_cert: |-
          -----BEGIN CERTIFICATE-----
          MIIEizCCA3OgAwIBAgIQBUb+GCP34ZQdo5/OFMRhczANBgkqhkiG9w0BAQsFADBh
          MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
          d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
          QTAeFw0xNzExMDYxMjIzNDVaFw0yNzExMDYxMjIzNDVaMF4xCzAJBgNVBAYTAlVT
          MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
          b20xHTAbBgNVBAMTFEdlb1RydXN0IFJTQSBDQSAyMDE4MIIBIjANBgkqhkiG9w0B
          AQEFAAOCAQ8AMIIBCgKCAQEAv4rRY03hGOqHXegWPI9/tr6HFzekDPgxP59FVEAh
          150Hm8oDI0q9m+2FAmM/n4W57Cjv8oYi2/hNVEHFtEJ/zzMXAQ6CkFLTxzSkwaEB
          2jKgQK0fWeQz/KDDlqxobNPomXOMJhB3y7c/OTLo0lko7geG4gk7hfiqafapa59Y
          rXLIW4dmrgjgdPstU0Nigz2PhUwRl9we/FAwuIMIMl5cXMThdSBK66XWdS3cLX18
          4ND+fHWhTkAChJrZDVouoKzzNYoq6tZaWmyOLKv23v14RyZ5eqoi6qnmcRID0/i6
          U9J5nL1krPYbY7tNjzgC+PBXXcWqJVoMXcUw/iBTGWzpwwIDAQABo4IBQDCCATww
          HQYDVR0OBBYEFJBY/7CcdahRVHex7fKjQxY4nmzFMB8GA1UdIwQYMBaAFAPeUDVW
          0Uy7ZvCj4hsbw5eyPdFVMA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEF
          BQcDAQYIKwYBBQUHAwIwEgYDVR0TAQH/BAgwBgEB/wIBADA0BggrBgEFBQcBAQQo
          MCYwJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBCBgNVHR8E
          OzA5MDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20vRGlnaUNlcnRHbG9i
          YWxSb290Q0EuY3JsMD0GA1UdIAQ2MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxo
          dHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMA0GCSqGSIb3DQEBCwUAA4IBAQAw
          8YdVPYQI/C5earp80s3VLOO+AtpdiXft9OlWwJLwKlUtRfccKj8QW/Pp4b7h6QAl
          ufejwQMb455OjpIbCZVS+awY/R8pAYsXCnM09GcSVe4ivMswyoCZP/vPEn/LPRhH
          hdgUPk8MlD979RGoUWz7qGAwqJChi28uRds3thx+vRZZIbEyZ62No0tJPzsSGSz8
          nQ//jP8BIwrzBAUH5WcBAbmvgWfrKcuv+PyGPqRcc4T55TlzrBnzAzZ3oClo9fTv
          O9PuiHMKrC6V6mgi0s2sa/gbXlPCD9Z24XUMxJElwIVTDuKB0Q4YMMlnpN/QChJ4
          B0AFsQ+DU0NCO+f78Xf7
          -----END CERTIFICATE-----
      # rejectUnauthorized should be true in production
      rejectUnauthorized: false
      # The following paths are all relative to this directory containing the values file
      client_cert_path: '/opt/app/secrets/client_cert.pem'
      client_key_path: '/opt/app/secrets/client_key.pem'
      root_cert_path: '/opt/app/secrets/pathfinder_cert.pem'
      # Intermediate cert is optional, but will likely be required for mutual auth if
      # rejectUnauthorized is true, as Neustar's certificate doesn't seem to have been signed by any
      # certs in the Mozilla bundle, which is used by Node as default.
      intermediate_cert_path: '/opt/app/secrets/pathfinder_intermediate_cert.pem'
## @param initContainers Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'echo "hello world"']
##
# initContainers: []
initContainers: |
  - name: wait-for-mysql-central-ledger
    image: mysql:5.7
    imagePullPolicy: IfNotPresent
    command:
      - sh
      - -c
      - |
        until mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD}  ${DB_DATABASE} -e 'select version()' ; 
        do
          echo --------------------;
          echo Waiting for MySQL...;
          sleep 2; 
        done;
        echo ====================; 
        echo MySQL ok!;
    env:
      - name: DB_HOST
        value: '{{ .Values.config.db.central_ledger.host }}'
      - name: DB_PORT
        value: '{{ .Values.config.db.central_ledger.port }}'
      - name: DB_USER
        value: '{{ .Values.config.db.central_ledger.user }}'
      - name: DB_PASSWORD
        {{- if .Values.config.db.central_ledger.secret }}
        valueFrom:
            secretKeyRef:
              name: '{{ .Values.config.db.central_ledger.secret.name }}'
              key: '{{ .Values.config.db.central_ledger.secret.key }}'
        {{- else }}
        value: {{ .Values.config.db.central_ledger.password }}
        {{- end }}
      - name: DB_DATABASE
        value: '{{ .Values.config.db.central_ledger.database }}'
  - name: init-mysql-central-ledger
    image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
    imagePullPolicy: IfNotPresent
    command:
      - sh
      - -c
      - |
        echo Running MySQL init scripts;
        mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD} ${DB_DATABASE} -e "SET @service_name='${SERVICE_NAME}'; source /opt/app/init-central-ledger.sql;";
        echo ====================; 
        echo MySQL ok!;
    env:
      - name: DB_HOST
        value: '{{ .Values.config.db.central_ledger.host }}'
      - name: DB_PORT
        value: '{{ .Values.config.db.central_ledger.port }}'
      - name: DB_USER
        value: '{{ .Values.config.db.central_ledger.user }}'
      - name: DB_PASSWORD
        {{- if .Values.config.db.central_ledger.secret }}
        valueFrom:
            secretKeyRef:
              name: '{{ .Values.config.db.central_ledger.secret.name }}'
              key: '{{ .Values.config.db.central_ledger.secret.key }}'
        {{- else }}
        value: {{ .Values.config.db.central_ledger.password }}
        {{- end }}
      - name: DB_DATABASE
        value: '{{ .Values.config.db.central_ledger.database }}'
      - name: SERVICE_NAME
        value: '{{ include "als-oracle-pathfinder.name" . }}'
  - name: wait-for-mysql-account-lookup
    image: mysql:5.7
    imagePullPolicy: IfNotPresent
    command:
      - sh
      - -c
      - |
        until mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD}  ${DB_DATABASE} -e 'select version()' ; 
        do
          echo --------------------;
          echo Waiting for MySQL...;
          sleep 2; 
        done;
        echo ====================; 
        echo MySQL ok!;
    env:
      - name: DB_HOST
        value: '{{ .Values.config.db.account_lookup.host }}'
      - name: DB_PORT
        value: '{{ .Values.config.db.account_lookup.port }}'
      - name: DB_USER
        value: '{{ .Values.config.db.account_lookup.user }}'
      - name: DB_PASSWORD
        {{- if .Values.config.db.account_lookup.secret }}
        valueFrom:
            secretKeyRef:
              name: '{{ .Values.config.db.account_lookup.secret.name }}'
              key: '{{ .Values.config.db.account_lookup.secret.key }}'
        {{- else }}
        value: {{ .Values.config.db.account_lookup.password }}
        {{- end }}
      - name: DB_DATABASE
        value: '{{ .Values.config.db.account_lookup.database }}'
  - name: init-mysql-account-lookup
    image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
    imagePullPolicy: IfNotPresent
    command:
      - sh
      - -c
      - |
        echo Running MySQL init scripts;
        mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD} ${DB_DATABASE} -e "SET @service_name='${SERVICE_NAME}'; source /opt/app/init-account-lookup.sql;";
        echo ====================; 
        echo MySQL ok!;
    env:
      - name: DB_HOST
        value: '{{ .Values.config.db.account_lookup.host }}'
      - name: DB_PORT
        value: '{{ .Values.config.db.account_lookup.port }}'
      - name: DB_USER
        value: '{{ .Values.config.db.account_lookup.user }}'
      - name: DB_PASSWORD
        {{- if .Values.config.db.account_lookup.secret }}
        valueFrom:
            secretKeyRef:
              name: '{{ .Values.config.db.account_lookup.secret.name }}'
              key: '{{ .Values.config.db.account_lookup.secret.key }}'
        {{- else }}
        value: {{ .Values.config.db.account_lookup.password }}
        {{- end }}
      - name: DB_DATABASE
        value: '{{ .Values.config.db.account_lookup.database }}'
      - name: SERVICE_NAME
        value: '{{ include "als-oracle-pathfinder.name" . }}'
## @param master.podLabels Extra labels for pod(s)
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Additional custom annotations for pod(s)
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
service:
  type: ClusterIP
  name: http-api
  port: 80
  annotations: {}
  # This allows one to point the service to an external backend.
  # This is useful for local development where one wishes to hijack
  # the communication from the service to the node layer and point
  # to a specific endpoint (IP, Port, etc).
  external:
    enabled: false
    # 10.0.2.2 is the magic IP for the host on virtualbox's network
    ip: 10.0.2.2
    ports:
      provisioning:
        name: http-api
        externalPort: 3000
ingress:
  enabled: true
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
  ##
  apiVersion: null ## @param ingress.hostname Default host for the ingress record
##
  hostname: als-oracle-pathfinder.local
  ## @param servicePort : port for the service
  ##
  servicePort: 80
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  path: /
  ## @param ingress.annotations Additional custom annotations for the ingress record
  ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
  ##
  annotations: null ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
## You can:
##   - Use the `ingress.secrets` parameter to create this TLS secret
##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
##
  tls: false
  ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
  ##
  certManager: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: transfer-api-svc.local
  ##     path: /
  ##
  extraHosts: null
  extraPaths: null
  extraTls: null
  secrets: null
  className: "nginx"
  ##
resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#  cpu: 100m
#  memory: 128Mi
# requests:
#  cpu: 100m
#  memory: 128Mi
