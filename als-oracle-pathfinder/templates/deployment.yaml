{{- $dbHostCentralLedger := ( .Values.config.db.central_ledger.host | replace "$release_name" .Release.Name ) -}}
{{- $dbHostAccountLookup := ( .Values.config.db.account_lookup.host | replace "$release_name" .Release.Name ) -}}
{{- $serviceName :=  (include "als-oracle-pathfinder.fullname" .) -}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "als-oracle-pathfinder.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "als-oracle-pathfinder.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "als-oracle-pathfinder.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "als-oracle-pathfinder.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    spec:
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
      {{- if .Values.init.enabled }}
      initContainers:
        {{- if eq .Values.config.db.type "mysql"}}
        - name: {{ .Values.init.waitForMysql.name }}
          image: {{ .Values.init.waitForMysql.repository }}:{{ .Values.init.waitForMysql.tag }}
          imagePullPolicy: {{ .Values.init.waitForMysql.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.waitForMysql.command | replace "$db_user" (print .Values.config.db.central_ledger.user) | replace "$db_password" (print .Values.config.db.central_ledger.password) | replace "$db_host" $dbHostCentralLedger | replace "$db_database" (print .Values.config.db.central_ledger.database) | replace "$db_port" (print .Values.config.db.central_ledger.port) )| quote }}
        {{- if .Values.init.initMysql.centralLedger.enabled }}
        - name: {{ .Values.init.initMysql.centralLedger.name }}
          image: {{ .Values.init.initMysql.centralLedger.repository }}:{{ .Values.init.initMysql.centralLedger.tag }}
          imagePullPolicy: {{ .Values.init.initMysql.centralLedger.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.initMysql.centralLedger.command | replace "$db_user" (print .Values.config.db.central_ledger.user) | replace "$db_password" (print .Values.config.db.central_ledger.password) | replace "$db_host" $dbHostCentralLedger | replace "$db_database" (print .Values.config.db.central_ledger.database) | replace "$db_port" (print .Values.config.db.central_ledger.port) | replace "$service_name" $serviceName )| quote }}
        {{- end }}
        {{- if .Values.init.initMysql.accountLookup.enabled }}
        - name: {{ .Values.init.initMysql.accountLookup.name }}
          image: {{ .Values.init.initMysql.accountLookup.repository }}:{{ .Values.init.initMysql.accountLookup.tag }}
          imagePullPolicy: {{ .Values.init.initMysql.accountLookup.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.initMysql.accountLookup.command | replace "$db_user" (print .Values.config.db.account_lookup.user) | replace "$db_password" (print .Values.config.db.account_lookup.password) | replace "$db_host" $dbHostAccountLookup | replace "$db_database" (print .Values.config.db.account_lookup.database) | replace "$db_port" (print .Values.config.db.account_lookup.port) | replace "$service_name" $serviceName )| quote }}
        {{- end }}
        {{- if .Values.init.populateMysql.enabled }}
        - name: {{ .Values.init.populateMysql.name }}
          image: {{ .Values.init.populateMysql.repository }}:{{ .Values.init.populateMysql.tag }}
          imagePullPolicy: {{ .Values.init.populateMysql.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.populateMysql.command | replace "$db_user" (print .Values.config.db.central_ledger.user) | replace "$db_password" (print .Values.config.db.central_ledger.password) | replace "$db_host" $dbHostCentralLedger | replace "$db_database" (print .Values.config.db.central_ledger.database) | replace "$db_port" (print .Values.config.db.central_ledger.port) | replace "$service_name" $serviceName )| quote }}
        {{- end }}
        {{- end }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.port }}
          protocol: TCP
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.httpGet.path }}
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.httpGet.path }}
            port: {{ .Values.service.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
        {{- end }}
        env:
          - name: LOG_LEVEL
            value: {{ .Values.config.log_level }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "als-oracle-pathfinder.fullname" . }}
                key: db_password
        envFrom:
          - configMapRef:
              name: {{ template "als-oracle-pathfinder.fullname" . }}
        volumeMounts:
        - name: {{ template "als-oracle-pathfinder.fullname" . }}-secrets-volume
          mountPath: /opt/als-oracle-pathfinder/secrets
          readOnly: true
      volumes:
        - name: {{ template "als-oracle-pathfinder.fullname" . }}-secrets-volume
          secret:
            secretName: {{ template "als-oracle-pathfinder.fullname" . }}-certs
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
      {{ toYaml .Values.image.imagePullSecrets | indent 10 }}
      {{- end }}
