{{- $checksumConfigRules := include (print $.Template.BasePath "/config-rules.yaml") . | sha256sum -}}
{{- $checksumConfigJWSPublicKeys := include (print $.Template.BasePath "/config-jws-public-keys.yaml") . | sha256sum -}}
{{- $checksumConfigSecrets := include (print $.Template.BasePath "/secret.yaml") . | sha256sum -}}
{{- $prefix := include "mojaloop-simulator.prefix" . -}}
{{- $releaseName := .Release.Name -}}

{{- range $name, $customConfig := .Values.simulators }}
{{- $fullName := printf "%s%s" $prefix $name }}
{{- $config := merge $customConfig $.Values.defaults }}
{{- $initContainerEnv := dict "SIM_NAME" $name "SIM_SCHEME_ADAPTER_SERVICE_NAME" (printf "sim-%s-scheme-adapter" $name) "SIM_BACKEND_SERVICE_NAME" (printf "sim-%s-backend" $name) "SIM_CACHE_SERVICE_NAME" (printf "sim-%s-cache" $name) -}}
{{- $cacheHost := default (printf "%s-cache" $fullName) $config.config.schemeAdapter.env.CACHE_HOST -}}
{{- $cachePort := default "6379" $config.config.schemeAdapter.env.CACHE_PORT -}}
{{- $cacheURL := (printf "redis://%s:%s" $cacheHost ($cachePort | toString)) -}}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" $ }}
kind: Deployment
metadata:
  name: {{ $fullName }}-scheme-adapter
  labels:
    app.kubernetes.io/name: sim-{{ $name }}-scheme-adapter
    {{- include "mojaloop-simulator.common-labels" $ | nindent 4 }}
  annotations:
    # Common annotations
    {{- if $.Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ $config.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: sim-{{ $name }}-scheme-adapter
      app.kubernetes.io/instance: {{ $releaseName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sim-{{ $name }}-scheme-adapter
        {{- include "mojaloop-simulator.common-labels" $ | nindent 8 }}
        # Custom Pod Labels
        {{- if $config.config.podLabels }}
        {{- range $key, $value := $config.config.podLabels }}
        {{ $key }}: {{ tpl $value $ | quote }}
        {{- end }}
        {{- end }}
      annotations:
        checksum/config-rules: {{ $checksumConfigRules }}
        checksum/config-jws-public-keys: {{ $checksumConfigJWSPublicKeys }}
        checksum/secrets: {{ $checksumConfigSecrets }}
        # Custom Pod annotations
        {{- if $config.config.podAnnotations }}
        {{- range $key, $value := $config.config.podAnnotations }}
        {{ $key }}: {{ tpl $value $ | quote }}
        {{- end }}
        {{- end }}
    spec:
      volumes:
      {{- if $config.config.schemeAdapter.env.JWS_SIGN }}
      - name: jws-private-key
        secret:
          {{- if $config.config.schemeAdapter.secrets.jws.privKeySecretName }}
          secretName: {{ $config.config.schemeAdapter.secrets.jws.privKeySecretName }}
          {{- else }}
          secretName: {{ $fullName }}-jws-priv-key
          {{- end }}
      {{- end }}
      - name: jws-public-keys
        configMap:
          {{- if $config.config.schemeAdapter.secrets.jws.publicKeyConfigMapName }}
          name: {{ $config.config.schemeAdapter.secrets.jws.publicKeyConfigMapName }}
          {{- else }}
          name: {{ $prefix }}jws-public-keys
          {{- end }}
      - name: tls-secrets
        secret:
          {{- if $config.config.schemeAdapter.secrets.tlsSecretName }}
          secretName: {{ $config.config.schemeAdapter.secrets.tlsSecretName }}
          {{- else }}
          secretName: {{ $fullName }}-tls-creds
          {{- end }}
      initContainers:
      {{- if $config.config.initContainers.waitForCache.enabled }}
      - name: wait-for-cache
        image: "{{ $config.config.cache.image.repository }}:{{ $config.config.cache.image.tag }}"
        imagePullPolicy: {{ $config.config.cache.image.pullPolicy }}
        command:
          - sh
          - "-c"
          - {{ printf "until redis-cli -u %s ping; do echo waiting for Redis; sleep 2; done;" $cacheURL }}
      {{- end }}
{{ include "mojaloop-simulator.prependDictToContainerEnv" (dict "containers" $config.config.schemeAdapter.initContainers "dict" (merge $config.config.schemeAdapter.env $initContainerEnv)) | indent 6 }}
      containers:
      - name: scheme-adapter
        image: "{{ $config.config.schemeAdapter.image.repository }}:{{ $config.config.schemeAdapter.image.tag }}"
        imagePullPolicy: {{ $config.config.schemeAdapter.image.pullPolicy }}
        command: {{ $config.config.schemeAdapter.image.command }}
        ports:
          - name: inboundapi
            containerPort: {{ $config.config.schemeAdapter.env.INBOUND_LISTEN_PORT }}
            protocol: TCP
          - name: outboundapi
            containerPort: {{ $config.config.schemeAdapter.env.OUTBOUND_LISTEN_PORT }}
            protocol: TCP
          - name: testapi
            containerPort: {{ $config.config.schemeAdapter.env.TEST_LISTEN_PORT }}
            protocol: TCP
        {{- if $config.config.schemeAdapter.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /
            port: {{ $config.config.schemeAdapter.env.OUTBOUND_LISTEN_PORT }}
            scheme: HTTP
        {{- end }}
        {{- if $config.config.schemeAdapter.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /
            port: {{ $config.config.schemeAdapter.env.OUTBOUND_LISTEN_PORT }}
            scheme: HTTP
        {{- end }}
        volumeMounts:
        - name: jws-public-keys
          mountPath: {{ $config.config.schemeAdapter.env.JWS_VERIFICATION_KEYS_DIRECTORY }}
        {{- if $config.config.schemeAdapter.env.JWS_SIGN }}
        - name: jws-private-key
          mountPath: "/jwsSigningKey/"
        {{- end }}
        - name: tls-secrets
          mountPath: "/secrets/"
        env:
        ## This is defined by the config.schemeAdapter.env.CACHE_HOST and config.schemeAdapter.env.CACHE_PORT as "redis://%s:%s" with defaults if one or neither are defined.
        - name: CACHE_URL
          value: {{ $cacheURL | quote }}
        {{- if (not $config.config.schemeAdapter.env.BACKEND_ENDPOINT) }}
        ## We only define this if it is not defined in config.schemeAdapter.env, otherwise we may have duplicate env values!
        - name: BACKEND_ENDPOINT
          value: {{ printf "%s-backend:3000" $fullName }}
        {{- end}}
        {{- if (not $config.config.schemeAdapter.env.DFSP_ID) }}
        ## We only define this if it is not defined in config.schemeAdapter.env, otherwise we may have duplicate env values!
        - name: DFSP_ID
          value: {{ $name | quote }}
        {{- end}}
        ## Map environment values from values.yaml
        {{- range $k, $v := $config.config.schemeAdapter.env }}
        - name: {{ $k }}
          value: {{ $v | quote | replace "$release_name" $releaseName }}
        {{- end }}
        resources:
{{ toYaml $config.config.schemeAdapter.resources | indent 10 }}
      imagePullSecrets:
        - name: {{ $config.config.imagePullSecretName }}
    {{- with $config.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: {{ include "common.capabilities.deployment.apiVersion" $ }}
kind: Deployment
metadata:
  name: {{ $fullName }}-backend
  labels:
    app.kubernetes.io/name: sim-{{ $name }}-backend
    {{- include "mojaloop-simulator.common-labels" $ | nindent 4 }}
spec:
  replicas: {{ $config.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: sim-{{ $name }}-backend
      app.kubernetes.io/instance: {{ $releaseName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sim-{{ $name }}-backend
        {{- include "mojaloop-simulator.common-labels" $ | nindent 8 }}
      annotations:
        checksum/config-rules: {{ $checksumConfigRules }}
    spec:
      initContainers:
{{ include "mojaloop-simulator.prependDictToContainerEnv" (dict "containers" $config.config.backend.initContainers "dict" (merge $config.config.backend.env $initContainerEnv)) | indent 6 }}
      containers:
      - name: backend
        image: "{{ $config.config.backend.image.repository }}:{{ $config.config.backend.image.tag }}"
        imagePullPolicy: {{ $config.config.backend.image.pullPolicy }}
        ports:
          - name: simapi
            containerPort: 3000 # these are hard-coded in the service
            protocol: TCP
          - name: reportapi
            containerPort: 3002 # these are hard-coded in the service
            protocol: TCP
          - name: testapi
            containerPort: 3003 # these are hard-coded in the service
            protocol: TCP
        {{- if $config.config.backend.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
        {{- end }}
        {{- if $config.config.backend.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
        {{- end }}
        env:
        {{- if (not $config.config.backend.env.OUTBOUND_ENDPOINT) }}
        ## We only define this if it is not defined in config.schemeAdapter.env, otherwise we may have duplicate env values!
        - name: OUTBOUND_ENDPOINT
          value: "http://{{ $fullName }}-scheme-adapter:{{ $config.config.schemeAdapter.env.OUTBOUND_LISTEN_PORT }}"
        {{- end }}
        {{- if (not $config.config.schemeAdapter.env.SCHEME_NAME) }}
        ## We only define this if it is not defined in config.schemeAdapter.env, otherwise we may have duplicate env values!
        - name: SCHEME_NAME
          value: {{ $fullName | quote }}
        {{- end }}
        {{- if (not $config.config.backend.env.DFSP_ID) }}
        ## We only define this if it is not defined in config.schemeAdapter.env, otherwise we may have duplicate env values!
        - name: DFSP_ID
          value: {{ $name | quote }}
        {{- end }}
        ## Map environment values from values.yaml
        {{- range $k, $v := $config.config.backend.env }}
        - name: {{ $k }}
          value: {{ $v | quote }}
        {{- end }}
        resources:
{{ toYaml $config.config.backend.resources | indent 10 }}
        volumeMounts:
        - name: {{ $prefix }}rules
          mountPath: /opt/app/rules/
      volumes:
      - name: {{ $prefix }}rules
        configMap:
          name: {{ $fullName }}-rules
      imagePullSecrets:
        - name: {{ $config.config.imagePullSecretName }}
    {{- with $config.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
---
{{- if $config.config.cache.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" $ }}
kind: Deployment
metadata:
  name: {{ $fullName }}-cache
  labels:
    app.kubernetes.io/name: sim-{{ $name }}-cache
    {{- include "mojaloop-simulator.common-labels" $ | nindent 4 }}
spec:
  replicas: {{ $config.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: sim-{{ $name }}-cache
      app.kubernetes.io/instance: {{ $releaseName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sim-{{ $name }}-cache
        {{- include "mojaloop-simulator.common-labels" $ | nindent 8 }}
    spec:
      initContainers:
{{ include "mojaloop-simulator.prependDictToContainerEnv" (dict "containers" $config.config.cache.initContainers "dict" $initContainerEnv) | indent 6 }}
      containers:
      - name: cache
        image: "{{ $config.config.cache.image.repository }}:{{ $config.config.cache.image.tag }}"
        imagePullPolicy: {{ $config.config.cache.image.pullPolicy }}
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        {{- if $config.config.cache.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli ping {{ $config.config.cache.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if $config.config.cache.readinessProbe.enabled}}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - redis-cli ping {{ $config.config.cache.readinessProbe.timeoutSeconds }}
        {{- end }}
        resources:
{{ toYaml $config.config.cache.resources | indent 12 }}
    {{- with $config.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
---
{{- end }}
{{- if $config.config.thirdpartysdk.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" $ }}
kind: Deployment
metadata:
  name: {{ $fullName }}-thirdparty-sdk
  labels:
    app.kubernetes.io/name: sim-{{ $name }}-thirdparty-sdk
    {{- include "mojaloop-simulator.common-labels" $ | nindent 4 }}
spec:
  replicas: {{ $config.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: sim-{{ $name }}-thirdparty-sdk
      app.kubernetes.io/instance: {{ $releaseName }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sim-{{ $name }}-thirdparty-sdk
        {{- include "mojaloop-simulator.common-labels" $ | nindent 8 }}
      annotations:
        checksum/config-rules: {{ $checksumConfigRules }}
        checksum/config-jws-public-keys: {{ $checksumConfigJWSPublicKeys }}
        checksum/secrets: {{ $checksumConfigSecrets }}
    spec:
      volumes:
        - name: {{ $fullName }}-thirdparty-sdk-config-volume
          configMap:
            name: {{ $fullName }}-thirdparty-sdk-config
            items:
              - key: production.json
                path: production.json
      initContainers:
      {{- if $config.config.initContainers.waitForCache.enabled }}
      - name: wait-for-cache
        image: "{{ $config.config.cache.image.repository }}:{{ $config.config.cache.image.tag }}"
        imagePullPolicy: {{ $config.config.cache.image.pullPolicy }}
        command:
          - sh
          - "-c"
          - {{ printf "until redis-cli -u %s ping; do echo waiting for Redis; sleep 2; done;" $cacheURL }}
      {{- end }}
{{ include "mojaloop-simulator.prependDictToContainerEnv" (dict "containers" $config.config.thirdpartysdk.initContainers "dict" (merge $config.config.thirdpartysdk.env $initContainerEnv)) | indent 6 }}
      containers:
      # Combined container
      - name: thirdpartysdk
        image: "{{ $config.config.thirdpartysdk.image.repository }}:{{ $config.config.thirdpartysdk.image.tag }}"
        imagePullPolicy: {{ $config.config.thirdpartysdk.image.pullPolicy }}
        # TODO: make configurable
        command: {{ $config.config.thirdpartysdk.image.command }}
        ports:
          - name: inbound
            containerPort: {{ $config.config.thirdpartysdk.env.INBOUND_LISTEN_PORT }}
            protocol: TCP
          - name: outbound
            containerPort: {{ $config.config.thirdpartysdk.env.OUTBOUND_LISTEN_PORT }}
            protocol: TCP
        {{- if $config.config.thirdpartysdk.readinessProbe.enabled }}
        readinessProbe:
          httpGet:
            path: /health
            port: {{ $config.config.thirdpartysdk.env.INBOUND_LISTEN_PORT }}
            scheme: HTTP
        {{- end }}
        {{- if $config.config.thirdpartysdk.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ $config.config.thirdpartysdk.env.INBOUND_LISTEN_PORT }}
            scheme: HTTP
        {{- end }}
        volumeMounts:
        - name: {{ $fullName }}-thirdparty-sdk-config-volume
          mountPath: /opt/app/dist/config/production.json
          subPath: production.json
        env:
        {{- if (not $config.config.thirdpartysdk.env.REDIS_HOST) }}
        ## We only define this if it is not defined in config.thirdpartysdk.env, otherwise we may have duplicate env values!
        - name: REDIS_HOST
          value: {{ printf "%s-cache" $fullName }}
        {{- end}}
        ## Map environment values from values.yaml
        {{- range $k, $v := $config.config.thirdpartysdk.env }}
        - name: {{ $k }}
          value: {{ $v | quote | replace "$release_name" $releaseName }}
        {{- end }}
        resources:
{{ toYaml $config.config.thirdpartysdk.resources | indent 10 }}

      imagePullSecrets:
        - name: {{ $config.config.imagePullSecretName }}
    {{- with $config.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with $config.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
---
{{- end }}
##
### End loop through simulators
##
{{ end }}
##
