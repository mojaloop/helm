global: {}
centralsettlement-service:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-settlement
    tag: v17.2.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "h", "--grossSettlement"]'
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - h
      - --grossSettlement
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-position
  config:
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    kafka:
      consumer:
        notification:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
          event:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
        deferredsettlement:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
      producer:
        notification:
          event:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                compression_codec: none
                retry_backoff_ms: 100
                message_send_max_retries: 2
                socket_keepalive_enable: true
                batch_num_messages: 100
                dr_cb: false
                socket_blocking_max_ms: 1
                queue_buffering_max_ms: 1
                broker_version_fallback: 0.10.1.0
                api_version_request: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
        deferredsettlement:
          close:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                dr_cb: true
                socket_keepalive_enable: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    handlers:
      disabled: false
      api:
        disabled: false
      settings:
        scripts_folder: scripts/grosssettlementTemp
    window_aggregation:
      retry_count: 3
      retry_interval: 3000
    hub_participant:
      id: 1
      name: Hub
    log_level: info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    rules: {}
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3007
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-settlement-grosssettlement.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
centralsettlement-handler-deferredsettlement:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-settlement
    tag: v17.2.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "h", "--deferredSettlement"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/handlers/index.js
      - h
      - --deferredSettlement
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-settlement-handler-deferredsettlement
  config:
    kafka_host: kafka
    kafka_port: 9092
    kafka:
      consumer:
        notification:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
          event:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
        deferredsettlement:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
      producer:
        notification:
          event:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                compression_codec: none
                retry_backoff_ms: 100
                message_send_max_retries: 2
                socket_keepalive_enable: true
                batch_num_messages: 100
                dr_cb: false
                socket_blocking_max_ms: 1
                queue_buffering_max_ms: 1
                broker_version_fallback: 0.10.1.0
                api_version_request: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
        deferredsettlement:
          close:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                dr_cb: true
                socket_keepalive_enable: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    handlers:
      disabled: false
      api:
        disabled: false
    window_aggregation:
      retry_count: 3
      retry_interval: 3000
    hub_participant:
      id: 1
      name: Hub
    log_level: info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
  service:
    internalPort: 3007
    type: ClusterIP
    port: 80
    httpsPort: 443
    nodePorts:
      http: null
      https: null
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-settlement-deferredsettlement.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
centralsettlement-handler-grosssettlement:
  enabled: false
  image:
    registry: docker.io
    repository: mojaloop/central-settlement
    tag: v17.2.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "h", "--grossSettlement"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/handlers/index.js
      - h
      - --grossSettlement
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-settlement-handler-grosssettlement
  config:
    kafka_host: kafka
    kafka_port: 9092
    kafka:
      consumer:
        notification:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
          event:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
        deferredsettlement:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
      producer:
        notification:
          event:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                compression_codec: none
                retry_backoff_ms: 100
                message_send_max_retries: 2
                socket_keepalive_enable: true
                batch_num_messages: 100
                dr_cb: false
                socket_blocking_max_ms: 1
                queue_buffering_max_ms: 1
                broker_version_fallback: 0.10.1.0
                api_version_request: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
        deferredsettlement:
          close:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                dr_cb: true
                socket_keepalive_enable: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    handlers:
      disabled: false
      api:
        disabled: false
    window_aggregation:
      retry_count: 3
      retry_interval: 3000
    hub_participant:
      id: 1
      name: Hub
    log_level: info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
  service:
    internalPort: 3007
    type: ClusterIP
    port: 80
    httpsPort: 443
    nodePorts:
      http: null
      https: null
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-settlement-grosssettlement.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
centralsettlement-handler-rules:
  enabled: false
  image:
    registry: docker.io
    repository: mojaloop/central-settlement
    tag: v17.2.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "h", "--rules"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/handlers/index.js
      - h
      - --rules
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /v2/health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-settlement-handler-rules
  config:
    kafka_host: kafka
    kafka_port: 9092
    kafka:
      consumer:
        notification:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
          event:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
        deferredsettlement:
          close:
            config:
              options:
                mode: 2
                batchSize: 1
                pollFrequency: 10
                recursiveTimeout: 100
                messageCharset: utf8
                messageAsJSON: true
                sync: true
                consumeTimeout: 1000
              rdkafkaConf:
                socket_keepalive_enable: true
      producer:
        notification:
          event:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                compression_codec: none
                retry_backoff_ms: 100
                message_send_max_retries: 2
                socket_keepalive_enable: true
                batch_num_messages: 100
                dr_cb: false
                socket_blocking_max_ms: 1
                queue_buffering_max_ms: 1
                broker_version_fallback: 0.10.1.0
                api_version_request: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
        deferredsettlement:
          close:
            config:
              options:
                messageCharset: utf8
              rdkafkaConf:
                event_cb: true
                dr_cb: true
                socket_keepalive_enable: true
              topicConf:
                request_required_acks: all
                partitioner: murmur2_random
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    handlers:
      disabled: false
      api:
        disabled: false
    window_aggregation:
      retry_count: 3
      retry_interval: 3000
    hub_participant:
      id: 1
      name: Hub
    log_level: info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    rules:
      interchangeFeeCalculation.js: |
        /* eslint-disable no-undef */
        // ********************************************************
        // Name: Interchange fee calculation
        // Type: notification
        // Action: commit
        // Status: success
        // Start: 2020-06-01T00:00:00.000Z
        // End: 2100-12-31T23:59:59.999Z
        // Description: This script calculates the interchange fees between DFSPs where the account type is "Wallet"
        // ********************************************************

        // ## Globals:
        // payload: The contents of the message from the Kafka topic.
        // transfer: The transfer object.

        // # Functions:
        // ## Data retrieval functions:
        // getTransfer(transferId): Retrieves a mojaloop transfer from the central-ledger API.

        // ## Helper functions:
        // getExtensionValue(list, key): Gets a value from an extension list
        // log(message): allows the script to log to standard out for debugging purposes

        // Math functions:
        // multiply(number1, number2, decimalPlaces): Uses ml-number to handle multiplication of money values

        // Ledger functions:
        // addLedgerEntry: Adds a debit and credit ledger entry to the specified account to the specified DFSPs

        log('Running - interchangeFeeCalculation')

        log(JSON.stringify(transfer))
        const payerFspId = transfer.payer.partyIdInfo.fspId
        const payeeFspId = transfer.payee.partyIdInfo.fspId

        if ((payeeFspId !== payerFspId) &&
          (transfer.payee.partyIdInfo.extensionList &&                      // WORKAROUND for issue #2149
            transfer.payer.partyIdInfo.extensionList &&                     // WORKAROUND for issue #2149
            transfer.payee.partyIdInfo.extensionList.extension &&           // WORKAROUND for issue #2149
            transfer.payer.partyIdInfo.extensionList.extension) &&          // WORKAROUND for issue #2149           (getExtensionValue(transfer.payee.partyIdInfo.extensionList.extension, 'accountType') === 'Wallet' &&
          getExtensionValue(transfer.payer.partyIdInfo.extensionList.extension, 'accountType') === 'Wallet') &&
          (transfer.transactionType.scenario === 'TRANSFER' &&
            transfer.transactionType.initiator === 'PAYER' &&
            transfer.transactionType.initiatorType === 'CONSUMER')) {
          log(`Adding an interchange fee for Wallet to Wallet from ${payerFspId} to ${payeeFspId}`)
          addLedgerEntry(payload.id, 'INTERCHANGE_FEE', // Ledger account type Id
            'INTERCHANGE_FEE', // Ledger entry type Id
            multiply(transfer.amount.amount, 0.006, 2),
            transfer.amount.currency,
            payerFspId,
            payeeFspId)
        }
  service:
    internalPort: 3007
    type: ClusterIP
    port: 80
    httpsPort: 443
    nodePorts:
      http: null
      https: null
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: false
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-settlement-rules.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
