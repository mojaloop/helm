# Default values for central-settlement.
# This is a YAML-formatted file.

# Declare global configurations
global: {}

# Declare variables to be passed into your templates.
replicaCount: 1
image:
  repository: mojaloop/central-settlement
  tag: v10.5.0
  pullPolicy: Always

## Pod scheduling preferences.
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

## Set toleration for scheduler
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

readinessProbe:
  enabled: false
  httpGet:
    path: /health
  initialDelaySeconds: 60
  periodSeconds: 15

livenessProbe:
  enabled: false
  httpGet:
    path: /health
  initialDelaySeconds: 60
  periodSeconds: 15

config:
  ## Kafka Configuration
  # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
  kafka_host: '$release_name-kafka'
  kafka_port: 9092
  kafka:
    consumer:
      settlementwindow:
        close:
          config:
            options:
              mode: 2
              batchSize: 1
              pollFrequency: 10
              recursiveTimeout: 100
              messageCharset: 'utf8'
              messageAsJSON: true
              sync: true
              consumeTimeout: 1000
            rdkafkaConf:
              socket_keepalive_enable: true
    producer:
      notification:
        event:
          config:
            options:
              messageCharset: 'utf8'
            rdkafkaConf:
              event_cb: true
              compression_codec: 'none'
              retry_backoff_ms: 100
              message_send_max_retries: 2
              socket_keepalive_enable: true
              batch_num_messages: 100
              dr_cb: false
              socket_blocking_max_ms: 1
              queue_buffering_max_ms: 1
              broker_version_fallback: '0.10.1.0'
              api_version_request: true
            topicConf:
              request_required_acks: 'all'
              partitioner: 'murmur2_random'
      settlementwindow:
        close:
          config:
            options:
              messageCharset: 'utf8'
            rdkafkaConf:
              event_cb: true
              dr_cb: true
              socket_keepalive_enable: true
            topicConf:
              request_required_acks: "all"
              partitioner: 'murmur2_random'
  ## DB Configuration
  # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
  db_type: 'mysql'
  # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
  db_driver: 'mysql'
  db_host: '$release_name-centralledger-mysql'
  db_port: 3306
  db_user: central_ledger
  db_password: oyMxgZChuu
  db_database: central_ledger
  db_connection_pool_min: 10
  db_connection_pool_max: 30
  db_acquire_timeout_millis: 30000
  db_create_timeout_millis: 30000
  db_destroy_timeout_millis: 5000
  db_idle_timeout_millis: 30000
  db_reap_interval_millis: 1000
  db_create_retry_interval_millis: 200
  db_debug: false
  # Api Handler Configuration
  handlers:
    disabled: false
    api:
      disabled: false
  # Settlement Window aggregation Configuration
  window_aggregation:
    retry_count: 3
    retry_interval: 3000
  hub_participant:
    id: 1
    name: hub
  log_level: info
  log_transport: file

  error_handling:
    include_cause_extension: false
    truncate_extensions: true

init:
  enabled: true
  mysql:
    name: wait-for-mysql
    repository: mysql
    tag: latest
    pullPolicy: Always
    command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

service:
  type: ClusterIP
  ports:
    api:
      name: http-api
      externalPort: 80
      internalPort: 3007

  annotations: {}

  # This allows one to point the service to an external backend.
  # This is useful for local development where one wishes to hijack
  # the communication from the service to the node layer and point
  # to a specific endpoint (IP, Port, etc).
  external:
    enabled: false
    # 10.0.2.2 is the magic IP for the host on virtualbox's network
    ip: 10.0.2.2
    ports:
      api:
        name: http-api
        externalPort: 3007

ingress:
  enabled: true
  externalPath: /
  # Used to create an Ingress record.
  hosts:
    api: central-settlement.local
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: '/'
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
