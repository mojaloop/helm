# Default values for central-settlement.
# This is a YAML-formatted file.

# Declare global configurations
global: {}

# Declare variables to be passed into your templates.
replicaCount: 1

containers:
  api:
    image:
      repository: mojaloop/central-settlement
      tag: v12.0.3
      pullPolicy: IfNotPresent
      command: '["node", "src/handlers/index.js", "h", "--transfersettlement"]'
    service:
      type: ClusterIP
      ports:
        api:
          name: http-api
          externalPort: 80
          internalPort: 3007
      annotations: {}
      # This allows one to point the service to an external backend.
      # This is useful for local development where one wishes to hijack
      # the communication from the service to the node layer and point
      # to a specific endpoint (IP, Port, etc).
      external:
        enabled: false
        # 10.0.2.2 is the magic IP for the host on virtualbox's network
        ip: 10.0.2.2
        ports:
          api:
            name: http-api
            externalPort: 3007
    readinessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    livenessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15

## Pod scheduling preferences.
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

## Set toleration for scheduler
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## UNCOMMENT AFTER THE EVENT SDK AND METRICS ARE IMPLEMENTED
sidecar:
  enabled: false
#   image:
#     repository: mojaloop/event-sidecar
#     tag: v11.0.0
#     pullPolicy: IfNotPresent
#     command: '["npm", "run", "start"]'
#   service:
#     internalPort: 4001
#   readinessProbe:
#     enabled: true
#     httpGet:
#       path: /health
#     initialDelaySeconds: 120
#     periodSeconds: 15
#   livenessProbe:
#     enabled: true
#     httpGet:
#       path: /health
#     initialDelaySeconds: 90
#     periodSeconds: 15
#   config:
#     event_log_grpc_host: localhost
#     event_log_grpc_port: 50051
#     event_log_filter: 'audit:*, log:info, log:warn, log:error'
#     event_log_metadata_only: true
#     log_level: info
#     log_filter: 'error, warn, info'

## metric configuration for prometheus instrumentation
metrics:
  ## flag to enable/disable the metrics end-points
  enabled: false
  config:
    timeout: 5000
    prefix: moja_
    defaultLabels:
      serviceName: central-handler-position

config:
  ## Kafka Configuration
  # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
  kafka_host: '$release_name-kafka'
  kafka_port: 9092
  kafka:
    consumer:
      notification:
        close:
          config:
            options:
              mode: 2
              batchSize: 1
              pollFrequency: 10
              recursiveTimeout: 100
              messageCharset: 'utf8'
              messageAsJSON: true
              sync: true
              consumeTimeout: 1000
            rdkafkaConf:
              socket_keepalive_enable: true
        event:
          config:
            options:
              mode: 2
              batchSize: 1
              pollFrequency: 10
              recursiveTimeout: 100
              messageCharset: 'utf8'
              messageAsJSON: true
              sync: true
              consumeTimeout: 1000
            rdkafkaConf:
              socket_keepalive_enable: true
      settlementwindow:
        close:
          config:
            options:
              mode: 2
              batchSize: 1
              pollFrequency: 10
              recursiveTimeout: 100
              messageCharset: 'utf8'
              messageAsJSON: true
              sync: true
              consumeTimeout: 1000
            rdkafkaConf:
              socket_keepalive_enable: true
    producer:
      notification:
        event:
          config:
            options:
              messageCharset: 'utf8'
            rdkafkaConf:
              event_cb: true
              compression_codec: 'none'
              retry_backoff_ms: 100
              message_send_max_retries: 2
              socket_keepalive_enable: true
              batch_num_messages: 100
              dr_cb: false
              socket_blocking_max_ms: 1
              queue_buffering_max_ms: 1
              broker_version_fallback: '0.10.1.0'
              api_version_request: true
            topicConf:
              request_required_acks: 'all'
              partitioner: 'murmur2_random'
      settlementwindow:
        close:
          config:
            options:
              messageCharset: 'utf8'
            rdkafkaConf:
              event_cb: true
              dr_cb: true
              socket_keepalive_enable: true
            topicConf:
              request_required_acks: "all"
              partitioner: 'murmur2_random'
  ## DB Configuration
  # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
  db_type: 'mysql'
  # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
  db_driver: 'mysql'
  db_host: '$release_name-centralledger-mysql'
  db_port: 3306
  db_user: central_ledger
  db_password: oyMxgZChuu
  db_database: central_ledger
  db_connection_pool_min: 10
  db_connection_pool_max: 30
  db_acquire_timeout_millis: 30000
  db_create_timeout_millis: 30000
  db_destroy_timeout_millis: 5000
  db_idle_timeout_millis: 30000
  db_reap_interval_millis: 1000
  db_create_retry_interval_millis: 200
  db_debug: false
  # Api Handler Configuration
  handlers:
    disabled: false
    api:
      disabled: false
    settings:
      scripts_folder: 'scripts/transferSettlementTemp'
  # Settlement Window aggregation Configuration
  window_aggregation:
    retry_count: 3
    retry_interval: 3000
  hub_participant:
    id: 1
    name: hub
  log_level: info
  log_transport: file

  error_handling:
    include_cause_extension: false
    truncate_extensions: true

  rules: {}
    ## The rules object defines rules files represented as key-value pairs. These rules will be executed per commited transfer.   
    ## Expected key-value format for the rules object:
    ##  nameOfFile.js: fileContents 
    ## See below example of interchange fee rule.
    
    # interchangeFeeCalculation.js: |
    #   /* eslint-disable no-undef */
    #   // ********************************************************
    #   // Name: Interchange fee calculation
    #   // Type: notification
    #   // Action: commit
    #   // Status: success
    #   // Start: 2020-06-01T00:00:00.000Z
    #   // End: 2100-12-31T23:59:59.999Z
    #   // Description: This script calculates the interchange fees between DFSPs where the account type is "Wallet"
    #   // ********************************************************

    #   // ## Globals:
    #   // payload: The contents of the message from the Kafka topic.
    #   // transfer: The transfer object.

    #   // # Functions:
    #   // ## Data retrieval functions:
    #   // getTransfer(transferId): Retrieves a mojaloop transfer from the central-ledger API.

    #   // ## Helper functions:
    #   // getExtensionValue(list, key): Gets a value from an extension list
    #   // log(message): allows the script to log to standard out for debugging purposes

    #   // Math functions:
    #   // multiply(number1, number2, decimalPlaces): Uses ml-number to handle multiplication of money values

    #   // Ledger functions:
    #   // addLedgerEntry: Adds a debit and credit ledger entry to the specified account to the specified DFSPs

    #   log(JSON.stringify(transfer))
    #   const payerFspId = transfer.payer.partyIdInfo.fspId
    #   const payeeFspId = transfer.payee.partyIdInfo.fspId

    #   if ((payeeFspId !== payerFspId) &&
    #     (getExtensionValue(transfer.payee.partyIdInfo.extensionList.extension, 'accountType') === 'Wallet' &&
    #       getExtensionValue(transfer.payer.partyIdInfo.extensionList.extension, 'accountType') === 'Wallet') &&
    #     (transfer.transactionType.scenario === 'TRANSFER' &&
    #       transfer.transactionType.initiator === 'PAYER' &&
    #       transfer.transactionType.initiatorType === 'CONSUMER')) {
    #     log(`Adding an interchange fee for Wallet to Wallet from ${payerFspId} to ${payeeFspId}`)
    #     addLedgerEntry(payload.id, 'INTERCHANGE_FEE', // Ledger account type Id
    #       'INTERCHANGE_FEE', // Ledger entry type Id
    #       multiply(transfer.amount.amount, 0.006, 2),
    #       transfer.amount.currency,
    #       payerFspId,
    #       payeeFspId)
    #   }

init:
  enabled: true
  mysql:
    name: wait-for-mysql
    repository: mysql
    tag: latest
    pullPolicy: IfNotPresent
    command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
  kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: latest
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
service:
  type: ClusterIP
  ports:
    api:
      name: http-api
      externalPort: 80
      internalPort: 3007
  annotations: {}

  # This allows one to point the service to an external backend.
  # This is useful for local development where one wishes to hijack
  # the communication from the service to the node layer and point
  # to a specific endpoint (IP, Port, etc).
  external:
    enabled: false
    # 10.0.2.2 is the magic IP for the host on virtualbox's network
    ip: 10.0.2.2
    ports:
      api:
        name: http-api
        externalPort: 3007
ingress:
  enabled: true
  externalPath:
    api: /
  # Used to create an Ingress record.
  hosts:
    api: central-settlement-transfersettlement.local
  annotations: {}
    ## https://kubernetes.github.io/ingress-nginx/examples/rewrite/
    # nginx.ingress.kubernetes.io/rewrite-target: '/'
    # nginx.ingress.kubernetes.io/rewrite-target: '/$2'
    ## https://kubernetes.github.io/ingress-nginx/user-guide/multiple-ingress/
    # kubernetes.io/ingress.class: nginx
    ## https://kubernetes.github.io/ingress-nginx/user-guide/tls/#automated-certificate-management-with-kube-lego
    # kubernetes.io/tls-acme: "true"
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
