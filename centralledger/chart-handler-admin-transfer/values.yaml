# Default values for central-ledger.
# This is a YAML-formatted file.

# Declare global configurations
global:
  config:
    ## Pod scheduling preferences.
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ##
    affinity: {}

    ## Node labels for pod assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    nodeSelector: {}

    ## Set toleration for schedular
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    tolerations: []

# Declare variables to be passed into your templates.

replicaCount: 1
containers:
  api:
    image:
      repository: mojaloop/central-ledger
      tag: v4.2.1
      pullPolicy: Always
      command: '["node", "src/handlers/index.js", "handler", "--admin"]'
    service:
      ports:
        api:
          name: http-api
          externalPort: 3000
          internalPort: 3000
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15

config:
  ## Forensic Logging sidecar
  # this is for Forensic Logging Sidecar
  forensicloggingsidecar_host: forensicloggingsidecar-ledger
  forensicloggingsidecar_port: 5678

  ## DB Configuration
  # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
  db_type: 'mysql'
  # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
  db_driver: 'mysql'
  db_host: '$release_name-centralledger-mysql'
  db_port: 3306
  db_user: central_ledger
  db_password: oyMxgZChuu
  db_database: central_ledger

  ## Kafka Configuration
  # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
  kafka_host: '$release_name-kafka'
  kafka_port: 9092

  ## App Configuration Template
  # default_json config for nodejs. The following variables will be injected by the helm chart (see config.yaml): $service_api_port, $service_admin_port, $ingress_host, $forensicloggingsidecar_host, $forensicloggingsidecar_port, $kafka_host, $kafka_port
  default_json: |
   {
     "PORT": $service_api_port,
     "HOSTNAME": "$ingress_host",
     "RUN_MIGRATIONS": false,
     "ENABLE_TOKEN_AUTH": false,
     "ENABLE_BASIC_AUTH": false,
     "LEDGER_ACCOUNT_NAME": "LedgerName",
     "LEDGER_ACCOUNT_PASSWORD": "LedgerPassword",
     "AMOUNT": {
       "PRECISION": 10,
       "SCALE": 2
     },
     "SIDECAR": {
       "DISABLED": false,
       "HOST": "$forensicloggingsidecar_host",
       "PORT": $forensicloggingsidecar_port,
       "CONNECT_TIMEOUT": 45000,
       "RECONNECT_INTERVAL": 5000
     },
     "HANDLERS": {
       "DISABLED": false,
       "API": {
         "DISABLED": false
       },
       "CRON": {
         "DISABLED": false,
         "TIMEXP": "*/10 * * * * *",
         "TIMEZONE": "UTC"
       },
       "TIMEOUT": {
         "DISABLED": false,
         "TIMEXP": "*/15 * * * * *",
         "TIMEZONE": "UTC"
       }
     },
     "EMAIL_USER": "modusboxemailtest@gmail.com",
     "EMAIL_PASSWORD": "April2o0%",
     "EMAIL_SMTP": "smtp.gmail.com",
     "PARTICIPANT_INITIAL_POSTITION": 0,
     "HUB_PARTICIPANT": {
        "ID": 1,
        "NAME": "Hub",
        "ACCOUNTS": [
          "HUB_RECONCILIATION",
          "HUB_MULTILATERAL_SETTLEMENT",
          "HUB_FEE"
        ]
      },
     "INTERNAL_TRANSFER_VALIDITY_SECONDS": "432000",
     "KAFKA": {
       "TOPIC_TEMPLATES": {
         "PARTICIPANT_TOPIC_TEMPLATE": {
           "TEMPLATE": "topic-{{participantName}}-{{functionality}}-{{action}}",
           "REGEX": "topic-(.*)-(.*)-(.*)"
         },
         "GENERAL_TOPIC_TEMPLATE": {
           "TEMPLATE": "topic-{{functionality}}-{{action}}",
           "REGEX": "topic-(.*)-(.*)"
         }
       },
       "CONSUMER": {
         "TRANSFER": {
           "PREPARE": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-transfer-prepare",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           },
           "GET": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-transfer-get",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           },
           "FULFIL": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-transfer-fulfil",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           },
           "REJECT": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-transfer-reject",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           }
         },
         "POSITION": {
           "PREPARE": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-position-prepare",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           },
           "FULFIL": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-position-fulfil",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           },
           "ABORT": {
             "config": {
               "options": {
                 "mode": 2,
                 "batchSize": 1,
                 "pollFrequency": 10,
                 "recursiveTimeout": 100,
                 "messageCharset": "utf8",
                 "messageAsJSON": true,
                 "sync": true,
                 "consumeTimeout": 1000
               },
               "rdkafkaConf": {
                 "client.id": "cl-con-position-abort",
                 "debug": "all",
                 "group.id": "central-ledger-kafka",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "socket.blocking.max.ms": 1,
                 "fetch.wait.max.ms": 1,
                 "fetch.error.backoff.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true,
                 "enable.auto.commit": false,
                 "auto.commit.interval.ms": 200
               },
               "topicConf": {
                 "auto.offset.reset": "earliest"
               }
             }
           }
         },
        "ADMIN": {
          "TRANSFER": {
            "config": {
              "options": {
                "mode": 2,
                "batchSize": 1,
                "pollFrequency": 10,
                "recursiveTimeout": 100,
                "messageCharset": "utf8",
                "messageAsJSON": true,
                "sync": true,
                "consumeTimeout": 1000
              },
              "rdkafkaConf": {
                "client.id": "admin-transfer-consume",
                "debug": "all",
                "group.id": "central-ledger-kafka",
                "metadata.broker.list": "$kafka_host:$kafka_port",
                "socket.blocking.max.ms": 1,
                "fetch.wait.max.ms": 1,
                "fetch.error.backoff.ms": 1,
                "queue.buffering.max.ms": 1,
                "broker.version.fallback": "0.10.1.0",
                "api.version.request": true,
                "enable.auto.commit": false,
                "auto.commit.interval.ms": 200
              },
              "topicConf": {
                "auto.offset.reset": "earliest"
              }
            }
          }
        }
       },
       "PRODUCER": {
         "TRANSFER": {
           "PREPARE": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-transfer-prepare",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           },
           "FULFIL": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-transfer-fulfil",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           },
           "REJECT": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-transfer-reject",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           },
           "GET": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-transfer-get",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           }
         },
         "POSITION": {
           "PREPARE": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-position-prepare",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           },
           "FULFIL": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-position-fulfil",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           },
           "ABORT": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-position-abort",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           }
         },
         "NOTIFICATION": {
           "EVENT": {
             "config": {
               "options": {
                 "messageCharset": "utf8"
               },
               "rdkafkaConf": {
                 "debug": "all",
                 "metadata.broker.list": "$kafka_host:$kafka_port",
                 "client.id": "cl-prod-notification-event",
                 "event_cb": true,
                 "compression.codec": "none",
                 "retry.backoff.ms": 100,
                 "message.send.max.retries": 2,
                 "socket.keepalive.enable": true,
                 "queue.buffering.max.messages": 10000000,
                 "batch.num.messages": 100,
                 "dr_cb": true,
                 "socket.blocking.max.ms": 1,
                 "queue.buffering.max.ms": 1,
                 "broker.version.fallback": "0.10.1.0",
                 "api.version.request": true
               }
             }
           }
         },
        "ADMIN": {
          "TRANSFER": {
            "config": {
              "options": {
                "messageCharset": "utf8"
              },
              "rdkafkaConf": {
                "debug": "all",
                "metadata.broker.list": "$kafka_host:$kafka_port",
                "client.id": "admin-transfer-produce",
                "event_cb": true,
                "compression.codec": "none",
                "retry.backoff.ms": 100,
                "message.send.max.retries": 2,
                "socket.keepalive.enable": true,
                "queue.buffering.max.messages": 10000000,
                "batch.num.messages": 100,
                "dr_cb": true,
                "socket.blocking.max.ms": 1,
                "queue.buffering.max.ms": 1,
                "broker.version.fallback": "0.10.1.0",
                "api.version.request": true
              }
            }
          }
        }
       }
     }
   }

  # default_json config for nodejs db knex lib. The following variables will be injected by the helm chart (see config.yaml): $db_driver
  knexfile_js: |
    'use strict'

    const migrationsDirectory = '/opt/central-ledger/migrations'
    const seedsDirectory = '/opt/central-ledger/seeds'

    const Config = require('/opt/central-ledger/src/lib/config')

    module.exports = {
      client: 'mysql',
      connection: Config.DATABASE_URI,
      migrations: {
        directory: migrationsDirectory,
        tableName: 'migration',
        stub: `${migrationsDirectory}/migration.template`
      },
      seeds: {
        directory: seedsDirectory,
        loadExtensions: ['.js']
      }
    }

init:
  enabled: true
  kafka:
    name: wait-for-kafka
    repository: solsson/kafka
    tag: latest
    pullPolicy: Always
    command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
    env: {}
    ## Env example
    # env:
    #   envItem1:
    #     name: hello
    #     value: world
    #
  psql:
    name: wait-for-postgres
    repository: bowerswilkins/awaitpostgres
    tag: latest
    pullPolicy: Always

service:
  type: ClusterIP

  annotations: {}

  # This allows one to point the service to an external backend.
  # This is useful for local development where one wishes to hijack
  # the communication from the service to the node layer and point
  # to a specific endpoint (IP, Port, etc).
  external:
    enabled: false
    # 10.0.2.2 is the magic IP for the host on virtualbox's network
    ip: 10.0.2.2
    ports:
      api:
        name: http-api
        externalPort: 3000
      admin:
        name: http-api-admin
        externalPort: 3001

ingress:
  enabled: true
  type: http
  externalPath:
    api: /
    admin: /admin
  # Used to create an Ingress record.
  hosts:
    api: central-ledger-transfer-prepare.local
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: '/'
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
