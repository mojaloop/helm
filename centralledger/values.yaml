# Default values for central-ledger.
# This is a YAML-formatted file.

# Declare global configurations
global: {}

# Declare variables to be passed into your templates.

centralledger-service:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/api/index.js"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: true

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

  init:
    enabled: true
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database   -e 'select version()' ; do echo waiting for MySQL; sleep 2; done;"
    migration:
      enabled: true
      name: run-migration
      command: npm run migrate
      config:
        run_data_migration: true

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

centralledger-handler-transfer-prepare:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/handlers/index.js", "handler", "--prepare"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: true

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

    ## Enable On-Us transfers
    enable_on_us_transfers: false

  init:
    enabled: true
    kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: 2.8.1
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
      ## Env example
      # env:
      #   envItem1:
      #     name: hello
      #     value: world
      #
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger-transfer-prepare.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

centralledger-handler-transfer-position:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/handlers/index.js", "handler", "--position"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: true

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

  init:
    enabled: true
    kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: 2.8.1
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
      ## Env example
      # env:
      #   envItem1:
      #     name: hello
      #     value: world
      #
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger-transfer-position.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

centralledger-handler-transfer-get:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/handlers/index.js", "handler", "--get"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: false

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

  init:
    enabled: true
    kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: 2.8.1
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
      ## Env example
      # env:
      #   envItem1:
      #     name: hello
      #     value: world
      #
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger-transfer-get.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

centralledger-handler-transfer-fulfil:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/handlers/index.js", "handler", "--fulfil"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: true

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

  init:
    enabled: true
    kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: 2.8.1
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
      ## Env example
      # env:
      #   envItem1:
      #     name: hello
      #     value: world
      #
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger-transfer-position.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

centralledger-handler-timeout:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/handlers/index.js", "handler", "--timeout"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: false

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Timeout Configuration
    timeout:
      expiration: '*/15 * * * * *'
      timezone: UTC

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

  init:
    enabled: true
    kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: 2.8.1
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
      ## Env example
      # env:
      #   envItem1:
      #     name: hello
      #     value: world
      #
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger-timeout.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

centralledger-handler-admin-transfer:
  # Default values for central-ledger.
  # This is a YAML-formatted file.

  # Declare variables to be passed into your templates.
  enabled: true
  replicaCount: 1
  containers:
    api:
      image:
        repository: mojaloop/central-ledger
        tag: v16.3.1
        pullPolicy: IfNotPresent
        command: '["node", "src/handlers/index.js", "handler", "--admin"]'
      service:
        ports:
          api:
            name: http-api
            externalPort: 80
            internalPort: 3001
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 60
        periodSeconds: 15

  ## Pod scheduling preferences.
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  ## Set toleration for scheduler
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v12.0.0
      pullPolicy: IfNotPresent
    readinessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      log_level: info

  ## metric configuration for prometheus instrumentation
  metrics:
    ## flag to enable/disable the metrics end-points
    enabled: false

  config:
    ## Forensic Logging sidecar
    # this is for Forensic Logging Sidecar
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678

    ## Error handling Configuration
    error_handling:
      include_cause_extension: false
      truncate_extensions: true

    ## DB Configuration
    # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
    db_type: 'mysql'
    # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
    db_driver: 'mysql'
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ml_password
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false

    ## Kafka Configuration
    # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
    kafka_host: kafka
    kafka_port: 9092

    ## Log Configuration
    log_level: info
    log_transport: file

  init:
    enabled: true
    kafka:
      name: wait-for-kafka
      repository: solsson/kafka
      tag: 2.8.1
      pullPolicy: IfNotPresent
      command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
      env: {}
      ## Env example
      # env:
      #   envItem1:
      #     name: hello
      #     value: world
      #
    psql:
      name: wait-for-postgres
      repository: bowerswilkins/awaitpostgres
      tag: latest
      pullPolicy: IfNotPresent
    mysql:
      name: wait-for-mysql
      repository: mysql
      tag: 8.0.30
      pullPolicy: IfNotPresent
      command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"

  service:
    type: ClusterIP

    annotations: {}

    # This allows one to point the service to an external backend.
    # This is useful for local development where one wishes to hijack
    # the communication from the service to the node layer and point
    # to a specific endpoint (IP, Port, etc).
    external:
      enabled: false
      # 10.0.2.2 is the magic IP for the host on virtualbox's network
      ip: 10.0.2.2
      ports:
        api:
          name: http-api
          externalPort: 3001

  ingress:
    enabled: true
    ## @param ingress.pathType Ingress path type
    ##
    pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
    apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
    hostname: central-ledger-admin-transfer.local
    ## @param servicePort : port for the service
    ##
    servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
    path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
    annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
    tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
    certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
    selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
    extraHosts:
    extraPaths:
    extraTls:
    secrets:
    className: "nginx"
  ##
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

#forensicloggingsidecar:
#  enabled: true
#  nameOverride: "forensicloggingsidecar-ledger"
#  replicaCount: 1
#  image:
#    repository: mojaloop/forensic-logging-sidecar
#    tag: v2.4
#    pullPolicy: IfNotPresent
#
#  service:
#    name: http-api-and-ws
#    type: ClusterIP
#    externalPort: 5678
#    internalPort: 5678
#
#    annotations: {}
#
#    # This allows one to point the service to an external backend.
#    # This is useful for local development where one wishes to hijack
#    # the communication from the service to the node layer and point
#    # to a specific endpoint (IP, Port, etc).
#    external:
#      enabled: false
#      # 10.0.2.2 is the magic IP for the host on virtualbox's network
#      ip: 10.0.2.2
#      ports:
#        api:
#          name: http-api-and-ws
#          externalPort: 5678
#
#  readinessProbe:
#    enabled: true
#    initialDelaySeconds: 60
#    periodSeconds: 15
#
#  livenessProbe:
#    enabled: true
#    initialDelaySeconds: 60
#    periodSeconds: 15
#
#  ingress:
#    enabled: false
#    # Used to create an Ingress record.
#    hosts:
#      api: forensic-logging-sidecar.local
#
#    externalPath: /
#
#    annotations: {}
#      # kubernetes.io/ingress.class: nginx
#
#    tls: []
#  resources: {}
#    # We usually recommend not to specify default resources and to leave this as a conscious
#    # choice for the user. This also increases chances charts run on environments with little
#    # resources, such as Minikube. If you do want to specify resources, uncomment the following
#    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#    # limits:
#    #  cpu: 100m
#    #  memory: 128Mi
#    # requests:
#    #  cpu: 100m
#    #  memory: 128Mi
#
#  config: {}
#
#  centralkms:
#    enabled: true
#    nameOverride: "centralkms"
#    replicaCount: 1
#    image:
#      repository: mojaloop/central-kms
#      tag: v2.4
#      pullPolicy: IfNotPresent
#
#    service:
#      name: http-api-and-tcp-websocket
#      type: ClusterIP
#      externalPort: 8080
#      internalPort: 8080
#
#      annotations: {}
#
#      # This allows one to point the service to an external backend.
#      # This is useful for local development where one wishes to hijack
#      # the communication from the service to the node layer and point
#      # to a specific endpoint (IP, Port, etc).
#      external:
#        enabled: false
#        # 10.0.2.2 is the magic IP for the host on virtualbox's network
#        ip: 10.0.2.2
#        ports:
#          api:
#            name: http-api-and-tcp-websocket
#            externalPort: 8080
#
#    readinessProbe:
#      enabled: true
#      httpGet:
#        path: /sidecars
#      initialDelaySeconds: 30
#      periodSeconds: 5
#
#    livenessProbe:
#      enabled: true
#      httpGet:
#        path: /sidecars
#      initialDelaySeconds: 30
#      periodSeconds: 5
#
#    ingress:
#      enabled: true
#      # Used to create an Ingress record.
#      hosts:
#        - central-kms.local
#      externalPath: /
#
#      annotations: {}
#        # kubernetes.io/ingress.class: nginx
#
#      tls: []
#
#    resources: {}
#      # We usually recommend not to specify default resources and to leave this as a conscious
#      # choice for the user. This also increases chances charts run on environments with little
#      # resources, such as Minikube. If you do want to specify resources, uncomment the following
#      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#      # limits:
#      #  cpu: 100m
#      #  memory: 128Mi
#      # requests:
#      #  cpu: 100m
#      #  memory: 128Mi
#
#    postgresql:
#      enabled: true
#      nameOverride: "centralkms-postgresql"
       ## Create a database user
#      postgresUser: kms
       ## Default: random 10 character string
#      postgresPassword: xD873IyaQB
#
#      service:
#        type: ClusterIP
#        port: 5432
#        externalIPs: []
#
#  postgresql:
#    enabled: true
#    nameOverride: "forensicloggingsidecar-ledger-postgresql"
     ## Create a database user
#    postgresUser: sidecar
     ## Default: random 10 character string
#    postgresPassword: Wqt0KlkKvL
#
#    service:
#      type: ClusterIP
#      port: 5432
#      externalIPs: []
