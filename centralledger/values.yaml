global: {}
centralledger-service:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/api/index.js"]'
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/api/index.js
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-service
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    log_events_locally_enabled: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
  initContainers: |
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  migration:
    restartPolicy: OnFailure
    backoffLimit: 1
    annotations:
      helm.sh/hook: pre-install,pre-upgrade
centralledger-handler-transfer-prepare:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--prepare"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --prepare
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-prepare
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    enable_on_us_transfers: false
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-transfer-prepare.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  usePdb: false
centralledger-handler-transfer-position:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--position"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --position
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-position
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-transfer-position.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  usePdb: false
centralledger-handler-transfer-position-batch:
  enabled: false
  nameOverride: handler-pos-batch
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.0
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--positionbatch"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --positionbatch
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.0.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-position
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    batch_size: 100
    batch_consume_timeout_in_ms: 10
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-transfer-position.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  usePdb: false
centralledger-handler-transfer-get:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--get"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --get
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-get
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-transfer-get.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  usePdb: false
centralledger-handler-transfer-fulfil:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--fulfil"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --fulfil
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-fulfil
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-transfer-fulfil.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  usePdb: false
centralledger-handler-timeout:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--timeout"]'
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --timeout
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-timeout
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    timeout:
      expiration: "*/15 * * * * *"
      timezone: UTC
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    distLockConfig:
      enabled: false
      lockTimeout: 10000
      acquireTimeout: 5000
      driftFactor: 0.01
      retryCount: 3
      retryDelay: 200
      retryJitter: 100
      redisConfigs:
        - type: redis-cluster
          cluster:
            - host: proxy-cache-redis
              port: 6379
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-timeout.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
centralledger-handler-admin-transfer:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/central-ledger
    tag: v19.8.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--admin"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
      - src/handlers/index.js
      - handler
      - --admin
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: false
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: false
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: central-handler-admin-transfer
  config:
    forensicloggingsidecar_disabled: true
    forensicloggingsidecar_host: forensicloggingsidecar-ledger
    forensicloggingsidecar_port: 5678
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    hub_participant:
      id: 1
      name: Hub
    objstore_disabled: true
    mongo_host: cep-mongodb
    mongo_port: 27017
    mongo_user: mojaloop
    mongo_password: ""
    mongo_database: mlos
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    log_level: info
    log_filter: error, warn, info
    log_transport: console
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    cache_enabled: false
    cache_max_byte_size: 10000000
    cache_expires_in_ms: 1000
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: central-ledger-transfer-prepare.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
  usePdb: false
