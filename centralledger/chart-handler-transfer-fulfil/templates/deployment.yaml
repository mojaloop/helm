{{- $dbHost := ( .Values.config.db_host | replace "$release_name" .Release.Name ) -}}
{{- $kafkaHost := ( .Values.config.kafka_host | replace "$release_name" .Release.Name ) -}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}
  labels:
    app: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/port: "{{ .Values.containers.api.service.ports.api.internalPort }}"
        prometheus.io/scrape: "true"
      {{- end }}
    spec:
{{- if .Values.global.config.affinity }}
      affinity:
{{ toYaml .Values.global.config.affinity | indent 8 }}
{{- end }}
{{- if .Values.global.config.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.global.config.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.global.config.tolerations }}
      tolerations:
{{ toYaml .Values.global.config.tolerations | indent 8 }}
{{- end }}
      {{- if .Values.init.enabled }}
      initContainers:
        {{- if eq .Values.config.db_type "postgres"}}
        - name: {{ .Values.init.psql.name }}
          image: {{ .Values.init.psql.repository }}:{{ .Values.init.psql.tag }}
          imagePullPolicy: {{ .Values.init.psql.pullPolicy }}
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://{{ .Values.config.db_user }}:{{ .Values.config.db_password }}@{{ $dbHost }}:{{ .Values.config.db_port }}/{{ .Values.config.db_database }}?sslmode=disable"
        {{- end }}
        {{- if eq .Values.config.db_type "mysql"}}
        - name: {{ .Values.init.mysql.name }}
          image: {{ .Values.init.mysql.repository }}:{{ .Values.init.mysql.tag }}
          imagePullPolicy: {{ .Values.init.mysql.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.mysql.command | replace "$db_user" (print .Values.config.db_user) | replace "$db_password" (print .Values.config.db_password) | replace "$db_host" $dbHost | replace "$db_database" (print .Values.config.db_database) | replace "$db_port" (print .Values.config.db_port) )| quote }}
        {{- end }}
        - name: {{ .Values.init.kafka.name }}
          image: {{ .Values.init.kafka.repository }}:{{ .Values.init.kafka.tag }}
          imagePullPolicy: {{ .Values.init.kafka.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.kafka.command | replace "$kafka_host" $kafkaHost | replace "$kafka_port" (printf "%.0f" .Values.config.kafka_port) ) | quote }}
          env:
          {{- range $envItem := .Values.init.kafka.env }}
            - name: {{ $envItem.name }}
              value: {{ $envItem.value }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ template "centralledger-handler-transfer-fulfil.name" . }}
          image: "{{ .Values.containers.api.image.repository }}:{{ .Values.containers.api.image.tag }}"
          imagePullPolicy: {{ .Values.containers.api.image.pullPolicy }}
          command: {{ .Values.containers.api.image.command }}
          ports:
          {{- range $port := .Values.containers.api.service.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.internalPort }}
          {{- end }}
          {{- if .Values.containers.api.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.containers.api.readinessProbe.httpGet.path }}
              port: {{ .Values.containers.api.service.ports.api.internalPort }}
            initialDelaySeconds: {{ .Values.containers.api.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.containers.api.readinessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.containers.api.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.containers.api.livenessProbe.httpGet.path }}
              port: {{ .Values.containers.api.service.ports.api.internalPort }}
            initialDelaySeconds: {{ .Values.containers.api.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.containers.api.livenessProbe.periodSeconds }}
          {{- end }}
          env:
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}
                  key: db.uri
            - name: LOG_LEVEL
              value: {{ .Values.config.log_level }}
          volumeMounts:
          - name: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}-config-volume
          configMap:
            name: {{ template "centralledger-handler-transfer-fulfil.fullname" . }}
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
