# Default values for centralledger-handler-bulk-transfer-get.
# This is a YAML-formatted file.

# Declare global configurations
global: {}

# Declare variables to be passed into your templates.

replicaCount: 1
containers:
  api:
    image:
      repository: mojaloop/central-ledger
      tag: v16.3.1
      pullPolicy: IfNotPresent
      command: '["node", "src/handlers/index.js", "handler", "--bulkget"]'
    service:
      ports:
        api:
          name: http-api
          externalPort: 80
          internalPort: 3001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15

    ## Pod scheduling preferences.
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

    ## Node labels for pod assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
nodeSelector: {}

    ## Set toleration for scheduler
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

    ## metric configuration for prometheus instrumentation
metrics:
  ## flag to enable/disable the metrics end-points
  enabled: true
  config:
    timeout: 5000
    prefix: moja_
    defaultLabels:
      serviceName: central-handler-bulkget

config:
  ## Forensic Logging sidecar
  # this is for Forensic Logging Sidecar
  forensicloggingsidecar_disabled: true
  forensicloggingsidecar_host: forensicloggingsidecar-ledger
  forensicloggingsidecar_port: 5678

  error_handling:
    include_cause_extension: false
    truncate_extensions: true

  ## DB Configuration
  # db_type can either be 'postgres' or 'mysql'. Ensure the correct DB is enabled and configured below: postgresql.enabled or mysql.enabled
  db_type: 'mysql'
  # db_driver can either be 'pg' or 'mysql'. Ensure the correct corresponding db_type above has been set.
  db_driver: 'mysql'
  db_host: '$release_name-centralledger-mysql'
  db_port: 3306
  db_user: central_ledger
  db_password: oyMxgZChuu
  db_database: central_ledger
  db_connection_pool_min: 10
  db_connection_pool_max: 30
  db_acquire_timeout_millis: 30000
  db_create_timeout_millis: 30000
  db_destroy_timeout_millis: 5000
  db_idle_timeout_millis: 30000
  db_reap_interval_millis: 1000
  db_create_retry_interval_millis: 200
  db_debug: false

  ## Hub Configuration
  hub_participant:
    id: 1
    name: Hub

  ## MongoDB Configuration for Object Store
  objstore_disabled: false
  objstore_uri: 'mongodb://$release_name-centralledger-obj:27017/mlos'

  ## Kafka Configuration
  # this can be set if the dependency chart for kafka is disabled. If 'kafka_host' is commented out, then the name of the dependency chart will be used.
  kafka_host: '$release_name-kafka'
  kafka_port: 9092

  ## Node Configuration
  log_level: 'info'
  log_transport: file

  ## Cache configuration
  cache_max_byte_size: 10000000

init:
  enabled: true
  kafka:
    name: wait-for-kafka
    repository: solsson/kafka
    tag: 2.8.1
    pullPolicy: IfNotPresent
    command: "until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port; do echo waiting for Kafka; sleep 2; done;"
    env: {}
    ## Env example
    # env:
    #   envItem1:
    #     name: hello
    #     value: world
    #
  psql:
    name: wait-for-postgres
    repository: bowerswilkins/awaitpostgres
    tag: latest
    pullPolicy: IfNotPresent
  mysql:
    name: wait-for-mysql
    repository: mysql
    tag: 8.0.30
    pullPolicy: IfNotPresent
    command: "until result=$(mysql -h $db_host -P $db_port -u $db_user --password=$db_password  $db_database -ss -N -e 'select is_locked from migration_lock;') && eval 'echo is_locked=$result' && if [ -z $result ]; then false; fi && if [ $result -ne 0 ]; then false; fi; do echo waiting for MySQL; sleep 2; done;"
  mongodb:
    name: wait-for-mongodb
    repository: bitnami/mongodb
    tag: 6.0.1
    pullPolicy: IfNotPresent
    command: "mongosh $mongouri --eval \"db.adminCommand('ping')\""

service:
  type: ClusterIP

  annotations: {}

  # This allows one to point the service to an external backend.
  # This is useful for local development where one wishes to hijack
  # the communication from the service to the node layer and point
  # to a specific endpoint (IP, Port, etc).
  external:
    enabled: false
    # 10.0.2.2 is the magic IP for the host on virtualbox's network
    ip: 10.0.2.2
    ports:
      api:
        name: http-api
        externalPort: 3001

ingress:
  enabled: true
    ## @param ingress.pathType Ingress path type
    ##
  pathType: ImplementationSpecific
    ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)
    ##
  apiVersion:
    ## @param ingress.hostname Default host for the ingress record
    ##
  hostname: central-ledger-transfer-bulkget.local
    ## @param servicePort : port for the service
    ##
  servicePort: 80
    ## @param ingress.path Default path for the ingress record
    ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  path: /
    ## @param ingress.annotations Additional custom annotations for the ingress record
    ## NOTE: If `ingress.certManager=true`, annotation `kubernetes.io/tls-acme: "true"` will automatically be added
    ##
  annotations:
    ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
    ## You can:
    ##   - Use the `ingress.secrets` parameter to create this TLS secret
    ##   - Relay on cert-manager to create it by setting `ingress.certManager=true`
    ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
    ##
  tls: false
    ## @param ingress.certManager Add the corresponding annotations for cert-manager integration
    ##
  certManager: false
    ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
    ##
  selfSigned: false
    ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
    ## e.g:
    ## extraHosts:
    ##   - name: transfer-api-svc.local
    ##     path: /
    ##
  extraHosts:
  extraPaths:
  extraTls:
  secrets:
  className: "nginx"
  ##
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
