# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  slack: circleci/slack@4.12.5 # Ref: https://github.com/mojaloop/ci-config/tree/master/slack-templates
  pr-tools: mojaloop/pr-tools@0.1.10

##
# defaults
#
# yaml templates to be shared across jobs
##
defaults_Dependencies: &defaults_Dependencies
  name: Install default dependencies
  command: |
    apk --no-cache add --update git
    apk --no-cache add --update openssh-client
    apk --no-cache add --update bash
    apk --no-cache add --update ca-certificates
    apk --no-cache add --update curl
    apk add --no-cache --update -t python2
    apk add --no-cache --update -t build-dependencies make gcc g++ libtool autoconf automake

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up
    echo 'export mode=docker' >> $BASH_ENV
    dockerImages=`cd /home/circleci/project && ./.circleci/format-docker-images.sh`
    echo "dockerImages are $dockerImages"
    echo "export dockerImages=\"${dockerImages}\"" >> $BASH_ENV

defaults_Environment: &defaults_environment
  name: Set default environment
  command: |
    echo "Adding repos necessary for publishing process"
    helm repo add stable https://charts.helm.sh/stable
    helm repo add incubator https://charts.helm.sh/incubator
    helm repo add kiwigrid https://kiwigrid.github.io
    helm repo add kokuwa https://kokuwaio.github.io/helm-charts
    helm repo add elastic https://helm.elastic.co
    helm repo add codecentric https://codecentric.github.io/helm-charts
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo add mojaloop-charts https://mojaloop.github.io/charts/repo 
    helm repo add redpanda https://charts.redpanda.com
    helm repo update

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker-helm:
    working_directory: &WORKING_DIR /home/circleci/project
    docker:
      - image: alpine/helm:3.12.1

  default-machine:
    working_directory: *WORKING_DIR
    machine:
      image: ubuntu-2004:current

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker-helm
    steps:
      - run:
          <<: *defaults_Dependencies
      - checkout
      - run:
          name: Placeholder for setup
          command: echo "Placeholder for setup - Nothing to do here"

  test:
    executor: default-docker-helm
    steps:
      - run:
          <<: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_environment
      - run:
          name: Update Helm Charts
          command: |
            bash update-charts-dep.sh
      - run:
          name: Linting Helm Charts
          command: |
            bash lint-charts.sh

  audit-licenses:
    executor: default-machine
    steps:
      - checkout
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Set up nvm
          command: |
            # Note: this needs to be separate from the nvm install step
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - run:
          name: Set up correct node version
          command: |
            nvm install v10.15.3 && nvm alias default v10.15.3
            node --version
      - run:
          name: Run the license-scanner
          command: |
            source $BASH_ENV
            env | grep docker
            cd /tmp/license-scanner && make run
      - run:
          name: Build and save license-scanner summary
          command: |
            node --version
            cd /tmp/license-scanner && make postprocess
      - run:
          name: If this is a release, upload the license-scanner file to the github release
          command: |
            if [ "${CIRCLE_TAG}" = "" ]; then
              exit 0
            fi
            mv /tmp/license-scanner/results/license-summary.xlsx ./license-summary-${CIRCLE_TAG}.xlsx
            .circleci/upload-github-release-asset.sh github_api_token=$GITHUB_TOKEN owner=mojaloop repo=helm tag=${CIRCLE_TAG} filename=license-summary-${CIRCLE_TAG}.xlsx
      - store_artifacts:
          path: /tmp/license-scanner/results
          destination: licenses

  deploy:
    executor: default-docker-helm
    environment:
      GIT_PROJECT_URL: << pipeline.project.git_url >>
      GIT_BRANCH: << pipeline.git.branch >>
    steps:
      - run:
          <<: *defaults_Dependencies
      - checkout
      - run:
          <<: *defaults_environment
      - run:
          name: setup environment vars
          command: |
            echo 'export GITHUB_TARGET_BRANCH=$HELM_TARGET_BRANCH' >> $BASH_ENV
            echo 'export GITHUB_TOKEN=$GITHUB_TOKEN' >> $BASH_ENV
            echo 'export GITHUB_PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME' >> $BASH_ENV
            echo 'export GITHUB_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
            echo 'export GITHUB_TAG=$CIRCLE_TAG' >> $BASH_ENV
            echo 'export GIT_CI_USER=$GIT_CI_USER' >> $BASH_ENV
            echo 'export GIT_CI_EMAIL=$GIT_CI_EMAIL' >> $BASH_ENV
            echo 'export GIT_SHA1=$CIRCLE_SHA1' >> $BASH_ENV
            echo 'export BUILD_NUM=$CIRCLE_BUILD_NUM' >> $BASH_ENV
            if [ ! -z ${CIRCLE_TAG} ]; then
              echo "CIRCLE_TAG=${CIRCLE_TAG} exists setting env configs for Helm Release"
              echo "export GIT_RELEASE_URL=${GIT_PROJECT_URL}/releases/tag/${CIRCLE_TAG}" >> $BASH_ENV
              echo "export GIT_RELEASE_TAG=${CIRCLE_TAG}" >> $BASH_ENV
              echo "export GIT_RELEASE_TYPE='Helm Release'" >> $BASH_ENV
            elif [[ "$CIRCLE_TAG" == *-snapshot* ]]; then
              echo "CIRCLE_TAG=${CIRCLE_TAG} exists setting env configs for Helm Snapshot"
              echo "export GIT_RELEASE_URL=${GIT_PROJECT_URL}/releases/tag/${CIRCLE_TAG}" >> $BASH_ENV
              echo "export GIT_RELEASE_TAG='${CIRCLE_TAG}@${CIRCLE_SHA1:0:7}'" >> $BASH_ENV
              echo "export GIT_RELEASE_TYPE='Helm Snapshot'" >> $BASH_ENV
            else
              echo "CIRCLE_SHA1=${CIRCLE_SHA1} exists setting env configs for Helm Snapshot"
              echo "export GIT_RELEASE_URL=${GIT_PROJECT_URL}/commit/${CIRCLE_SHA1}" >> $BASH_ENV
              echo "export GIT_RELEASE_TAG='${GIT_BRANCH}@${CIRCLE_SHA1:0:7}'" >> $BASH_ENV
              echo "export GIT_RELEASE_TYPE='Helm Snapshot'" >> $BASH_ENV
            fi
            source $BASH_ENV
            echo "-== The following Release Config will be applied ==-"
            echo "GIT_RELEASE_URL=$GIT_RELEASE_URL"
            echo "GIT_RELEASE_TAG=$GIT_RELEASE_TAG"
            echo "GIT_RELEASE_TYPE=$GIT_RELEASE_TYPE"
      - run:
          name: Setup Slack config
          command: |
            echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
            echo "export SLACK_RELEASE_TYPE='${GIT_RELEASE_TYPE}'" >> $BASH_ENV
            echo "export SLACK_RELEASE_TAG=${GIT_RELEASE_TAG}" >> $BASH_ENV
            echo "export SLACK_RELEASE_URL=${GIT_RELEASE_URL}" >> $BASH_ENV
            echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
      - run:
          name: Setup Git Identity
          command: |
            echo "Setting BASH_ENV..."
            source $BASH_ENV
            git config --global user.email "$GIT_CI_USER"
            git config --global user.name "$GIT_CI_EMAIL"
      - run:
          name: Publish Helm Charts
          command: .circleci/publish_helm_charts.sh
      - slack/notify:
          event: pass
          template: SLACK_TEMP_RELEASE_SUCCESS
      - slack/notify:
          event: fail
          template: SLACK_TEMP_RELEASE_FAILURE

workflows:
  build_and_test:
    jobs:
      - pr-tools/pr-title-check:
          context: org-global
          filters:
            tags:
              ignore: /.*/
            branches:
              ignore:
                - master
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
      - test:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
      - deploy:
          context: org-global
          requires:
            - test
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot+((\.[0-9]+)?))?/
            branches:
              only: master
