account-lookup-service:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/account-lookup-service
    tag: v17.12.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/index.js", "server", "--api"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/index.js
      - server
      - --api
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  nameOverride: ""
  fullnameOverride: ""
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: account-lookup-service
  config:
    api_type: fspiop
    hub_participant:
      id: 1
      name: Hub
    central_services_host: $release_name-centralledger-service
    central_services_port: 80
    log_level: info
    log_transport: console
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    central_shared_end_point_cache:
      expiresIn: 180000
      generateTimeout: 30000
      getDecoratedValue: true
    central_shared_participant_cache:
      expiresIn: 61000
      generateTimeout: 30000
      getDecoratedValue: true
    general_cache:
      enabled: false
      maxByteSize: 10000000
      expiresIn: 61000
    protocol_versions:
      CONTENT:
        DEFAULT: "2.0"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
      ACCEPT:
        DEFAULT: "2"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: account_lookup
    db_password: ""
    db_database: account_lookup
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    display_routes: true
    run_migrations: false
    endpointSecurity:
      jwsSign: false
      jwsSigningKeySecret: null
      jwsSigningKey: null
    featureEnableExtendedPartyIdType: false
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    handlers:
      DISABLED: true
      MONITORING_PORT: 4003
      TIMEOUT:
        DISABLED: true
        TIMEXP: "*/30 * * * * *"
        TIMEZONE: UTC
        BATCH_SIZE: 100
  initContainers: |
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 4002
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: account-lookup-service.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
account-lookup-service-admin:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/account-lookup-service
    tag: v17.12.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/index.js", "server", "--admin"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/index.js
      - server
      - --admin
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  nameOverride: ""
  fullnameOverride: ""
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4003
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: account-lookup-service-admin
  config:
    hub_participant:
      id: 1
      name: Hub
    central_services_host: $release_name-centralledger-service
    central_services_port: 80
    log_level: info
    log_transport: console
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    protocol_versions:
      CONTENT:
        DEFAULT: "2.0"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
      ACCEPT:
        DEFAULT: "2"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    central_shared_end_point_cache:
      expiresIn: 180000
      generateTimeout: 30000
      getDecoratedValue: true
    central_shared_participant_cache:
      expiresIn: 61000
      generateTimeout: 30000
      getDecoratedValue: true
    general_cache:
      enabled: false
      maxByteSize: 10000000
      expiresIn: 61000
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: account_lookup
    db_password: ""
    db_database: account_lookup
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    display_routes: true
    run_migrations: false
    endpointSecurity:
      jwsSign: false
      jwsSigningKeySecret: null
      jwsSigningKey: null
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    featureEnableExtendedPartyIdType: false
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    handlers:
      DISABLED: true
      MONITORING_PORT: 4003
      TIMEOUT:
        DISABLED: true
        TIMEXP: "*/30 * * * * *"
        TIMEZONE: UTC
        BATCH_SIZE: 100
  initContainers: |
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
    - name: run-migration
      image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - npm run migrate
      env:
        - name: ALS_MIGRATIONS__RUN_DATA_MIGRATIONS
          value: 'true'
        - name: ALS_DATABASE__PASSWORD
          {{- if .Values.config.db_secret }}
          valueFrom:
              secretKeyRef:
                name: '{{ .Values.config.db_secret.name }}'
                key: '{{ .Values.config.db_secret.key }}'
          {{- else }}
          value: {{ .Values.config.db_password }}
          {{- end }}
        {{- if .Values.config.db_ssl_enabled }}
        - name: ALS_DATABASE__ADDITIONAL_CONNECTION_OPTIONS__ssl__rejectUnauthorized
          value: {{ .Values.config.db_ssl_verify | quote}}
        {{- if .Values.config.db_ssl_ca_secret }}
        - name: ALS_DATABASE__ADDITIONAL_CONNECTION_OPTIONS__ssl__ca
          valueFrom:
            secretKeyRef:
              name: '{{ .Values.config.db_ssl_ca_secret.name }}'
              key: '{{ .Values.config.db_ssl_ca_secret.key }}'
        {{- end }}
        {{- end }}
      volumeMounts:
        - name: '{{ template "account-lookup-service-admin.fullname" . }}-config-volume'
          mountPath: /opt/app/config
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 4001
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: account-lookup-service-admin.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
account-lookup-service-handler-timeout:
  enabled: false
  image:
    registry: docker.io
    repository: mojaloop/account-lookup-service
    tag: v17.12.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handlers", "--timeout"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/handlers/index.js
      - handlers
      - --timeout
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  nameOverride: ""
  fullnameOverride: ""
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: account-lookup-service-handler-timeout
  config:
    api_type: fspiop
    hub_participant:
      id: 1
      name: Hub
    central_services_host: $release_name-centralledger-service
    central_services_port: 80
    log_level: info
    log_transport: console
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    central_shared_end_point_cache:
      expiresIn: 180000
      generateTimeout: 30000
      getDecoratedValue: true
    central_shared_participant_cache:
      expiresIn: 61000
      generateTimeout: 30000
      getDecoratedValue: true
    general_cache:
      enabled: false
      maxByteSize: 10000000
      expiresIn: 61000
    protocol_versions:
      CONTENT:
        DEFAULT: "2.0"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
      ACCEPT:
        DEFAULT: "2"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: account_lookup
    db_password: ""
    db_database: account_lookup
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    display_routes: true
    run_migrations: false
    endpointSecurity:
      jwsSign: false
      jwsSigningKeySecret: null
      jwsSigningKey: null
    featureEnableExtendedPartyIdType: false
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    handlers:
      DISABLED: false
      MONITORING_PORT: 4003
      TIMEOUT:
        DISABLED: false
        TIMEXP: "*/30 * * * * *"
        TIMEZONE: UTC
        BATCH_SIZE: 100
  initContainers: []
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 4003
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: account-lookup-service-handler-timeout.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
als-oracle-pathfinder:
  enabled: false
  image:
    repository: mojaloop/als-oracle-pathfinder
    tag: v12.3.1
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "/opt/app/src/index.js"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - /opt/app/src/index.js
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /
    initialDelaySeconds: 45
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /
    initialDelaySeconds: 45
    periodSeconds: 15
  config:
    db:
      type: mysql
      driver: mysql
      central_ledger:
        host: $release_name-centralledger-mysql
        port: "3306"
        database: central_ledger
        user: central_ledger
        password: ""
      account_lookup:
        host: $release_name-account-lookup-mysql
        port: "3306"
        database: account_lookup
        user: account_lookup
        password: ""
    log_level: info
    pathfinder:
      host: localhost
      port: 7007
      queryTimeoutMs: 10000
      tls:
        certs:
          client_cert: |-
            -----BEGIN CERTIFICATE-----
            MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
            UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
            CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
            DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
            NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
            b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
            DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
            9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
            E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
            UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
            G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
            IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
            Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
            SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
            bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
            EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
            Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
            gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
            eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
            -----END CERTIFICATE-----
          client_key: |-
            -----BEGIN PRIVATE KEY-----
            MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDgxTiKmKzu+uGw
            mXoB3SEgX+cQaNM8b/oqWIYTV5oBXE5z8+DDjeq4qO3zjoCrB31igynY0DHvjG9n
            g6dszBKmMNAZFBsxjseK5uxSIkyquy3pLkBCo8cmhoSuSdWNGi/Q3IBSOJrcdOG2
            SqtFPnbFOdMZjBzj3O34EqgbiK6u/jSF85N7hvuDcDrgJU0Rl7u36o9sAh7D0xTV
            fc4PcPSHMpnwyy2p5sttI9Uh+WfNT7wByDiasy9J1/o4695RRt/uvhCZ8L0B6s1W
            Jr8ZwC9sb8ZT5YQ6cl+n7xcC/6B9LRozalRt2tcuL83Fae/DpuHx76mNsFyWLyuh
            aauhFsU/AgMBAAECggEAWgPhvu+h4hsrI1Rznid2ysZdfR7d6chWgXruRvTAQmc7
            LAixLN+67rUIho+9S8E2H6uzqJbISM0PGH+LH3Eiztehn0mEEnbBxwjv/3ypA37u
            xgG1znpUmUMqA7qiAV5JY/XKliMBMeTFOAHzUUnQuu+LcSHBuCeUTdL66/vzKTT4
            oCKwB1vcnzfL5NS/7ownAgLsjNj3pgORRAY9sTDzUkjwrrN/m5nEfghycAcyXHDJ
            lQprc0xX4TI/Vd9ZkG+khAznkRaXiPJ1P1TwadgK5m53Imt2H3F0lmrhNCrul/l7
            F0Uf2tfNHHgSjyoGQkPryuqyf2NcMiUY1d4uCsnWEQKBgQDziD3gBkjguQZUc3Yb
            DqiCtaLkavndmRTPaAyUk95dUuiVEMhnDm8L7T+03PhVDjtXdy4PQUm61xr/Kw4J
            1VUArbIjzcs+OEGNvq99stThRBvszwNRSWS4kYIur3+ggddrewtL7s+hiAqeK88L
            n6vG4/eSKWJBQwF1001siKf7/QKBgQDsRxXGZkf+yVsuL/hSiadwRdD/OJ1O7gr2
            j8za6izaUX1anXLdPrvtOkdCgEC0Iy6hY0FMi0GWzklpY4SvZuxXlK6QkKB3SCE9
            E8RuOSFLouuaxgiau8MnAEUTkInTC+9foOa8znuOGC0JmzztlFf7P7CF8PoNTb4n
            x4a9dQSE6wKBgAjPfgWT1KEksIDvqG80KY6JCbqf0ChfOGyEhCf/7YSM0lNKRyXL
            VOMmky507BsPp7/zVNxCbWtwCs7+fMSITkn2/sHi2R6IJH7/ThQLGz6HG0eG+cTA
            Ff/Da+VKfiCNcgC2c+MsYaCjblbomNX/0dQhPTyxeJeJ2AyuN1fc3c71AoGBAIA2
            tsc5e3nz9AmlOEA5uGWBTT8hjqNlIwfW0pg8mOhDbh188PbD8yBxDng0tmfJ66Ti
            Am4x5v6ZpFaPDVJNLJT99pg2Ew2HU5ocHuydDcdIekc7jTHCD80bJWDPfyrKADRJ
            UMxF0+AwmEftOGvHotKRJg4YzOfpNvXJHQGz/SbPAoGAALJa010eqPHuZKQxpW4z
            4dpt1Fr16cbLnmIk16zxnvPbPJeCtEx8IkwgLIWP6zPOESIGBTslGMq6xIgYaOXZ
            G8S+fLF3J9sfE2gCJR1JSBXdlyWmcKJdyvhRt168hxVW1N4uHJ2KBA3vUhC/kRvh
            3XDCWsEkXqU0KRzt+TkWVOQ=
            -----END PRIVATE KEY-----
          pathfinder_cert: |-
            -----BEGIN CERTIFICATE-----
            MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
            UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
            CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
            DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
            NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
            b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
            DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
            9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
            E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
            UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
            G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
            IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
            Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
            SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
            bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
            EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
            Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
            gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
            eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
            -----END CERTIFICATE-----
          pathfinder_intermediate_cert: |-
            -----BEGIN CERTIFICATE-----
            MIIDejCCAmICCQClh6JWji+/NjANBgkqhkiG9w0BAQsFADB/MQswCQYDVQQGEwJV
            UzEQMA4GA1UECAwHQWxhYmFtYTETMBEGA1UEBwwKTW9udGdvbWVyeTENMAsGA1UE
            CgwEVGVzdDENMAsGA1UECwwEVGVzdDENMAsGA1UEAwwEVGVzdDEcMBoGCSqGSIb3
            DQEJARYNdGVzdEB0ZXN0LmNvbTAeFw0xOTEwMjkxNTMwNTFaFw0yOTEwMjYxNTMw
            NTFaMH8xCzAJBgNVBAYTAlVTMRAwDgYDVQQIDAdBbGFiYW1hMRMwEQYDVQQHDApN
            b250Z29tZXJ5MQ0wCwYDVQQKDARUZXN0MQ0wCwYDVQQLDARUZXN0MQ0wCwYDVQQD
            DARUZXN0MRwwGgYJKoZIhvcNAQkBFg10ZXN0QHRlc3QuY29tMIIBIjANBgkqhkiG
            9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4MU4ipis7vrhsJl6Ad0hIF/nEGjTPG/6KliG
            E1eaAVxOc/Pgw43quKjt846Aqwd9YoMp2NAx74xvZ4OnbMwSpjDQGRQbMY7Hiubs
            UiJMqrst6S5AQqPHJoaErknVjRov0NyAUjia3HThtkqrRT52xTnTGYwc49zt+BKo
            G4iurv40hfOTe4b7g3A64CVNEZe7t+qPbAIew9MU1X3OD3D0hzKZ8MstqebLbSPV
            IflnzU+8Acg4mrMvSdf6OOveUUbf7r4QmfC9AerNVia/GcAvbG/GU+WEOnJfp+8X
            Av+gfS0aM2pUbdrXLi/NxWnvw6bh8e+pjbBcli8roWmroRbFPwIDAQABMA0GCSqG
            SIb3DQEBCwUAA4IBAQApH4oz7CWXzor91aU7bcdD5Ec/Z5QNDKXVrBcF5r+g83yz
            bBphZrvDq+wOVigQ/JfmuAzRtK05WIpvxd22kvsKrDoViG9B+x+wDQm0tP0vY1Cp
            EChdJLE1tAktRL49r8pzpOaUU7NrhYLP1tWrDDsCC3fPUwZzx9quem0xSYmC0BpT
            Ug+hxw3uH7bsGhQkQnGrAoEwrsyq8M3lbw0pIUvq2S7t8lpHZvM5Ldkp5DM7SlJg
            gBabAqScAeoqssFv4bsWINawn/7JvmFEb4kwep6pIf9Lh/rkCgsgyq2xEh/9LXNs
            eCgyt9zbdU2HwsWnoOUEJ0Z4157ykgOkECCGErKl
            -----END CERTIFICATE-----
        rejectUnauthorized: false
        client_cert_path: /opt/app/secrets/client_cert.pem
        client_key_path: /opt/app/secrets/client_key.pem
        root_cert_path: /opt/app/secrets/pathfinder_cert.pem
        intermediate_cert_path: /opt/app/secrets/pathfinder_intermediate_cert.pem
  initContainers: |
    - name: wait-for-mysql-central-ledger
      image: mysql:9.0.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          until mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD}  ${DB_DATABASE} -e 'select version()' ;
          do
            echo --------------------;
            echo Waiting for MySQL...;
            sleep 2;
          done;
          echo ====================;
          echo MySQL ok!;
      env:
        - name: DB_HOST
          value: '{{ .Values.config.db.central_ledger.host }}'
        - name: DB_PORT
          value: '{{ .Values.config.db.central_ledger.port }}'
        - name: DB_USER
          value: '{{ .Values.config.db.central_ledger.user }}'
        - name: DB_PASSWORD
          {{- if .Values.config.db.central_ledger.secret }}
          valueFrom:
              secretKeyRef:
                name: '{{ .Values.config.db.central_ledger.secret.name }}'
                key: '{{ .Values.config.db.central_ledger.secret.key }}'
          {{- else }}
          value: {{ .Values.config.db.central_ledger.password }}
          {{- end }}
        - name: DB_DATABASE
          value: '{{ .Values.config.db.central_ledger.database }}'
    - name: init-mysql-central-ledger
      image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          echo Running MySQL init scripts;
          mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD} ${DB_DATABASE} -e "SET @service_name='${SERVICE_NAME}'; source /opt/app/init-central-ledger.sql;";
          echo ====================;
          echo MySQL ok!;
      env:
        - name: DB_HOST
          value: '{{ .Values.config.db.central_ledger.host }}'
        - name: DB_PORT
          value: '{{ .Values.config.db.central_ledger.port }}'
        - name: DB_USER
          value: '{{ .Values.config.db.central_ledger.user }}'
        - name: DB_PASSWORD
          {{- if .Values.config.db.central_ledger.secret }}
          valueFrom:
              secretKeyRef:
                name: '{{ .Values.config.db.central_ledger.secret.name }}'
                key: '{{ .Values.config.db.central_ledger.secret.key }}'
          {{- else }}
          value: {{ .Values.config.db.central_ledger.password }}
          {{- end }}
        - name: DB_DATABASE
          value: '{{ .Values.config.db.central_ledger.database }}'
        - name: SERVICE_NAME
          value: '{{ include "als-oracle-pathfinder.name" . }}'
    - name: wait-for-mysql-account-lookup
      image: mysql:9.0.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          until mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD}  ${DB_DATABASE} -e 'select version()' ;
          do
            echo --------------------;
            echo Waiting for MySQL...;
            sleep 2;
          done;
          echo ====================;
          echo MySQL ok!;
      env:
        - name: DB_HOST
          value: '{{ .Values.config.db.account_lookup.host }}'
        - name: DB_PORT
          value: '{{ .Values.config.db.account_lookup.port }}'
        - name: DB_USER
          value: '{{ .Values.config.db.account_lookup.user }}'
        - name: DB_PASSWORD
          {{- if .Values.config.db.account_lookup.secret }}
          valueFrom:
              secretKeyRef:
                name: '{{ .Values.config.db.account_lookup.secret.name }}'
                key: '{{ .Values.config.db.account_lookup.secret.key }}'
          {{- else }}
          value: {{ .Values.config.db.account_lookup.password }}
          {{- end }}
        - name: DB_DATABASE
          value: '{{ .Values.config.db.account_lookup.database }}'
    - name: init-mysql-account-lookup
      image: '{{ .Values.image.repository }}:{{ .Values.image.tag }}'
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          echo Running MySQL init scripts;
          mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} --password=${DB_PASSWORD} ${DB_DATABASE} -e "SET @service_name='${SERVICE_NAME}'; source /opt/app/init-account-lookup.sql;";
          echo ====================;
          echo MySQL ok!;
      env:
        - name: DB_HOST
          value: '{{ .Values.config.db.account_lookup.host }}'
        - name: DB_PORT
          value: '{{ .Values.config.db.account_lookup.port }}'
        - name: DB_USER
          value: '{{ .Values.config.db.account_lookup.user }}'
        - name: DB_PASSWORD
          {{- if .Values.config.db.account_lookup.secret }}
          valueFrom:
              secretKeyRef:
                name: '{{ .Values.config.db.account_lookup.secret.name }}'
                key: '{{ .Values.config.db.account_lookup.secret.key }}'
          {{- else }}
          value: {{ .Values.config.db.account_lookup.password }}
          {{- end }}
        - name: DB_DATABASE
          value: '{{ .Values.config.db.account_lookup.database }}'
        - name: SERVICE_NAME
          value: '{{ include "als-oracle-pathfinder.name" . }}'
  service:
    type: ClusterIP
    name: http-api
    port: 80
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        provisioning:
          name: http-api
          externalPort: 3000
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: als-oracle-pathfinder.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
