{{- $kafkaHost := ( .Values.config.kafka_host | replace "$release_name" .Release.Name ) -}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "ml-api-adapter-handler-notification.fullname" . }}
  labels:
    app: {{ template "ml-api-adapter-handler-notification.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}

spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "ml-api-adapter-handler-notification.fullname" . }}
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/port: "{{ .Values.service.internalPort }}"
        prometheus.io/scrape: "true"
      {{- end }}
    spec:
      {{- if .Values.init.enabled }}
      initContainers:
        - name: {{ .Values.init.image.name }}
          image: {{ .Values.init.image.repository }}:{{ .Values.init.image.tag }}
          imagePullPolicy: {{ .Values.init.image.pullPolicy }}
          command:
            - sh
            - "-c"
            - {{ (.Values.init.image.command | replace "$kafka_host" $kafkaHost | replace "$kafka_port" (printf "%.0f" .Values.config.kafka_port) ) | quote }}
          env:
          {{- range $envItem := .Values.init.image.env }}
            - name: {{ $envItem.name }}
              value: {{ $envItem.value }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.image.imagePullSecrets }}
          imagePullSecrets:
          {{ toYaml .Values.image.imagePullSecrets | indent 10 }}
          {{- end }}
          command: {{ .Values.image.command }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.service.internalPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          {{- end }}
          volumeMounts:
            - name: {{ template "ml-api-adapter-handler-notification.fullname" . }}-config-volume
              mountPath: /opt/ml-api-adapter/config
          env:
            - name: LOG_LEVEL
              value: {{ .Values.config.log_level }}
      volumes:
        - name: {{ template "ml-api-adapter-handler-notification.fullname" . }}-config-volume
          configMap:
            name: {{ template "ml-api-adapter-handler-notification.fullname" . }}
            items:
            - key: default.json
              path: default.json
