# Default values for example mojaloop backend.
# This is a YAML-formatted file.
# Declare global configurations
global: {}

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/kafka/values.yaml
kafka:

  ## @param fullnameOverride String to fully override  template
  ##
  fullnameOverride: "mlkafka"
  enabled: true

  ## @param affinity Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}

  ## @section Persistence parameters
  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable Kafka data persistence using PVC, note that ZooKeeper persistence is unaffected
    ##
    enabled: false

  ## ZooKeeper chart configuration
  ## https://github.com/bitnami/charts/blob/main/bitnami/zookeeper/values.yaml
  ##
  zookeeper:
    ## ZooKeeper Persistence parameters
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ## @param zookeeper.persistence.enabled Enable persistence on ZooKeeper using PVC(s)
    ## @param zookeeper.persistence.storageClass Persistent Volume storage class
    ## @param zookeeper.persistence.accessModes Persistent Volume access modes
    ## @param zookeeper.persistence.size Persistent Volume size
    ##
    persistence:
      enabled: false

    ## @param affinity Affinity for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}

    ## @param nodeSelector Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    # nodeSelector: {}
    
    ## Example
    # nodeSelector:
    #     "node-role.mojaloop.io": kafka

    ## @param tolerations Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    # tolerations: []
    
    ## Example
    # tolerations:
    #   - key: "node-role.mojaloop.io"
    #     operator: "Equal"
    #     value: kafka
    #     effect: "NoSchedule"


## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mysql/values.yaml
mysql:
  enabled: true

  ## @param fullnameOverride String to fully override template
  ##
  fullnameOverride: "mysqldb"
  ## @param fullnameOverride String to fully override common.names.fullname template
  ##
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## @param auth.createDatabase Wheter to create the .Values.auth.database or not
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    createDatabase: true
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    database: mldb
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
    ##
    username: "mluser"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: 'HY#Mz%_z'
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mysql-root
    ##   user: /vault/secrets/mysql-user
    ##   replicator: /vault/secrets/mysql-replicator
    ##
    customPasswordFiles: {}
  ## @param initdbScripts Dictionary of initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  initdbScripts:
    # This script enables legacy authentication for MySQL v8. NodeJS MySQL Client currently does not support authentication plugins, reference: https://github.com/mysqljs/mysql/pull/2233
    accountLookupInit.sql: |-
      DROP DATABASE IF EXISTS account_lookup;
      CREATE DATABASE account_lookup;
      DROP USER IF EXISTS account_lookup@'%';
      CREATE USER 'account_lookup'@'%' IDENTIFIED WITH mysql_native_password BY 'HY#Mz%_z';
      GRANT ALL PRIVILEGES ON account_lookup.* TO 'account_lookup'@'%';
      FLUSH PRIVILEGES;
    centralLedgerInit.sql: |-
      DROP DATABASE IF EXISTS central_ledger;
      CREATE DATABASE central_ledger;
      DROP USER IF EXISTS central_ledger@'%';
      CREATE USER 'central_ledger'@'%' IDENTIFIED WITH mysql_native_password BY 'HY#Mz%_z';
      GRANT ALL PRIVILEGES ON central_ledger.* TO 'central_ledger'@'%';
      FLUSH PRIVILEGES;  

  ## @section MySQL Primary parameters   
  primary:
    persistence:
      enabled: false

    ## @param secondary.affinity Affinity for MySQL secondary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}

  secondary:
    persistence:
      enabled: false

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
centralledger-obj:
  enabled: true

  ## @param affinity Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}

  ## MongoDB(&reg;) Authentication parameters
  ##
  auth:
    ## @param auth.enabled Enable authentication
    ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
    ##
    enabled: true
    ## @param auth.rootUser MongoDB(&reg;) root user
    ##
    rootUser: root
    ## @param auth.rootPassword MongoDB(&reg;) root password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#setting-the-root-user-and-password-on-first-run
    ##
    rootPassword: "adminpass"
    ## MongoDB(&reg;) custom users and databases
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#creating-a-user-and-database-on-first-run
    ## @param auth.usernames List of custom users to be created during the initialization
    ## @param auth.passwords List of passwords for the custom users set at `auth.usernames`
    ## @param auth.databases List of custom databases to be created during the initialization
    ##
    usernames:
      -   'mojaloop'
    passwords:
      -   'password'
    databases:
      -   'mlos'
    ## @param auth.username DEPRECATED: use `auth.usernames` instead
    ## @param auth.password DEPRECATED: use `auth.passwords` instead
    ## @param auth.database DEPRECATED: use `auth.databases` instead
    username: ""
    password: ""
    database: ""
    ## @param auth.replicaSetKey Key used for authentication in the replicaset (only when `architecture=replicaset`)
    ##
    replicaSetKey: ""
    ## @param auth.existingSecret Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, ` mongodb-replica-set-key`)
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    existingSecret: ""
  ## @section Persistence parameters
  ##

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
    ##
    enabled: false

## TODO: Add 
cep-mongodb:
  enabled: true

  ## @param nameOverride String to partially override mongodb.fullname template (will maintain the release name)
  ##
  nameOverride: cep-mongodb


  ## @param affinity Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}

  ## @param nodeSelector Node labels for pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  # nodeSelector: {}
  
  ## Example
  # nodeSelector:
  #   "node-role.mojaloop.io": cep


  ## @param tolerations Tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  # tolerations: []
  
  ## Example
  # tolerations:
  #   - key: "node-role.mojaloop.io"
  #     operator: "Equal"
  #     value: cep
  #     effect: "NoSchedule"

  ## MongoDB(&reg;) Authentication parameters
  ##
  auth:
    ## @param auth.enabled Enable authentication
    ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
    ##
    enabled: true
    ## @param auth.rootUser MongoDB(&reg;) root user
    ##
    rootUser: root
    ## @param auth.rootPassword MongoDB(&reg;) root password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#setting-the-root-user-and-password-on-first-run
    ##
    rootPassword: "adminpass"
    ## MongoDB(&reg;) custom users and databases
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#creating-a-user-and-database-on-first-run
    ## @param auth.usernames List of custom users to be created during the initialization
    ## @param auth.passwords List of passwords for the custom users set at `auth.usernames`
    ## @param auth.databases List of custom databases to be created during the initialization
    ##
    usernames:
      - 'mojaloop'
    passwords:
      - 'password'
    databases:
      - 'mlos'
    ## @param auth.username DEPRECATED: use `auth.usernames` instead
    ## @param auth.password DEPRECATED: use `auth.passwords` instead
    ## @param auth.database DEPRECATED: use `auth.databases` instead
    username: ""
    password: ""
    database: ""
    ## @param auth.replicaSetKey Key used for authentication in the replicaset (only when `architecture=replicaset`)
    ##
    replicaSetKey: ""
    ## @param auth.existingSecret Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, ` mongodb-replica-set-key`)
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    existingSecret: ""
  ## @section Persistence parameters
  ##

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
    ##
    enabled: false

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
ttksims-redis:
  enabled: true

  ## @param architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone

  ## Redis&reg; Authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: false

  ## @section Persistence parameters
  ##
  master:
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
      ##
      enabled: false

    ## @param affinity Affinity for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}

    ## @param nodeSelector Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    # nodeSelector: {}
    
    ## Example
    # nodeSelector:
    #     "node-role.mojaloop.io": redis

    ## @param tolerations Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    # tolerations: []

    ## Example
    # tolerations:
    #   - key: "node-role.mojaloop.io"
    #     operator: "Equal"
    #     value: redis
    #     effect: "NoSchedule"

  replica:
    enabled: false
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
      ##
      enabled: false

## Reference: https://github.com/redpanda-data/console/blob/master/helm/console/values.yaml
kafka-console:
  enabled: true

  console:
  # Config.yaml is required for Console
  # See reference config: https://github.com/redpanda-data/console/blob/master/docs/config/console.yaml)
    config:
      kafka:
        brokers:
          - backend-kafka-headless:9092

  # SecretMounts is an abstraction to make a secret available in the container's filesystem.
  # Under the hood it creates a volume + volume mount for the Console container.
  secretMounts: []
  #  - name: kafka-certs
  #    secretName: kafka-certs
  #    path: /etc/console/certs
  #    defaultMode: 0755

  # Secret can be used to create a new Kubernetes secret for all sensitive config inputs.
  # Each provided secret will be mounted automatically and thus made available to the Console
  # pod.
  # If you want to use one or more existing secrets you can use "extraEnvFrom" to mount env
  # variables from string and secretMounts to mount files such as certificates from secrets.
  secret:
    create: true

    # Secret values in case you want the chart to create a secret. All certificates will be mounted
    # as a file and the path to that file will be configured via environment variables as well, so
    # that Console will automatically pick them up.
    # Kafka secrets
    kafka: {}
      # saslPassword:
      # awsMskIamSecretKey:
      # tlsCa:
      # tlsCert:
      # tlsKey:
      # tlsPassphrase:
      # schemaRegistryPassword:
      # schemaRegistryTlsCa:
      # schemaRegistryTlsCert:
      # schemaRegistryTlsKey:
      # protobufGitBasicAuthPassword

    # Enterprise version secrets
    # SSO secrets (enterprise version)
    login:
      google: {}
        # clientSecret:
        # groupsServiceAccount:
      github: {}
        # clientSecret:
        # personalAccessToken:
      okta: {}
        # clientSecret:
        # directoryApiToken:
      oidc: {}
        # clientSecret:

    enterprise: {}
      # license:

    redpanda:
      adminApi: {}
        # password:
        # tlsCa:
        # tlsCert:
        # tlsKey:

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: kafka-console.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - kafka-console.local
