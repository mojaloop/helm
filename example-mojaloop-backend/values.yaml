# Default values for example mojaloop backend.
# This is a YAML-formatted file.
# Declare global configurations
global: {}

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/kafka/values.yaml
kafka:
  enabled: true
  ## @param fullnameOverride String to fully override  template
  ##
  fullnameOverride: "kafka"

  ## @section Persistence parameters
  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable Kafka data persistence using PVC, note that ZooKeeper persistence is unaffected
    ##
    enabled: false

  ## ZooKeeper chart configuration
  ## https://github.com/bitnami/charts/blob/main/bitnami/zookeeper/values.yaml
  ##
  zookeeper:
    ## ZooKeeper Persistence parameters
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ## @param zookeeper.persistence.enabled Enable persistence on ZooKeeper using PVC(s)
    ## @param zookeeper.persistence.storageClass Persistent Volume storage class
    ## @param zookeeper.persistence.accessModes Persistent Volume access modes
    ## @param zookeeper.persistence.size Persistent Volume size
    ##
    persistence:
      enabled: false

    ## @param fullnameOverride String to fully override  template
    ##
    fullnameOverride: "zookeeper"

  ## Kafka provisioning
  ##
  provisioning:
    ## @param provisioning.enabled Enable kafka provisioning Job
    ##
    enabled: true

    ## @param provisioning.numPartitions Default number of partitions for topics when unspecified
    ##
    numPartitions: 1

    ## @param provisioning.replicationFactor Default replication factor for topics when unspecified
    ##
    replicationFactor: 1

    ## @param provisioning.topics Kafka topics to provision
    ## - name: topic-name
    ##   partitions: 1
    ##   replicationFactor: 1
    ##   ## https://kafka.apache.org/documentation/#topicconfigs
    ##   config:
    ##     max.message.bytes: 64000
    ##     flush.messages: 1
    ##
    # topics: []
    topics:
      ## Mojaloop Topics
      - name: topic-transfer-prepare
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-position
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-position-batch
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-fulfil
        partitions: 1
        replicationFactor: 1
      - name: topic-notification-event
        partitions: 1
        replicationFactor: 1
      - name: topic-transfer-get
        partitions: 1
        replicationFactor: 1
      - name: topic-admin-transfer
        partitions: 1
        replicationFactor: 1

    ## @param provisioning.nodeSelector Node labels for pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}

    ## @param provisioning.tolerations Tolerations for pod assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []

    ## @param provisioning.extraProvisioningCommands Extra commands to run to provision cluster resources
    ## - echo "Allow user to consume from any topic"
    ## - >-
    ##   /opt/bitnami/kafka/bin/kafka-acls.sh
    ##   --bootstrap-server $KAFKA_SERVICE
    ##   --command-config $CLIENT_CONF
    ##   --add
    ##   --allow-principal User:user
    ##   --consumer --topic '*'
    ## - "/opt/bitnami/kafka/bin/kafka-acls.sh
    ##      --bootstrap-server $KAFKA_SERVICE
    ##      --command-config $CLIENT_CONF
    ##      --list"
    ##
    # extraProvisioningCommands: []

    ## @param provisioning.waitForKafka If true use an init container to wait until kafka is ready before starting provisioning
    ##
    waitForKafka: true

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mysql/values.yaml
mysql:
  enabled: true

  ## @param fullnameOverride String to fully override template
  ##
  fullnameOverride: "mysqldb"
  ## @param fullnameOverride String to fully override common.names.fullname template
  ##
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: "db_password"
    ## @param auth.createDatabase Wheter to create the .Values.auth.database or not
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    createDatabase: true
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    database: mldb
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
    ##
    username: "mluser"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: 'ml_password'
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mysql-root
    ##   user: /vault/secrets/mysql-user
    ##   replicator: /vault/secrets/mysql-replicator
    ##
    customPasswordFiles: {}

  ## @section MySQL Primary parameters
  primary:
    persistence:
    ## @param primary.persistence.enabled Enable persistence on MySQL primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
    ##
      enabled: false

    ## @param primary.extraEnvVars Extra environment variables to be set on MySQL primary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    # extraEnvVars: []
    extraEnvVars:
      - name: ACCOUNT_LOOKUP_DATABASE
        value: "account_lookup"
      - name: ACCOUNT_LOOKUP_USER
        value: "account_lookup"
      - name: CENTRAL_LEDGER_DATABASE
        value: "central_ledger"
      - name: CENTRAL_LEDGER_USER
        value: "central_ledger"
      - name: CONTENT_ORACLE_DATABASE
        value: "consent_oracle"
      - name: CONTENT_ORACLE_USER
        value: "consent_oracle"
      - name: AUTH_SVC_DATABASE
        value: "auth_svc"
      - name: AUTH_SVC_USER
        value: "auth_svc"

  ## @param initdbScripts Dictionary of initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  initdbScripts:
    # This script enables legacy authentication for MySQL v8. NodeJS MySQL Client currently does not support authentication plugins, reference: https://github.com/mysqljs/mysql/pull/2233

    accountLookupInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$ACCOUNT_LOOKUP_DATABASE
      DB_USER=$ACCOUNT_LOOKUP_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    centralLedgerInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$CENTRAL_LEDGER_DATABASE
      DB_USER=$CENTRAL_LEDGER_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    consentOracleInit.sh: |
      #!/bin/bash
      set -e
      DB_NAME=$CONTENT_ORACLE_DATABASE
      DB_USER=$CONTENT_ORACLE_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

    authSvcInit.sh: |-
      #!/bin/bash
      set -e
      DB_NAME=$AUTH_SVC_DATABASE
      DB_USER=$AUTH_SVC_USER
      DB_PASS=$MYSQL_PASSWORD
      echo "******* Creating '$DB_NAME' DB with user '$DB_USER' *******"
      mysql -u root -p$MYSQL_ROOT_PASSWORD -e \
        "DROP DATABASE IF EXISTS $DB_NAME;
        CREATE DATABASE $DB_NAME;
        DROP USER IF EXISTS $DB_USER@'%';
        CREATE USER '$DB_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$DB_PASS';
        GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%';
        FLUSH PRIVILEGES;"
      echo "******* Database '$DB_NAME' config complete *******"

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
cl-mongodb:
  enabled: true

  ## @param fullnameOverride String to fully override mongodb.fullname template
  ##
  fullnameOverride: "cl-mongodb"
  ## MongoDB(&reg;) Authentication parameters
  ##
  auth:
    ## @param auth.enabled Enable authentication
    ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
    ##
    enabled: true
    ## @param auth.rootUser MongoDB(&reg;) root user
    ##
    rootUser: root
    ## @param auth.rootPassword MongoDB(&reg;) root password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#setting-the-root-user-and-password-on-first-run
    ##
    rootPassword: "adminpass"
    ## MongoDB(&reg;) custom users and databases
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#creating-a-user-and-database-on-first-run
    ## @param auth.usernames List of custom users to be created during the initialization
    ## @param auth.passwords List of passwords for the custom users set at `auth.usernames`
    ## @param auth.databases List of custom databases to be created during the initialization
    ##
    usernames:
      -   'mojaloop'
    passwords:
      -   'password'
    databases:
      -   'mlos'
    ## @param auth.username DEPRECATED: use `auth.usernames` instead
    ## @param auth.password DEPRECATED: use `auth.passwords` instead
    ## @param auth.database DEPRECATED: use `auth.databases` instead
    username: ""
    password: ""
    database: ""
    ## @param auth.replicaSetKey Key used for authentication in the replicaset (only when `architecture=replicaset`)
    ##
    replicaSetKey: ""
    ## @param auth.existingSecret Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, ` mongodb-replica-set-key`)
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    existingSecret: ""
  ## @section Persistence parameters
  ##

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
    ##
    enabled: false

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
cep-mongodb:
  enabled: false

  ## @param fullnameOverride String to fully override mongodb.fullname template (will maintain the release name)
  ##
  fullnameOverride: cep-mongodb

  ## @param affinity Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}

  ## MongoDB(&reg;) Authentication parameters
  ##
  auth:
    ## @param auth.enabled Enable authentication
    ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
    ##
    enabled: true
    ## @param auth.rootUser MongoDB(&reg;) root user
    ##
    rootUser: root
    ## @param auth.rootPassword MongoDB(&reg;) root password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#setting-the-root-user-and-password-on-first-run
    ##
    rootPassword: "adminpass"
    ## MongoDB(&reg;) custom users and databases
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#creating-a-user-and-database-on-first-run
    ## @param auth.usernames List of custom users to be created during the initialization
    ## @param auth.passwords List of passwords for the custom users set at `auth.usernames`
    ## @param auth.databases List of custom databases to be created during the initialization
    ##
    usernames:
      - 'mojaloop'
    passwords:
      - 'password'
    databases:
      - 'mlos'
    ## @param auth.replicaSetKey Key used for authentication in the replicaset (only when `architecture=replicaset`)
    ##
    replicaSetKey: ""
    ## @param auth.existingSecret Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, ` mongodb-replica-set-key`)
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    existingSecret: ""
  ## @section Persistence parameters
  ##

  # Enable persistence using Persistent Volume Claims
  # ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  #
  persistence:
    ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
    ##
    enabled: false

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/mongodb/values.yaml
ttk-mongodb:
  enabled: true

  ## @param fullnameOverride String to fully override mongodb.fullname template
  ##
  fullnameOverride: "ttk-mongodb"
  ## MongoDB(&reg;) Authentication parameters
  ##
  auth:
    ## @param auth.enabled Enable authentication
    ## ref: https://docs.mongodb.com/manual/tutorial/enable-authentication/
    ##
    enabled: true
    ## @param auth.rootUser MongoDB(&reg;) root user
    ##
    rootUser: root
    ## @param auth.rootPassword MongoDB(&reg;) root password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#setting-the-root-user-and-password-on-first-run
    ##
    rootPassword: "adminpass"
    ## MongoDB(&reg;) custom users and databases
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mongodb#creating-a-user-and-database-on-first-run
    ## @param auth.usernames List of custom users to be created during the initialization
    ## @param auth.passwords List of passwords for the custom users set at `auth.usernames`
    ## @param auth.databases List of custom databases to be created during the initialization
    ##
    usernames:
      - 'ttk'
    passwords:
      - 'ttk'
    databases:
      - 'ttk'

    ## @param auth.replicaSetKey Key used for authentication in the replicaset (only when `architecture=replicaset`)
    ##
    replicaSetKey: ""
    ## @param auth.existingSecret Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, ` mongodb-replica-set-key`)
    ## NOTE: When it's set the previous parameters are ignored.
    ##
    existingSecret: ""
  ## @section Persistence parameters
  ##

  ## Enable persistence using Persistent Volume Claims
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable MongoDB(&reg;) data persistence using PVC
    ##
    enabled: false

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
ttksims-redis:
  enabled: true

  ## @param architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone

  ## @param fullnameOverride String to fully override  template
  ##
  fullnameOverride: ttksims-redis 

  ## Redis&reg; Authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: false

  ## @section Persistence parameters
  ##
  master:
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis&reg; master nodes using Persistent Volume Claims
      ##
      enabled: false

## Reference: https://github.com/bitnami/charts/blob/main/bitnami/redis/values.yaml
auth-svc-redis:
  enabled: true

  ## @param architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: standalone

  ## @param fullnameOverride String to fully override  template
  ##
  fullnameOverride: auth-svc-redis 

  ## Redis&reg; Authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: false

  ## @section Persistence parameters
  ##
  master:
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis&reg; master nodes using Persistent Volume Claims
      ##
      enabled: false
