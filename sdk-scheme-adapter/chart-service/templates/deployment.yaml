apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Chart.Name }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Chart.Name }}
  template:
    metadata:
      annotations: 
        checksum/config: {{ .Values.env | toString | sha256sum }}
        checksum/secret-jws-signing-key: {{ .Values.config.jwsSigningKey | sha256sum }}
        checksum/secret-jws-verification-keys: {{ .Values.config.jwsVerificationKeys | toString | sha256sum }}
      {{- if .Values.podAnnotations }}
      {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
        prometheus.io/port: {{ include "common.tplvalues.render" (dict "value" .Values.metrics.config.port "context" $) | quote }}
        prometheus.io/scrape: "true"
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Chart.Name }}
        app.kubernetes.io/version: {{ .Chart.Version }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "sdk-scheme-adapter-svc.serviceAccountName" . }}
      {{- include "sdk-scheme-adapter-svc.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "component" "sdk-scheme-adapter-svc" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "component" "sdk-scheme-adapter-svc" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      volumes:
      {{- if .Values.env.JWS_SIGN }}
      - name: jws-private-key
        secret:
          secretName: {{ template "common.names.fullname" . }}-jws-priv-key
      {{- end }}
      {{- if .Values.env.VALIDATE_INBOUND_JWS }}
      - name: jws-public-keys
        secret:
          secretName: {{ template "common.names.fullname" . }}-jws-public-keys
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ template "sdk-scheme-adapter-svc.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          ports:
          {{- if (hasKey .Values.service "internalPort") }}
            - name: http
              containerPort: {{ .Values.service.internalPort }}
          {{- end }}
          {{- if (hasKey .Values.env "INBOUND_LISTEN_PORT") }}
            - name: inboundapi
              containerPort: {{ .Values.env.INBOUND_LISTEN_PORT }}
              protocol: TCP
          {{- end }}
          {{- if (hasKey .Values.env "OUTBOUND_LISTEN_PORT") }}
            - name: outboundapi
              containerPort: {{ .Values.env.OUTBOUND_LISTEN_PORT }}
              protocol: TCP
          {{- end }}
          {{- if (hasKey .Values.env "TEST_LISTEN_PORT") }}
            - name: testapi
              containerPort: {{ .Values.env.TEST_LISTEN_PORT }}
              protocol: TCP
          {{- end }}
          {{- if (hasKey .Values.env "WS_PORT") }}
            - name: websocket
              containerPort: {{ .Values.env.WS_PORT }}
              protocol: TCP
          {{- end }}
          {{- if (hasKey .Values.env "METRICS_SERVER_LISTEN_PORT") }}
            - name: metrics
              containerPort: {{ .Values.env.METRICS_SERVER_LISTEN_PORT }}
              protocol: TCP
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
            - name: debug
              containerPort: {{ .Values.diagnosticMode.debug.internalPort }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- include "common.tplvalues.render" (dict "value" .Values.readinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- include "common.tplvalues.render" (dict "value" .Values.livenessProbe "context" $) | nindent 12 }}
          {{- end }}
          env:
            {{- if not (hasKey .Values.env "BACKEND_ENDPOINT") }}
            - name: BACKEND_ENDPOINT
              value: {{ printf "%s-backend:3000" (include "common.names.fullname" . ) }}
            {{- end }}
            {{- range $k, $v := .Values.env }}
            {{- if (hasKey $.Values.env "OAUTH_CLIENT_SECRET_NAME") }}
            {{- if and (ne "OAUTH_CLIENT_SECRET_NAME" $k) (ne "OAUTH_CLIENT_SECRET_KEY" $k) (ne "OAUTH_CLIENT_SECRET" $k) }}
            - name: {{ $k }}
              value: {{ include "common.tplvalues.render" (dict "value" $v "context" $) | quote }}
            {{- else if eq "OAUTH_CLIENT_SECRET_NAME" $k}}
            - name: OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "common.tplvalues.render" (dict "value" $.Values.env.OAUTH_CLIENT_SECRET_NAME "context" $) | quote }}
                  key: {{ include "common.tplvalues.render" (dict "value" $.Values.env.OAUTH_CLIENT_SECRET_KEY "context" $) | quote }}
            {{- end }}
            {{- else }}
            - name: {{ $k }}
              value: {{ include "common.tplvalues.render" (dict "value" $v "context" $) | quote }}
            {{- end }}  
            {{- end }}
          volumeMounts:
          {{- if .Values.env.JWS_SIGN }}
          - name: jws-private-key
            mountPath: "/jwsSigningKey.key"
            subPath: private.key
          {{- end }}
          {{- if .Values.env.VALIDATE_INBOUND_JWS }}
          - name: jws-public-keys
            mountPath: "/jwsVerificationKeys/"
          {{- end }}
