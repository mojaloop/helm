global: {}
quoting-service:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/quoting-service
    tag: v17.12.1
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/index.js"]'
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/index.js
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: quoting-service-api
  config:
    api_type: fspiop
    original_payload_storage: ""
    payload_cache:
      enabled: false
      type: redis-cluster
      connectionConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    hub_participant:
      id: 1
      name: Hub
    protocol_versions:
      CONTENT:
        DEFAULT: "2.0"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
      ACCEPT:
        DEFAULT: "2"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    simple_routing_mode_enabled: true
    log_level: info
    log_transport: console
    kafka_host: kafka
    kafka_port: 9092
    kafka_partitioner: murmur2_random
    kafka_producer_quote_post_topic: topic-quotes-post
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    endpointSecurity:
      jwsSign: false
      jwsSigningKey: null
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    cache:
      enum_data_expires_in_ms: 4170000
      participant_data_expires_in_ms: 10
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
  rules: []
  initContainers: |
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
            echo --------------------;
            echo Waiting for Kafka...;
            sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3002
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  ingress:
    enabled: true
    pathType: ImplementationSpecific
    apiVersion: null
    hostname: quoting-service.local
    servicePort: 80
    path: /
    annotations: null
    tls: false
    certManager: false
    selfSigned: false
    extraHosts: null
    extraPaths: null
    extraTls: null
    secrets: null
    className: nginx
  resources: {}
quoting-service-handler:
  enabled: true
  image:
    registry: docker.io
    repository: mojaloop/quoting-service
    tag: v17.12.1
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  command: '["node", "src/handlers/index.js", "handler", "--quotes", "--bulk_quotes", "--fx_quotes"]'
  rollingUpdate:
    override: true
    maxUnavailable: 20%
    maxSurge: 20%
  diagnosticMode:
    enabled: false
    command:
      - node
      - src/handlers/index.js h --quotes --bulk_quotes --fx_quotes
    args:
      - --inspect=0.0.0.0:{{ .Values.diagnosticMode.debug.port }}
    debug:
      internalPort: 9229
      port: 9229
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  affinity: {}
  nodeSelector: {}
  tolerations: []
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    readOnlyRootFilesystem: true
  sidecar:
    enabled: true
    image:
      repository: mojaloop/event-sidecar
      tag: v14.2.0
      pullPolicy: IfNotPresent
      command: '["npm", "run", "start"]'
    service:
      internalPort: 4001
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    config:
      event_log_grpc_host: localhost
      event_log_grpc_port: 50051
      event_log_filter: audit:*, log:info, log:warn, log:error
      event_log_metadata_only: true
      log_level: info
      log_filter: error, warn, info
  metrics:
    enabled: true
    config:
      timeout: 5000
      prefix: moja_
      defaultLabels:
        serviceName: quoting-service-handler
  config:
    original_payload_storage: ""
    payload_cache:
      enabled: false
      type: redis-cluster
      connectionConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    hub_participant:
      id: 1
      name: Hub
    protocol_versions:
      CONTENT:
        DEFAULT: "2.0"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
      ACCEPT:
        DEFAULT: "2"
        VALIDATELIST:
          - "1"
          - "1.0"
          - "1.1"
          - "2"
          - "2.0"
    db_type: mysql
    db_driver: mysql2
    db_host: mysqldb
    db_port: 3306
    db_user: central_ledger
    db_password: ""
    db_database: central_ledger
    db_connection_pool_min: 10
    db_connection_pool_max: 30
    db_acquire_timeout_millis: 30000
    db_create_timeout_millis: 30000
    db_destroy_timeout_millis: 5000
    db_idle_timeout_millis: 30000
    db_reap_interval_millis: 1000
    db_create_retry_interval_millis: 200
    db_debug: false
    db_additional_connection_options: {}
    db_ssl_enabled: false
    db_ssl_verify: false
    simple_routing_mode_enabled: true
    log_level: info
    log_transport: console
    kafka_host: kafka
    kafka_port: 9092
    event_trace_vendor: mojaloop
    event_log_filter: audit:*, log:warn, log:error
    event_log_metadata_only: false
    event_async_override: log,trace
    event_trace_state_enabled: true
    event_traceid_per_vendor: false
    endpointSecurity:
      jwsSign: false
      jwsSigningKey: null
    error_handling:
      include_cause_extension: false
      truncate_extensions: true
    cache:
      enum_data_expires_in_ms: 4170000
      participant_data_expires_in_ms: 10
    proxy_cache:
      enabled: false
      type: redis-cluster
      proxyConfig:
        cluster:
          - host: proxy-cache-redis
            port: 6379
    uv_threadpool_size: 20
  rules: []
  initContainers: |
    {{- include "mojaloop-common.waitForMysqlInitContainer" . | nindent 0 }}
    - name: wait-for-kafka
      image: solsson/kafka:2.8.1
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - until ./bin/kafka-broker-api-versions.sh --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT};
          do
          echo --------------------;
          echo Waiting for Kafka...;
          sleep 2;
          done;
          echo ====================;
          echo Kafka ok!;
      env:
        - name: KAFKA_HOST
          value: '{{ .Values.config.kafka_host }}'
        - name: KAFKA_PORT
          value: '{{ .Values.config.kafka_port }}'
  podLabels: {}
  podAnnotations: {}
  service:
    internalPort: 3003
    type: ClusterIP
    port: 80
    clusterIP: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    sessionAffinity: None
    sessionAffinityConfig: {}
  resources: {}
  usePdb: false
