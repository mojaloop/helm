[debug] Created tunnel using local port: '32808'

[debug] SERVER: "127.0.0.1:32808"

[debug] Original chart version: ""
[debug] CHART PATH: /media/hirugade/382C9B122C9ACA70/MojaLoop/DEV/helm/mojaloop

NAME:   sh
REVISION: 1
RELEASED: Tue Dec 18 23:28:51 2018
CHART: mojaloop-4.3.0
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
central:
  centraldirectory:
    centralenduserregistry:
      config: {}
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: mojaloop/central-end-user-registry
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        externalPath: /
        hosts:
          api: central-end-user-registry.local
        tls: null
      init:
        enabled: true
      livenessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 45
        periodSeconds: 15
      nameOverride: centralenduserregistry
      postgresql:
        affinity: {}
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: postgres
        imageTag: 9.6.2
        metrics:
          enabled: false
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          imageTag: v0.1.1
          imagepullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
        nameOverride: centralenduserregistry-postgresql
        networkPolicy:
          allowExternal: true
          enabled: false
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          mountPath: /var/lib/postgresql/data/pgdata
          size: 8Gi
          subPath: postgresql-db
        postgresDatabase: central_end_user_registry
        postgresPassword: yGnTC07WQ6
        postgresUser: end_user_registry
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
        tolerations: []
      readinessProbe:
        enabled: true
        httpGet:
          path: /health
        initialDelaySeconds: 45
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            provisioning:
              externalPort: 3001
              name: http-api
        ports:
          api:
            externalPort: 3001
            internalPort: 3001
            name: http-api
        type: ClusterIP
    config:
      CDIR_ADMIN_KEY: admin
      CDIR_ADMIN_SECRET: admin
      CDIR_PATHFINDER__PROVISIONING__ADDRESS: http://$pathfinder_host:8080/nrs-pi/services/SIPIX/SendRequest
      CDIR_PATHFINDER__QUERY__ADDRESS: $pathfinder_host
      CDIR_PATHFINDER__QUERY__PORT: "15353"
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/central-directory
      tag: v2.4
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: central-directory.local
      tls: null
    init:
      enabled: true
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    mockpathfinder:
      config: {}
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: mojaloop/mock-pathfinder
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        hosts:
          api: mock-pathfinder.local
        tls: null
      nameOverride: mockpathfinder
      postgresql:
        affinity: {}
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: postgres
        imageTag: 9.6.2
        metrics:
          enabled: false
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          imageTag: v0.1.1
          imagepullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
        nameOverride: mockpathfinder-postgresql
        networkPolicy:
          allowExternal: true
          enabled: false
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          mountPath: /var/lib/postgresql/data/pgdata
          size: 8Gi
          subPath: postgresql-db
        postgresDatabase: mock_pathfinder
        postgresPassword: IypvXbJ1Zb
        postgresUser: mock-pathfinder
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
        tolerations: []
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            provisioning:
              externalPort: 8080
              name: tcp-prov
            query:
              externalPort: 15353
              name: tcp-query
        ports:
          provisioning:
            externalPort: 8080
            internalPort: 8080
            name: tcp-prov
            protocol: TCP
          tcp_query:
            externalPort: 15353
            internalPort: 15353
            name: tcp-query
            protocol: TCP
          udp_query:
            externalPort: 15353
            internalPort: 15353
            name: udp-query
            protocol: UDP
        type: ClusterIP
    postgresql:
      affinity: {}
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image: postgres
      imageTag: 9.6.2
      metrics:
        enabled: false
        image: wrouesnel/postgres_exporter
        imagePullPolicy: IfNotPresent
        imageTag: v0.1.1
        imagepullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
      nameOverride: centraldirectory-postgresql
      networkPolicy:
        allowExternal: true
        enabled: false
      nodeSelector: {}
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        mountPath: /var/lib/postgresql/data/pgdata
        size: 8Gi
        subPath: postgresql-db
      postgresDatabase: central_directory
      postgresPassword: gR5hARbsfa
      postgresUser: central-directory
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
      service:
        externalIPs: []
        port: 5432
        type: ClusterIP
      tolerations: []
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3000
            name: http-api
      ports:
        api:
          externalPort: 3000
          internalPort: 3000
          name: http-api
      type: ClusterIP
  centraleventprocessor:
    config:
      PORT: 3080
      central_ledger_admin_host: $release_name-centralledger-service
      central_ledger_admin_port: 3001
      central_ledger_api_host: centralledger-service
      central_ledger_api_port: 3000
      kafka_host: $release_name-kafka
      kafka_port: 9092
      mongo_database: mojaloop
      mongo_host: $release_name-mongodb
      mongo_password: password
      mongo_port: 27017
      mongo_user: mojaloop
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/central-event-processor
      tag: v4.3.0
    ingress:
      annotations: null
      enabled: true
      externalPath: /
      hosts:
        api: central-event-processor.local
      tls: null
    init:
      enabled: true
      kafka:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
      mongodb:
        command: mongo mongodb://$mongo_host:$mongo_port --eval "db.adminCommand('ping')"
        name: wait-for-mongodb
        pullPolicy: Always
        repository: bitnami/mongodb
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    mongodb:
      additionalLabels: {}
      affinity: {}
      clusterDomain: cluster.local
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/mongodb
        tag: 4.0.3
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      metrics:
        enabled: false
        image:
          pullPolicy: IfNotPresent
          registry: docker.io
          repository: forekshub/percona-mongodb-exporter
          tag: latest
        podAnnotations:
          prometheus.io/port: "9216"
          prometheus.io/scrape: "true"
        serviceMonitor:
          additionalLabels: {}
          alerting:
            additionalLabels: {}
            rules: {}
          enabled: false
      mongodbDatabase: mojaloop
      mongodbEnableIPv6: true
      mongodbExtraFlags: []
      mongodbPassword: password
      mongodbRootPassword: adminpass
      mongodbUsername: mojaloop
      nameOverride: mongodb
      nodeSelector: {}
      persistence:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: false
        size: 8Gi
      podAnnotations: {}
      podLabels: {}
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicaSet:
        enabled: false
        name: rs0
        pdb:
          minAvailable:
            arbiter: 1
            primary: 1
            secondary: 1
        replicas:
          arbiter: 1
          secondary: 1
        useHostnames: true
      resources: {}
      securityContext:
        enabled: true
        fsGroup: 1001
        runAsUser: 1001
      service:
        annotations: {}
        port: 27017
        type: ClusterIP
      tolerations: []
      usePassword: true
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 30
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3080
            name: central-event-processor
      externalPort: 3080
      internalPort: 3080
      name: central-event-processor
      type: ClusterIP
  centralledger:
    centralledger-handler-admin-transfer:
      config:
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--admin"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          api: central-ledger-admin-transfer.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    centralledger-handler-timeout:
      config:
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--timeout"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          api: central-ledger-timeout.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    centralledger-handler-transfer-fulfil:
      config:
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--fulfil"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          api: central-ledger-transfer-fulfil.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    centralledger-handler-transfer-get:
      config:
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--get"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          api: central-ledger-transfer-get.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    centralledger-handler-transfer-position:
      config:
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--position"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          api: central-ledger-transfer-position.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    centralledger-handler-transfer-prepare:
      config:
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        api:
          image:
            command: '["node", "src/handlers/index.js", "handler", "--prepare"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          api: central-ledger-transfer-prepare.local
        tls: null
        type: http
      init:
        enabled: true
        kafka:
          command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
            do echo waiting for Kafka; sleep 2; done;
          env: {}
          name: wait-for-kafka
          pullPolicy: Always
          repository: solsson/kafka
          tag: latest
        psql:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    centralledger-service:
      config:
        admin_key: admin
        admin_secret: admin
        db_database: central_ledger
        db_driver: mysql
        db_host: $release_name-centralledger-mysql
        db_password: oyMxgZChuu
        db_port: 3306
        db_type: mysql
        db_user: central_ledger
        forensicloggingsidecar_host: forensicloggingsidecar-ledger
        forensicloggingsidecar_port: 5678
        kafka_host: $release_name-kafka
        kafka_port: 9092
      containers:
        admin:
          image:
            command: '["node", "src/admin/index.js"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3001
                internalPort: 3001
                name: http-api-admin
        api:
          image:
            command: '["node", "src/api/index.js"]'
            pullPolicy: Always
            repository: mojaloop/central-ledger
            tag: v4.2.1
          livenessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 90
            periodSeconds: 15
          readinessProbe:
            enabled: true
            httpGet:
              path: /health
            initialDelaySeconds: 120
            periodSeconds: 15
          service:
            ports:
              api:
                externalPort: 3000
                internalPort: 3000
                name: http-api
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      ingress:
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /
        enabled: true
        externalPath:
          admin: /admin
          api: /
        hosts:
          admin: central-ledger.local
          api: central-ledger.local
        tls: null
        type: http
      init:
        enabled: true
        image:
          name: wait-for-postgres
          pullPolicy: Always
          repository: bowerswilkins/awaitpostgres
          tag: latest
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            admin:
              externalPort: 3001
              name: http-api-admin
            api:
              externalPort: 3000
              name: http-api
        type: ClusterIP
    enabled: true
    forensicloggingsidecar:
      centralkms:
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image:
          pullPolicy: Always
          repository: mojaloop/central-kms
          tag: v2.4
        ingress:
          annotations: null
          enabled: true
          externalPath: /
          hosts:
          - central-kms.local
          tls: null
        livenessProbe:
          enabled: true
          httpGet:
            path: /sidecars
          initialDelaySeconds: 30
          periodSeconds: 5
        nameOverride: centralkms
        postgresql:
          affinity: {}
          enabled: true
          global:
            config:
              affinity: {}
              nodeSelector: {}
              tolerations: []
          image: postgres
          imageTag: 9.6.2
          metrics:
            enabled: false
            image: wrouesnel/postgres_exporter
            imagePullPolicy: IfNotPresent
            imageTag: v0.1.1
            imagepullPolicy: Always
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
          nameOverride: centralkms-postgresql
          networkPolicy:
            allowExternal: true
            enabled: false
          nodeSelector: {}
          persistence:
            accessMode: ReadWriteOnce
            enabled: false
            mountPath: /var/lib/postgresql/data/pgdata
            size: 8Gi
            subPath: postgresql-db
          postgresDatabase: central_kms
          postgresPassword: xD873IyaQB
          postgresUser: kms
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
          service:
            externalIPs: []
            port: 5432
            type: ClusterIP
          tolerations: []
        readinessProbe:
          enabled: true
          httpGet:
            path: /sidecars
          initialDelaySeconds: 30
          periodSeconds: 5
        replicaCount: 1
        resources: {}
        service:
          annotations: {}
          external:
            enabled: false
            ip: 10.0.2.2
            ports:
              api:
                externalPort: 8080
                name: http-api-and-tcp-websocket
          externalPort: 8080
          internalPort: 8080
          name: http-api-and-tcp-websocket
          type: ClusterIP
      config: {}
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        command: '["/opt/sidecar/server.sh"]'
        pullPolicy: Always
        repository: mojaloop/forensic-logging-sidecar
        tag: v2.4
      ingress:
        annotations: null
        enabled: false
        externalPath: /
        hosts:
          api: forensic-logging-sidecar.local
        tls: null
      livenessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      nameOverride: forensicloggingsidecar-ledger
      postgresql:
        affinity: {}
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        image: postgres
        imageTag: 9.6.2
        metrics:
          enabled: false
          image: wrouesnel/postgres_exporter
          imagePullPolicy: IfNotPresent
          imageTag: v0.1.1
          imagepullPolicy: Always
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
        nameOverride: forensicloggingsidecar-ledger-postgresql
        networkPolicy:
          allowExternal: true
          enabled: false
        nodeSelector: {}
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          mountPath: /var/lib/postgresql/data/pgdata
          size: 8Gi
          subPath: postgresql-db
        postgresDatabase: sidecar
        postgresPassword: Wqt0KlkKvL
        postgresUser: sidecar
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        service:
          externalIPs: []
          port: 5432
          type: ClusterIP
        tolerations: []
      readinessProbe:
        enabled: true
        initialDelaySeconds: 90
        periodSeconds: 15
      replicaCount: 1
      resources: {}
      service:
        annotations: {}
        external:
          enabled: false
          ip: 10.0.2.2
          ports:
            api:
              externalPort: 5678
              name: http-api-and-ws
        externalPort: 5678
        internalPort: 5678
        name: http-api-and-ws
        type: ClusterIP
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    kafka:
      additionalPorts: {}
      affinity: {}
      configurationOverrides:
        offsets.topic.replication.factor: 1
      enabled: true
      external:
        domain: cluster.local
        enabled: false
        firstListenerPort: 31090
        init:
          image: lwolf/kubectl_deployer
          imagePullPolicy: IfNotPresent
          imageTag: "0.4"
        servicePort: 19092
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image: confluentinc/cp-kafka
      imagePullPolicy: IfNotPresent
      imageTag: 4.0.1-1
      jmx:
        configMap:
          enabled: true
          overrideConfig: {}
          overrideName: ""
        port: 5555
        whitelistObjectNames:
        - kafka.controller:*
        - kafka.server:*
        - java.lang:*
        - kafka.network:*
        - kafka.log:*
      kafkaHeapOptions: -Xmx1G -Xms1G
      logSubPath: logs
      nameOverride: kafka
      nodeSelector: {}
      persistence:
        enabled: false
        mountPath: /opt/kafka/data
        size: 1Gi
      podManagementPolicy: OrderedReady
      prometheus:
        jmx:
          enabled: false
          image: solsson/kafka-prometheus-jmx-exporter@sha256
          imageTag: a23062396cd5af1acdf76512632c20ea6be76885dfc20cd9ff40fb23846557e8
          interval: 10s
          port: 5556
          resources: {}
        kafka:
          enabled: false
          image: danielqsj/kafka-exporter
          imageTag: v1.0.1
          interval: 10s
          port: 9308
          resources: {}
        operator:
          enabled: false
          serviceMonitor:
            namespace: monitoring
            selector:
              prometheus: kube-prometheus
      rbac:
        enabled: true
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      replicas: 1
      resources: {}
      terminationGracePeriodSeconds: 60
      tolerations: []
      updateStrategy:
        type: OnDelete
      zookeeper:
        affinity: {}
        clientCnxns: 60
        clientPort: 2181
        enabled: true
        global:
          config:
            affinity: {}
            nodeSelector: {}
            tolerations: []
        heap: 1G
        imagePullPolicy: IfNotPresent
        initTicks: 10
        leaderElectionPort: 3888
        logLevel: INFO
        nodeSelector: {}
        persistence:
          enabled: false
          size: 5Gi
        port: 2181
        probeInitialDelaySeconds: 15
        probeTimeoutSeconds: 5
        purgeHours: 1
        replicaCount: 1
        resources:
          limits:
            cpu: 1
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
        security:
          enabled: false
          fsGroup: 1000
          runAsUser: 1000
        serverPort: 2888
        servers: 3
        snapRetain: 3
        syncTicks: 5
        tickTimeMs: 2000
        updateStrategy:
          type: OnDelete
        url: ""
    mysql:
      allowRootFrom: '%'
      configFiles:
        node.cnf: |
          [mysqld]
          datadir=/var/lib/mysql
          default_storage_engine=InnoDB
          binlog_format=ROW
          innodb_flush_log_at_trx_commit  = 0
          innodb_flush_method             = O_DIRECT
          innodb_file_per_table           = 1
          innodb_autoinc_lock_mode=2
          bind_address = 0.0.0.0
          wsrep_slave_threads=2
          wsrep_cluster_address=gcomm://
          wsrep_provider=/usr/lib/galera3/libgalera_smm.so
          wsrep_cluster_name=galera
          wsrep_sst_method=xtrabackup-v2
          pxc_strict_mode=DISABLED
      enabled: true
      global:
        config:
          affinity: {}
          nodeSelector: {}
          tolerations: []
      image:
        pullPolicy: Always
        repository: percona/percona-xtradb-cluster
        tag: 5.7.19
      logTail: true
      metricsExporter: false
      mysqlDatabase: central_ledger
      mysqlPassword: oyMxgZChuu
      mysqlUser: central_ledger
      nameOverride: centralledger-mysql
      nodeSelector: {}
      persistence:
        accessMode: ReadWriteOnce
        enabled: false
        size: 8Gi
      replicas: 1
      service:
        externalIPs: []
        port: 3306
        type: ClusterIP
    nameOverride: centralledger
  centralsettlement:
    config:
      db_database: central_ledger
      db_driver: mysql
      db_host: $release_name-centralledger-mysql
      db_password: oyMxgZChuu
      db_port: 3306
      db_type: mysql
      db_user: central_ledger
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      pullPolicy: Always
      repository: mojaloop/central-settlement
      tag: v4.2.0
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: central-settlement.local
      tls: null
    init:
      enabled: true
    livenessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    readinessProbe:
      enabled: false
      httpGet:
        path: /health
      initialDelaySeconds: 60
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      annotations: {}
      external:
        enabled: false
        ip: 10.0.2.2
        ports:
          api:
            externalPort: 3007
            name: http-api
      ports:
        api:
          externalPort: 3007
          internalPort: 3007
          name: http-api
      type: ClusterIP
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
emailnotifier:
  config:
    PORT: 3081
    email:
      ciphers: SSLv3
      host: smtp.gmail.com
      pass: pass
      port: 587
      user: user@gmail.com
    kafka_host: $release_name-kafka
    kafka_port: 9092
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
  image:
    pullPolicy: Always
    repository: mojaloop/email-notifier
    tag: v4.3.0
  ingress:
    annotations: null
    enabled: true
    externalPath: /
    hosts:
      api: email-notifier.local
    tls: null
  init:
    enabled: true
    kafka:
      command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
        do echo waiting for Kafka; sleep 2; done;
      env: {}
      name: wait-for-kafka
      pullPolicy: Always
      repository: solsson/kafka
      tag: latest
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 15
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3081
          internalPort: 3081
          name: email-notifier
    externalPort: 3081
    internalPort: 3081
    name: email-notifier
    type: ClusterIP
global:
  config:
    affinity: {}
    nodeSelector: {}
    tolerations: []
interop-switch:
  config:
    CENTRAL_DIR_HOST: centraldirectory
    CENTRAL_DIR_PORT: "3000"
    CONNECTOR_HOST: interop-connector
    MAX_JVM_MEMORY: "256"
    ML_API_ADAPTER_HOST: ml-api-adapter-service
    ML_API_ADAPTER_PORT: 8088
    PSQL_DATABASE: interop_switch
    PSQL_HOST: postgresql
    PSQL_PASSWORD: cVq8iFqaLuHy8jjKuA
    PSQL_PORT: "5432"
    PSQL_USER: interop_switch
    SWITCH_SERVICE_HOST: 0.0.0.0
    SWITCH_SERVICE_PORT: "8088"
  enabled: true
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
  image:
    pullPolicy: Always
    repository: mojaloop/interop-switch
    tag: v2.4
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /switch/v1
    enabled: true
    externalPath: /interop/switch/v1
    hosts:
      api: interop-switch.local
    tls: null
  init:
    enabled: true
    image:
      name: create-tables
      pullPolicy: Always
      repository: mojaloop/interop-switch-init-container
      tag: latest
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  postgresql:
    affinity: {}
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image: postgres
    imageTag: 9.6.2
    includeReleaseInName: true
    metrics:
      enabled: false
      image: wrouesnel/postgres_exporter
      imagePullPolicy: IfNotPresent
      imageTag: v0.1.1
      imagepullPolicy: Always
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
    nameOverride: interop-switch-postgresql
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      mountPath: /var/lib/postgresql/data/pgdata
      size: 8Gi
      subPath: postgresql-db
    postgresDatabase: interop_switch
    postgresPassword: cVq8iFqaLuHy8jjKuA
    postgresUser: interop_switch
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
    service:
      externalIPs: []
      port: 5432
      type: ClusterIP
    tolerations: []
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
    initialDelaySeconds: 60
    periodSeconds: 15
  replicaCount: 1
  resources: {}
  service:
    annotations: {}
    external:
      enabled: false
      ip: 10.0.2.2
      ports:
        api:
          externalPort: 3000
          name: http-api
    externalPort: 8088
    internalPort: 8088
    name: interop-switch
    ports:
      api:
        externalPort: 8088
        internalPort: 8088
        name: http-api
    type: ClusterIP
ml-api-adapter:
  global:
    config:
      affinity: {}
      nodeSelector: {}
      tolerations: []
  ml-api-adapter-handler-notification:
    config:
      central_services_host: centralledger-service
      central_services_port: 3001
      kafka_host: $release_name-kafka
      kafka_port: 9092
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      command: '["node", "src/handlers/index.js", "handler", "--notification"]'
      pullPolicy: Always
      repository: mojaloop/ml-api-adapter
      tag: v4.1.1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: ml-api-adapter-notification.local
      tls: null
    init:
      enabled: true
      image:
        command: until ./bin/kafka-broker-api-versions.sh --bootstrap-server $kafka_host:$kafka_port;
          do echo waiting for Kafka; sleep 2; done;
        env: {}
        name: wait-for-kafka
        pullPolicy: Always
        repository: solsson/kafka
        tag: latest
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      externalPort: 8088
      internalPort: 8088
      name: ml-api-adapter
      type: ClusterIP
  ml-api-adapter-service:
    config:
      central_services_host: centralledger-service
      central_services_port: 3001
      kafka_host: $release_name-kafka
      kafka_port: 9092
    enabled: true
    global:
      config:
        affinity: {}
        nodeSelector: {}
        tolerations: []
    image:
      command: '["node", "src/api/index.js"]'
      pullPolicy: Always
      repository: mojaloop/ml-api-adapter
      tag: v4.1.1
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
      enabled: true
      externalPath: /
      hosts:
        api: ml-api-adapter.local
      tls: null
    livenessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 90
      periodSeconds: 15
    readinessProbe:
      enabled: true
      httpGet:
        path: /health
      initialDelaySeconds: 120
      periodSeconds: 15
    replicaCount: 1
    resources: {}
    service:
      externalPort: 8088
      internalPort: 8088
      name: ml-api-adapter
      type: ClusterIP

HOOKS:
---
# sh-test-t185g
apiVersion: v1
kind: Pod
metadata:
  name: "sh-test-t185g"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: pxc-test
    image: "percona/percona-xtradb-cluster:5.7.19"
    imagePullPolicy: "Always"
    command: ["bash", "/tests/run.sh"]
    env:
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: sh-centralledger-mysql
          key: mysql-root-password
    volumeMounts:
    - mountPath: /tests
      name: tests
  volumes:
  - name: tests
    configMap:
      name: sh-centralledger-mysql-tests
  restartPolicy: Never
---
# sh-test-topic-create-consume-produce
apiVersion: v1
kind: Pod
metadata:
  name: "sh-test-topic-create-consume-produce"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: sh-test-consume
    image: confluentinc/cp-kafka:4.0.1-1
    command:
    - sh
    - -c
    - |
      # Create the topic
      kafka-topics --zookeeper sh-zookeeper:2181 --topic helm-test-topic-create-consume-produce --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list sh-kafka:9092 --topic helm-test-topic-create-consume-produce && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server sh-kafka-headless:9092 --topic helm-test-topic-create-consume-produce --from-beginning --timeout-ms 2000 --max-messages 1 | grep "$MESSAGE"
  restartPolicy: Never
MANIFEST:

---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: sh-zookeeper
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "sh"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      app: "zookeeper"
      release: "sh"
  minAvailable: 2
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralenduserregistry-postgresql
  labels:
    app: sh-centralenduserregistry-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "eUduVEMwN1dRNg=="
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralenduserregistry
  labels:
      app: sh-centralenduserregistry
      chart: centralenduserregistry-2.4.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9lbmRfdXNlcl9yZWdpc3RyeTp5R25UQzA3V1E2QHNoLWNlbnRyYWxlbmR1c2VycmVnaXN0cnktcG9zdGdyZXNxbDo1NDMyL2NlbnRyYWxfZW5kX3VzZXJfcmVnaXN0cnk=
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-mockpathfinder-postgresql
  labels:
    app: sh-mockpathfinder-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "SXlwdlhiSjFaYg=="
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-mockpathfinder
  labels:
    app: sh-mockpathfinder
    chart: mockpathfinder-2.4.0
    release: sh
    heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9tb2NrLXBhdGhmaW5kZXI6SXlwdlhiSjFaYkBzaC1tb2NrcGF0aGZpbmRlci1wb3N0Z3Jlc3FsOjU0MzIvbW9ja19wYXRoZmluZGVy
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centraldirectory-postgresql
  labels:
    app: sh-centraldirectory-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "Z1I1aEFSYnNmYQ=="
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centraldirectory
  labels:
      app: sh-centraldirectory
      chart: centraldirectory-3.4.2
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9jZW50cmFsLWRpcmVjdG9yeTpnUjVoQVJic2ZhQHNoLWNlbnRyYWxkaXJlY3RvcnktcG9zdGdyZXNxbDo1NDMyL2NlbnRyYWxfZGlyZWN0b3J5
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/charts/mongodb/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-mongodb
  labels:
    app: mongodb
    chart: mongodb-4.9.0
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  mongodb-root-password:  "YWRtaW5wYXNz"
  mongodb-password:  "cGFzc3dvcmQ="
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-handler-admin-transfer
  labels:
      app: sh-centralledger-handler-admin-transfer
      chart: centralledger-handler-admin-transfer-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-handler-timeout
  labels:
      app: sh-centralledger-handler-timeout
      chart: centralledger-handler-timeout-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-handler-transfer-fulfil
  labels:
      app: sh-centralledger-handler-transfer-fulfil
      chart: centralledger-handler-transfer-fulfil-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-handler-transfer-get
  labels:
      app: sh-centralledger-handler-transfer-get
      chart: centralledger-handler-transfer-get-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-handler-transfer-position
  labels:
      app: sh-centralledger-handler-transfer-position
      chart: centralledger-handler-transfer-position-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-handler-transfer-prepare
  labels:
      app: sh-centralledger-handler-transfer-prepare
      chart: centralledger-handler-transfer-prepare-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-service
  labels:
      app: sh-centralledger-service
      chart: centralledger-service-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
  admin.key: YWRtaW4=
  admin.secret: YWRtaW4=
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralkms-postgresql
  labels:
    app: sh-centralkms-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "eEQ4NzNJeWFRQg=="
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralkms
  labels:
      app: sh-centralkms
      chart: centralkms-2.4.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.username: a21z
  # base64 encoded string
  db.password: eEQ4NzNJeWFRQg==
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-forensicloggingsidecar-ledger-postgresql
  labels:
    app: sh-forensicloggingsidecar-ledger-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "V3F0MEtsa0t2TA=="
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-forensicloggingsidecar-ledger
  labels:
    app: sh-forensicloggingsidecar-ledger
    chart: forensicloggingsidecar-2.4.0
    release: sh
    heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: cG9zdGdyZXM6Ly9zaWRlY2FyOldxdDBLbGtLdkxAc2gtZm9yZW5zaWNsb2dnaW5nc2lkZWNhci1sZWRnZXItcG9zdGdyZXNxbDo1NDMyL3NpZGVjYXI=
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralledger-mysql
  labels:
    app: sh-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  mysql-root-password: "Nk05WHVUbzZwUg=="
  
  
  mysql-password:  "b3lNeGdaQ2h1dQ=="
  
  
  xtrabackup-password: "bzJITlp5b1lvVg=="
---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-centralsettlement
  labels:
      app: sh-centralsettlement
      chart: centralsettlement-4.3.0
      release: sh
      heritage: Tiller
type: Opaque
data:
  # base64 encoded string
  db.uri: bXlzcWw6Ly9jZW50cmFsX2xlZGdlcjpveU14Z1pDaHV1QHNoLWNlbnRyYWxsZWRnZXItbXlzcWw6MzMwNi9jZW50cmFsX2xlZGdlcg==
---
# Source: mojaloop/charts/interop-switch/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-interop-switch-postgresql
  labels:
    app: sh-interop-switch-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
type: Opaque
data:
  
  postgres-password:  "Y1ZxOGlGcWFMdUh5OGpqS3VB"
---
# Source: mojaloop/charts/interop-switch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sh-interop-switch
  labels:
      app: sh-interop-switch
      chart: interop-switch-3.4.2
      release: sh
      heritage: Tiller
type: Opaque
data:
  PSQL_USER: aW50ZXJvcF9zd2l0Y2g=
  PSQL_PASSWORD: Y1ZxOGlGcWFMdUh5OGpqS3VB
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralenduserregistry
  labels:
      app: sh-centralenduserregistry
      chart: centralenduserregistry-2.4.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-end-user-registry.local"
  server.port: "3001"
  default.json: "{\n    \"PORT\": 3001,\n    \"HOSTNAME\": \"http://central-end-user-registry.local\"\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-end-user-registry/migrations'\nconst Config = require('/opt/central-end-user-registry/src/lib/config')\nmodule.exports = {\n    client: 'pg',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migrations',\n        stub: `${migrationsDirectory}/migration.template`\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-mockpathfinder
  labels:
    app: sh-mockpathfinder
    chart: mockpathfinder-2.4.0
    release: sh
    heritage: Tiller
data:
  default.json: "{\n    \"QUERY\": {\n        \"PORT\": 15353,\n        \"DEFAULT_RECORD\": {\n            \"order\": 10,\n            \"preference\": 50,\n            \"flags\": \"u\",\n            \"service\": \"E2U+pstn:tel\",\n            \"regexp\": \"!^(.*)$!tel:\\\\1;q_stat=102!\",\n            \"replacement\": \"\",\n            \"ttl\": 900\n        }\n    },\n    \"PROVISIONING\": {\n        \"PORT\": 8080,\n        \"PATH\": \"/nrs-pi/services/SIPIX/SendRequest\",\n        \"WSDL_FILE\": \"./sipix-2.0.0.wsdl\",\n        \"DEFAULT_CUSTOMER_ID\": 1234\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/mock-pathfinder/migrations'\nconst Config = require('/opt/mock-pathfinder/src/lib/config')\n\nmodule.exports = {\n    client: 'pg',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migrations',\n        stub: `${migrationsDirectory}/migration.template`\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centraldirectory
  labels:
      app: sh-centraldirectory
      chart: centraldirectory-3.4.2
      release: sh
      heritage: Tiller
data:
  server.host: "central-directory.local"
  server.port: "3000"
  cdir.admin.key: "admin"
  cdir.admin.secret: "admin"
  cdir.pathfinder.provisioning.address: "http://sh-mockpathfinder:8080/nrs-pi/services/SIPIX/SendRequest"
  cdir.pathfinder.query.address: "sh-mockpathfinder"
  cdir.pathfinder.query.port: "15353"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"http://central-directory.local\",\n    \"END_USER_REGISTRY_URL\": \"http://sh-centralenduserregistry:3001\",\n    \"SCHEME_ID\": \"001\",\n    \"DEFAULT_DFSP\": \"\",\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"PATHFINDER\": {\n        \"PARTNER_ID\": 10305,\n        \"SERVICE\": \"E2U+mm\",\n        \"CACHE_TIME\": 300000,\n        \"REGEX\": {\n            \"PATTERN\": \"^.*$\",\n            \"REPLACE\": \"mm:#{identifier}@leveloneproject.org\"\n        },\n        \"QUERY\": {\n            \"ADDRESS\": \"sh-mockpathfinder\",\n            \"PORT\": 15353,\n            \"TIMEOUT\": 15000\n        },\n        \"PROVISIONING\": {\n            \"ADDRESS\": \"http://sh-mockpathfinder:8080/nrs-pi/services/SIPIX/SendRequest\"\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-directory/migrations'\nconst Config = require('/opt/central-directory/src/lib/config')\n\nmodule.exports = {\n    client: 'pg',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migrations',\n        stub: `${migrationsDirectory}/migration.template`\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centraleventprocessor
  labels:
      app: sh-centraleventprocessor
      chart: centraleventprocessor-4.3.0
      release: sh
      heritage: Tiller
data:
  default.json: "{\n    \"notificationMinutes\": {\n        \"resetPeriod\": 60,\n        \"notificationInterval\": 3\n    },\n    \"swaggerOptions\": {\n        \"info\": {\n            \"title\": \"Central notification system API Documentation\",\n            \"description\": \"Api Documentation for central-notification\"\n        },\n        \"expanded\": \"full\"\n    },\n    \"PORT\": 3080,\n    \"centralLedgerAPI\": {\n        \"adminHost\": \"sh-$release_name-centralledger-service\",\n        \"adminPort\": 3001,\n        \"apiHost\": \"sh-centralledger-service\",\n        \"apiPort\": 3000\n    },\n    \"mongo\": {\n        \"user\": \"mojaloop\",\n        \"password\": \"password\",\n        \"uri\": \"sh-mongodb:27017\",\n        \"database\": \"mojaloop\",\n        \"ruleCollection\": \"Rule\",\n        \"netDebitCapPositionCollection\": \"NDCPosition\",\n        \"actionCollection\": \"Actions\",\n        \"eventCollection\": \"Events\",\n        \"limitCollection\": \"Limits\",\n        \"notificationEndpointCollection\": \"NotificationEndpoints\"\n  },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cep-con-notification-event\",\n                            \"group.id\": \"central-event-processor-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 1\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cep-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-handler-admin-transfer
  labels:
      app: sh-centralledger-handler-admin-transfer
      chart: centralledger-handler-admin-transfer-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger-admin-transfer.local"
  server.port: "3000"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"central-ledger-admin-transfer.local\",\n    \"RUN_MIGRATIONS\": false,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-handler-timeout
  labels:
      app: sh-centralledger-handler-timeout
      chart: centralledger-handler-timeout-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger-timeout.local"
  server.port: "3000"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"central-ledger-timeout.local\",\n    \"RUN_MIGRATIONS\": false,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-handler-transfer-fulfil
  labels:
      app: sh-centralledger-handler-transfer-fulfil
      chart: centralledger-handler-transfer-fulfil-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger-transfer-fulfil.local"
  server.port: "3000"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"central-ledger-transfer-fulfil.local\",\n    \"RUN_MIGRATIONS\": false,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-handler-transfer-get
  labels:
      app: sh-centralledger-handler-transfer-get
      chart: centralledger-handler-transfer-get-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger-transfer-get.local"
  server.port: "3000"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"central-ledger-transfer-get.local\",\n    \"RUN_MIGRATIONS\": false,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-handler-transfer-position
  labels:
      app: sh-centralledger-handler-transfer-position
      chart: centralledger-handler-transfer-position-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger-transfer-position.local"
  server.port: "3000"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"central-ledger-transfer-position.local\",\n    \"RUN_MIGRATIONS\": false,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },\n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-handler-transfer-prepare
  labels:
      app: sh-centralledger-handler-transfer-prepare
      chart: centralledger-handler-transfer-prepare-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger-transfer-prepare.local"
  server.port: "3000"
  default.json: "{\n    \"PORT\": 3000,\n    \"HOSTNAME\": \"central-ledger-transfer-prepare.local\",\n    \"RUN_MIGRATIONS\": false,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },    \n    \"INTERNAL_TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-service
  labels:
      app: sh-centralledger-service
      chart: centralledger-service-4.3.0
      release: sh
      heritage: Tiller
data:
  server.host: "central-ledger.local"
  server.port: "3000"
  admin.host: "central-ledger.local"
  admin.port: "3001"
  default.json: "{\n    \"PORT\": 3000,\n    \"ADMIN_PORT\": 3001,\n    \"HOSTNAME\": \"central-ledger.local\",\n    \"RUN_MIGRATIONS\": true,\n    \"ENABLE_TOKEN_AUTH\": false,\n    \"ENABLE_BASIC_AUTH\": false,\n    \"LEDGER_ACCOUNT_NAME\": \"LedgerName\",\n    \"LEDGER_ACCOUNT_PASSWORD\": \"LedgerPassword\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"SIDECAR\": {\n        \"DISABLED\": false,\n        \"HOST\": \"sh-forensicloggingsidecar-ledger\",\n        \"PORT\": 5678,\n        \"CONNECT_TIMEOUT\": 45000,\n        \"RECONNECT_INTERVAL\": 5000\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": true,\n        \"API\": {\n            \"DISABLED\": false\n        },\n        \"CRON\": {\n            \"DISABLED\": true,\n            \"TIMEXP\": \"*/10 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        },\n        \"TIMEOUT\": {\n            \"DISABLED\": false,\n            \"TIMEXP\": \"*/15 * * * * *\",\n            \"TIMEZONE\": \"UTC\"\n        }\n    },\n    \"EMAIL_USER\": \"modusboxemailtest@gmail.com\",\n    \"EMAIL_PASSWORD\": \"April2o0%\",\n    \"EMAIL_SMTP\": \"smtp.gmail.com\",\n    \"PARTICIPANT_INITIAL_POSTITION\": 0,\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\",\n        \"ACCOUNTS\": [\n            \"HUB_RECONCILIATION\",\n            \"HUB_MULTILATERAL_SETTLEMENT\",\n            \"HUB_FEE\"\n        ]\n    },    \n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-get\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-transfer-reject\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-prepare\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-fulfil\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"cl-con-position-abort\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"pollFrequency\": 10,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"admin-transfer-consume\",\n                            \"debug\": \"all\",\n                            \"group.id\": \"central-ledger-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"REJECT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-transfer-reject\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"GET\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-transfer-get\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"POSITION\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                },\n                \"ABORT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-position-abort\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cl-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            },\n            \"ADMIN\": {\n                \"TRANSFER\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"admin-transfer-produce\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/central-ledger/migrations'\nconst seedsDirectory = '/opt/central-ledger/seeds'\n\nconst Config = require('/opt/central-ledger/src/lib/config')\n\nmodule.exports = {\n    client: 'mysql',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migration',\n        stub: `${migrationsDirectory}/migration.template`\n    },\n    seeds: {\n        directory: seedsDirectory,\n        loadExtensions: ['.js']\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralkms
  labels:
      app: sh-centralkms
      chart: centralkms-2.4.0
      release: sh
      heritage: Tiller
data:
  db.host: "sh-centralkms-postgresql"
  db.port: "5432"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-forensicloggingsidecar-ledger
  labels:
    app: sh-forensicloggingsidecar-ledger
    chart: forensicloggingsidecar-2.4.0
    release: sh
    heritage: Tiller
data:
  ## The name for the sidecar service. Default: TestService
  # sidecar.name: "TestService"
  ## The port the sidecar server will run on. Default: 5678
  sidecar.port: "5678"
  ## The message batch size. Default: 64
  # sidecar.batch.side: 64
  # The url for the KMS. Default: ws://localhost:8080/sidecar
  # kms.uri: "ws://central-kms:80/sidecar"
  kms.uri: "ws://sh-centralkms:8080/sidecar"
  ## The time, in milliseconds, between pings to the KMS. Default: 30000
  # kms.ping.interval: 30000
  ## The time, in milliseconds, to timeout a request to the KMS. Default: 30000
  # kms.request.timeout: 30000
  ## The time, in milliseconds, to timeout a connection attempt to the KMS. Default: 60000
  # kms.connect.timeout: 60000
  ## TBC?
  # kms.reconnect.interval: 
  default.json: "{\n    \"PORT\": 5678,\n    \"SERVICE\": \"sh-forensicloggingsidecar-ledger\",\n    \"BATCH_SIZE\": 64,\n    \"BATCH_TIME_INTERVAL\": 300000,\n    \"KMS\": {\n        \"URL\": \"ws://sh-centralkms:8080/sidecar\",\n        \"PING_INTERVAL\": 30000,\n        \"REQUEST_TIMEOUT\": 120000,\n        \"CONNECT_TIMEOUT\": 60000,\n        \"RECONNECT_INTERVAL\": 10000\n    }\n}"
  knexfile.js: "'use strict'\n\nconst migrationsDirectory = '/opt/sidecar/migrations'\nconst Config = require('/opt/sidecar/src/lib/config')\n\nmodule.exports = {\n    client: 'pg',\n    connection: Config.DATABASE_URI,\n    migrations: {\n        directory: migrationsDirectory,\n        tableName: 'migrations',\n        stub: `${migrationsDirectory}/migration.template`\n    }\n}\n"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/config-map_mysql-config.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: sh-centralledger-mysql-config-files
  labels:
    app: sh-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "sh"
    heritage: "Tiller"
data:
  node.cnf: |
    [mysqld]
    datadir=/var/lib/mysql
    default_storage_engine=InnoDB
    binlog_format=ROW
    innodb_flush_log_at_trx_commit  = 0
    innodb_flush_method             = O_DIRECT
    innodb_file_per_table           = 1
    innodb_autoinc_lock_mode=2
    bind_address = 0.0.0.0
    wsrep_slave_threads=2
    wsrep_cluster_address=gcomm://
    wsrep_provider=/usr/lib/galera3/libgalera_smm.so
    wsrep_cluster_name=galera
    wsrep_sst_method=xtrabackup-v2
    pxc_strict_mode=DISABLED
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/config-map_startup-scripts.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: sh-centralledger-mysql-startup-scripts
  labels:
    app: sh-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "sh"
    heritage: "Tiller"
data:
  entrypoint.sh: |
    #!/bin/bash
    set -e
    
    if [[ -n "${DEBUG}" ]]; then
        set -x
    fi
    
    . /startup-scripts/functions.sh
    
    ipaddr=$(hostname -i | awk ' { print $1 } ')
    hostname=$(hostname)
    echo "I AM $hostname - $ipaddr"
    
    # if command starts with an option, prepend mysqld
    if [ "${1:0:1}" = '-' ]; then
        CMDARG="$@"
    fi
    
    cluster_join=$(resolveip -s "${K8S_SERVICE_NAME}" || echo "")
    if [[ -z "${cluster_join}" ]]; then
        echo "I am the Primary Node"
        init_mysql
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address=gcomm:// --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" $CMDARG
    else
        echo "I am not the Primary Node"
        chown -R mysql:mysql /var/lib/mysql
        touch /var/log/mysqld.log
        chown mysql:mysql /var/log/mysqld.log
        write_password_file
        exec mysqld --user=mysql --wsrep_cluster_name=$CLUSTER_NAME --wsrep_node_name=$hostname \
        --wsrep_cluster_address="gcomm://$cluster_join" --wsrep_sst_method=xtrabackup-v2 \
        --wsrep_sst_auth="xtrabackup:$XTRABACKUP_PASSWORD" \
        --wsrep_node_address="$ipaddr" $CMDARG
    fi
  functions.sh: |
    #!/bin/bash
    
    write_password_file() {
    if [[ -n "${MYSQL_ROOT_PASSWORD}" ]]; then
        cat <<EOF > /root/.my.cnf
        [client]
        user=root
        password=${MYSQL_ROOT_PASSWORD}
    EOF
    fi
    }
    
    init_mysql() {
    DATADIR=/var/lib/mysql
    # if we have CLUSTER_JOIN - then we do not need to perform datadir initialize
    # the data will be copied from another node
    if [ ! -e "$DATADIR/mysql" ]; then
        if [ -z "$MYSQL_ROOT_PASSWORD" -a -z "$MYSQL_ALLOW_EMPTY_PASSWORD" -a -z "$MYSQL_RANDOM_ROOT_PASSWORD" -a -z "$MYSQL_ROOT_PASSWORD_FILE" ]; then
                            echo >&2 'error: database is uninitialized and password option is not specified '
                            echo >&2 '  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ROOT_PASSWORD_FILE,  MYSQL_ALLOW_EMPTY_PASSWORD or MYSQL_RANDOM_ROOT_PASSWORD'
                            exit 1
                    fi
    
        if [ ! -z "$MYSQL_ROOT_PASSWORD_FILE" -a -z "$MYSQL_ROOT_PASSWORD" ]; then
        MYSQL_ROOT_PASSWORD=$(cat $MYSQL_ROOT_PASSWORD_FILE)
        fi
        mkdir -p "$DATADIR"
    
        echo "Running --initialize-insecure on $DATADIR"
        ls -lah $DATADIR
        mysqld --initialize-insecure
        chown -R mysql:mysql "$DATADIR"
        chown mysql:mysql /var/log/mysqld.log
        echo 'Finished --initialize-insecure'
    
        mysqld --user=mysql --datadir="$DATADIR" --skip-networking &
        pid="$!"
    
        mysql=( mysql --protocol=socket -uroot )
    
        for i in {30..0}; do
        if echo 'SELECT 1' | "${mysql[@]}" &> /dev/null; then
            break
        fi
        echo 'MySQL init process in progress...'
        sleep 1
        done
        if [ "$i" = 0 ]; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        # sed is for https://bugs.mysql.com/bug.php?id=20545
        mysql_tzinfo_to_sql /usr/share/zoneinfo | sed 's/Local time zone must be set--see zic manual page/FCTY/' | "${mysql[@]}" mysql
        "${mysql[@]}" <<-EOSQL
        -- What's done in this file shouldn't be replicated
        --  or products like mysql-fabric won't work
        SET @@SESSION.SQL_LOG_BIN=0;
        CREATE USER 'root'@'${ALLOW_ROOT_FROM}' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' ;
        GRANT ALL ON *.* TO 'root'@'${ALLOW_ROOT_FROM}' WITH GRANT OPTION ;
        ALTER USER 'root'@'localhost' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';
        GRANT ALL ON *.* TO 'root'@'localhost' WITH GRANT OPTION ;
        CREATE USER 'xtrabackup'@'localhost' IDENTIFIED BY '$XTRABACKUP_PASSWORD';
        GRANT RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT ON *.* TO 'xtrabackup'@'localhost';
        GRANT REPLICATION CLIENT ON *.* TO monitor@'%' IDENTIFIED BY 'monitor';
        GRANT PROCESS ON *.* TO monitor@localhost IDENTIFIED BY 'monitor';
        DROP DATABASE IF EXISTS test ;
        FLUSH PRIVILEGES ;
    EOSQL
        if [ ! -z "$MYSQL_ROOT_PASSWORD" ]; then
        mysql+=( -p"${MYSQL_ROOT_PASSWORD}" )
        fi
    
        if [ "$MYSQL_DATABASE" ]; then
        echo "CREATE DATABASE IF NOT EXISTS \`$MYSQL_DATABASE\` ;" | "${mysql[@]}"
        mysql+=( "$MYSQL_DATABASE" )
        fi
    
        if [ "$MYSQL_USER" -a "$MYSQL_PASSWORD" ]; then
        echo "CREATE USER '"$MYSQL_USER"'@'%' IDENTIFIED BY '"$MYSQL_PASSWORD"' ;" | "${mysql[@]}"
    
        if [ "$MYSQL_DATABASE" ]; then
            echo "GRANT ALL ON \`"$MYSQL_DATABASE"\`.* TO '"$MYSQL_USER"'@'%' ;" | "${mysql[@]}"
        fi
    
        echo 'FLUSH PRIVILEGES ;' | "${mysql[@]}"
        fi
    
        if [ ! -z "$MYSQL_ONETIME_PASSWORD" ]; then
        "${mysql[@]}" <<-EOSQL
            ALTER USER 'root'@'%' PASSWORD EXPIRE;
    EOSQL
        fi
        if ! kill -s TERM "$pid" || ! wait "$pid"; then
        echo >&2 'MySQL init process failed.'
        exit 1
        fi
    
        echo
        echo 'MySQL init process done. Ready for start up.'
        echo
    fi
    
    }
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/tests/pxc-test-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralledger-mysql-tests
data:
  run.sh: |-
    echo "Testing Percona XtraDB Cluster"
    creds="-uroot -p${MYSQL_ROOT_PASSWORD} -h sh-centralledger-mysql"
    echo "==> basic mysql ping"
    mysqladmin $creds ping
    [[ $? != "0" ]] && exit $?
    echo "==> test basic query"
    mysql $creds -e "select now() \G"
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster is ready"
    mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_ready' \G" | grep Value | awk '{ print $2}' | grep ON
    [[ $? != "0" ]] && exit $?
    echo "==> checking if cluster size matches replica count"
    cluster_size=$(mysql $creds -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size' \G" | grep Value | awk '{ print $2}')
    [[ $? != "0" ]] && exit $?
    [[ "${cluster_size}" == "1" ]] || exit 1
    echo "SUCCESS"
    exit 0
---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-centralsettlement
  labels:
      app: sh-centralsettlement
      chart: centralsettlement-4.3.0
      release: sh
      heritage: Tiller
data:
  default.json: "\n{\n    \"PORT\": 3007,\n    \"HOSTNAME\": \"http://central-settlements.local\",\n    \"DATABASE_URI\": \"mysql://central_ledger:oyMxgZChuu@sh-centralledger-mysql:3306/central_ledger\", \n    \"TRANSFER_VALIDITY_SECONDS\": \"432000\",\n    \"HUB_PARTICIPANT\": {\n        \"ID\": 1,\n        \"NAME\": \"Hub\"\n    }\n}"
---
# Source: mojaloop/charts/emailnotifier/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-emailnotifier
  labels:
      app: sh-emailnotifier
      chart: emailnotifier-4.3.0
      release: sh
      heritage: Tiller
data:
  default.json: "{\n    \"emailSettings\": {\n        \"smtpConfig\": {\n            \"host\": \"smtp.gmail.com\",\n            \"port\": 587,\n            \"secureConnection\": false,\n            \"tls\": {\n                \"ciphers\": \"SSLv3\"\n            },\n            \"auth\": {\n                \"user\": \"user@gmail.com\",\n                \"pass\": \"pass\"\n            }\n        }\n    },\n    \"PORT\": 3081,\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"GENERAL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"emailnotif-con-notification-event\",\n                            \"group.id\": \"email-notifier-kafka\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 1\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"debug\": \"all\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"cep-prod-notification-event\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"batch.num.messages\": 100,\n                            \"dr_cb\": true,\n                            \"socket.blocking.max.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
---
# Source: mojaloop/charts/interop-switch/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-interop-switch
  labels:
      app: sh-interop-switch
      chart: interop-switch-3.4.2
      release: sh
      heritage: Tiller
data:
  SWITCH_SERVICE_HOST: "0.0.0.0"
  SWITCH_SERVICE_PORT: "8088"
  CENTRAL_DIR_HOST: "sh-centraldirectory"
  CENTRAL_DIR_PORT: "3000"
  CONNECTOR_HOST: "sh-interop-connector"
  PSQL_HOST: "sh-interop-switch-postgresql"
  PSQL_PORT: "5432"
  PSQL_DATABASE: "interop_switch"
  ML_API_ADAPTER_HOST: "sh-ml-api-adapter-service"
  ML_API_ADAPTER_PORT: "8088"
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-ml-api-adapter-handler-notification
  labels:
      app: sh-ml-api-adapter-handler-notification
      chart: ml-api-adapter-handler-notification-4.1.0
      release: sh
      heritage: Tiller
data:
  default.json: "{\n    \"PORT\": 8088,\n    \"ENDPOINT_SOURCE_URL\": \"http://sh-centralledger-service:3001/participants/{{fsp}}/endpoints\",\n    \"ENDPOINT_CACHE_CONFIG\": {\n        \"expiresIn\": 180000,\n        \"generateTimeout\": 30000\n    },\n    \"HOSTNAME\": \"ml-api-adapter-notification.local\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": false,\n        \"API\": {\n            \"DISABLED\": false\n        }\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"FULFIL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-transfer-fulfil\",\n                \"REGEX\": \"topic-transfer-fulfil\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"ml-con-notification-event\",\n                            \"group.id\": \"kafka-ml-api-adapter\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 1\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 0,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"queue.buffering.max.ms\": 50,\n                            \"batch.num.messages\": 100,\n                            \"api.version.request\": true,\n                            \"dr_cb\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 0,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"queue.buffering.max.ms\": 50,\n                            \"batch.num.messages\": 100,\n                            \"api.version.request\": true,\n                            \"dr_cb\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: sh-ml-api-adapter-service
  labels:
      app: sh-ml-api-adapter-service
      chart: ml-api-adapter-service-4.1.0
      release: sh
      heritage: Tiller
data:
  default.json: "{\n    \"PORT\": 8088,\n    \"ENDPOINT_SOURCE_URL\": \"http://sh-centralledger-service:3001/participants/{{fsp}}/endpoints\",\n    \"ENDPOINT_CACHE_CONFIG\": {\n        \"expiresIn\": 180000,\n        \"generateTimeout\": 30000\n    },\n    \"HOSTNAME\": \"ml-api-adapter.local\",\n    \"AMOUNT\": {\n        \"PRECISION\": 10,\n        \"SCALE\": 2\n    },\n    \"HANDLERS\": {\n        \"DISABLED\": true,\n        \"API\": {\n            \"DISABLED\": false\n        }\n    },\n    \"KAFKA\": {\n        \"TOPIC_TEMPLATES\": {\n            \"PARTICIPANT_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-{{participantName}}-{{functionality}}-{{action}}\",\n                \"REGEX\": \"topic-(.*)-(.*)-(.*)\"\n            },\n            \"NOTIFICATION_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-notification-event\",\n                \"REGEX\": \"topic-notification-event\"\n            },\n            \"FULFIL_TOPIC_TEMPLATE\": {\n                \"TEMPLATE\": \"topic-transfer-fulfil\",\n                \"REGEX\": \"topic-transfer-fulfil\"\n            }\n        },\n        \"CONSUMER\": {\n            \"NOTIFICATION\": {\n                \"EVENT\": {\n                    \"config\": {\n                        \"options\": {\n                            \"mode\": 2,\n                            \"batchSize\": 1,\n                            \"recursiveTimeout\": 100,\n                            \"messageCharset\": \"utf8\",\n                            \"messageAsJSON\": true,\n                            \"sync\": true,\n                            \"consumeTimeout\": 1000\n                        },\n                        \"rdkafkaConf\": {\n                            \"client.id\": \"ml-con-notification-event\",\n                            \"group.id\": \"kafka-ml-api-adapter\",\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"socket.blocking.max.ms\": 1,\n                            \"fetch.wait.max.ms\": 1,\n                            \"fetch.error.backoff.ms\": 1,\n                            \"queue.buffering.max.ms\": 1,\n                            \"broker.version.fallback\": \"0.10.1.0\",\n                            \"api.version.request\": true,\n                            \"enable.auto.commit\": false,\n                            \"auto.commit.interval.ms\": 200,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 1\n                        },\n                        \"topicConf\": {\n                            \"auto.offset.reset\": \"earliest\"\n                        }\n                    }\n                }\n            }\n        },\n        \"PRODUCER\": {\n            \"TRANSFER\": {\n                \"PREPARE\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-prepare\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 0,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"queue.buffering.max.ms\": 50,\n                            \"batch.num.messages\": 100,\n                            \"api.version.request\": true,\n                            \"dr_cb\": true\n                        }\n                    }\n                },\n                \"FULFIL\": {\n                    \"config\": {\n                        \"options\": {\n                            \"messageCharset\": \"utf8\"\n                        },\n                        \"rdkafkaConf\": {\n                            \"metadata.broker.list\": \"sh-kafka:9092\",\n                            \"client.id\": \"ml-prod-transfer-fulfil\",\n                            \"event_cb\": true,\n                            \"compression.codec\": \"none\",\n                            \"retry.backoff.ms\": 100,\n                            \"message.send.max.retries\": 2,\n                            \"socket.keepalive.enable\": true,\n                            \"socket.max.fails\": 0,\n                            \"queue.buffering.max.messages\": 10000000,\n                            \"queue.buffering.max.ms\": 50,\n                            \"batch.num.messages\": 100,\n                            \"api.version.request\": true,\n                            \"dr_cb\": true\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sh
  namespace: shtest
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: sh
  namespace: shtest
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: sh
roleRef:
  kind: Role
  name: sh
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: sh
  namespace: shtest
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralenduserregistry-postgresql
  labels:
    app: sh-centralenduserregistry-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: sh-centralenduserregistry-postgresql
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralenduserregistry
  labels:
    app: sh-centralenduserregistry
    chart: centralenduserregistry-2.4.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralenduserregistry
    release: sh
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-mockpathfinder-postgresql
  labels:
    app: sh-mockpathfinder-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: sh-mockpathfinder-postgresql
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-mockpathfinder
  labels:
    app: sh-mockpathfinder
    chart: mockpathfinder-2.4.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: tcp-prov
    - port: 15353
      targetPort: 15353
      protocol: TCP
      name: tcp-query
    - port: 15353
      targetPort: 15353
      protocol: UDP
      name: udp-query
  selector:
    app: sh-mockpathfinder
    release: sh
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centraldirectory-postgresql
  labels:
    app: sh-centraldirectory-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: sh-centraldirectory-postgresql
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centraldirectory
  labels:
    app: sh-centraldirectory
    chart: centraldirectory-3.4.2
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centraldirectory
    release: sh
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/charts/mongodb/templates/svc-standalone.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-mongodb
  labels:
    app: mongodb
    chart: mongodb-4.9.0
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app: mongodb
    release: "sh"
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centraleventprocessor
  labels:
    app.kubernetes.io/name: sh-centraleventprocessor
    helm.sh/chart: centraleventprocessor-4.3.0
    app.kubernetes.io/instance: sh
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 3080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sh-centraleventprocessor
    app.kubernetes.io/instance: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-handler-admin-transfer
  labels:
    app: sh-centralledger-handler-admin-transfer
    chart: centralledger-handler-admin-transfer-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralledger-handler-admin-transfer
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-handler-timeout
  labels:
    app: sh-centralledger-handler-timeout
    chart: centralledger-handler-timeout-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralledger-handler-timeout
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-handler-transfer-fulfil
  labels:
    app: sh-centralledger-handler-transfer-fulfil
    chart: centralledger-handler-transfer-fulfil-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralledger-handler-transfer-fulfil
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-handler-transfer-get
  labels:
    app: sh-centralledger-handler-transfer-get
    chart: centralledger-handler-transfer-get-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralledger-handler-transfer-get
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-handler-transfer-position
  labels:
    app: sh-centralledger-handler-transfer-position
    chart: centralledger-handler-transfer-position-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralledger-handler-transfer-position
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-handler-transfer-prepare
  labels:
    app: sh-centralledger-handler-transfer-prepare
    chart: centralledger-handler-transfer-prepare-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralledger-handler-transfer-prepare
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-service
  labels:
    app: sh-centralledger-service
    chart: centralledger-service-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http-api
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http-api-admin
  selector:
    app: sh-centralledger-service
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralkms-postgresql
  labels:
    app: sh-centralkms-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: sh-centralkms-postgresql
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralkms
  labels:
    app: sh-centralkms
    chart: centralkms-2.4.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: 
  selector:
    app: sh-centralkms
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-forensicloggingsidecar-ledger-postgresql
  labels:
    app: sh-forensicloggingsidecar-ledger-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: sh-forensicloggingsidecar-ledger-postgresql
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-forensicloggingsidecar-ledger
  labels:
    app: sh-forensicloggingsidecar-ledger
    chart: forensicloggingsidecar-2.4.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 5678
      targetPort: 5678
      protocol: TCP
      name: 
  selector:
    app: sh-forensicloggingsidecar-ledger
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/service-clients.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-zookeeper
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "sh"
    heritage: "Tiller"
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: "zookeeper"
    release: "sh"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-zookeeper-headless
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "sh"
    heritage: "Tiller"
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: "zookeeper"
    release: "sh"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/service-brokers.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-kafka
  labels:
    app: kafka
    chart: kafka-0.7.2
    release: sh
    heritage: Tiller
spec:
  ports:
  - name: broker
    port: 9092
  selector:
    app: kafka
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-kafka-headless
  labels:
    app: kafka
    chart: kafka-0.7.2
    release: sh
    heritage: Tiller
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: broker
    port: 9092
  clusterIP: None
  selector:
    app: kafka
    release: sh
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/service-percona.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralledger-mysql
  labels:
    app: sh-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "sh"
    heritage: "Tiller"
spec:
  ports:
  - name: mysql
    port: 3306
    targetPort: mysql
  selector:
    app: sh-centralledger-mysql
    release: "sh"
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/service-repl.yaml
apiVersion: v1
kind: Service
metadata:
  name: "sh-centralledger-mysql-repl"
  labels:
    app: sh-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "sh"
    heritage: "Tiller"
spec:
  clusterIP: None
  ports:
  - name: galera
    port: 4567
  - name: state-xfer
    port: 4568
  - name: state-snap
    port: 4444
  selector:
    app: sh-centralledger-mysql
    release: "sh"
---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-centralsettlement
  labels:
    app: sh-centralsettlement
    chart: centralsettlement-4.3.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 3007
      targetPort: 3007
      protocol: TCP
      name: http-api
  selector:
    app: sh-centralsettlement
    release: sh
---
# Source: mojaloop/charts/emailnotifier/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-emailnotifier
  labels:
    app.kubernetes.io/name: emailnotifier
    helm.sh/chart: emailnotifier-4.3.0
    app.kubernetes.io/instance: sh
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 3081
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: emailnotifier
    app.kubernetes.io/instance: sh
---
# Source: mojaloop/charts/interop-switch/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-interop-switch-postgresql
  labels:
    app: sh-interop-switch-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: sh-interop-switch-postgresql
---
# Source: mojaloop/charts/interop-switch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-interop-switch
  labels:
    app: sh-interop-switch
    chart: interop-switch-3.4.2
    release: sh
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: interop-switch
  selector:
    app: sh-interop-switch
    release: sh
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-ml-api-adapter-handler-notification
  labels:
    app: sh-ml-api-adapter-handler-notification
    chart: ml-api-adapter-handler-notification-4.1.0
    release: sh
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: ml-api-adapter
  selector:
    app: sh-ml-api-adapter-handler-notification
    release: sh
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sh-ml-api-adapter-service
  labels:
    app: sh-ml-api-adapter-service
    chart: ml-api-adapter-service-4.1.0
    release: sh
    heritage: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: 8088
      protocol: TCP
      name: ml-api-adapter
  selector:
    app: sh-ml-api-adapter-service
    release: sh
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralenduserregistry-postgresql
  labels:
    app: sh-centralenduserregistry-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: sh-centralenduserregistry-postgresql
    spec:
      containers:
      - name: sh-centralenduserregistry-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "end_user_registry"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "end_user_registry"
        - name: POSTGRES_DB
          value: "central_end_user_registry"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-centralenduserregistry-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/centralenduserregistry/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralenduserregistry
  labels:
    app: sh-centralenduserregistry
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralenduserregistry
        chart: centralenduserregistry-2.4.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://end_user_registry:yGnTC07WQ6@sh-centralenduserregistry-postgresql:5432/central_end_user_registry?sslmode=disable"
      containers:
        - name: centralenduserregistry
          image: "mojaloop/central-end-user-registry:v2.4"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 45
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 45
            periodSeconds: 15
          # securityContext:
          #   capabilities:
          #     add:
          #       - NET_ADMIN
          env:
            - name: CREG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralenduserregistry
                  key: server.host
            - name: CREG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralenduserregistry
                  key: server.port
            - name: CREG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralenduserregistry
                  key: db.uri
          volumeMounts:
          - name: sh-centralenduserregistry-config-volume
            mountPath: /opt/mock-pathfinder/config
      volumes:
        - name: sh-centralenduserregistry-config-volume
          configMap:
            name: sh-centralenduserregistry
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-mockpathfinder-postgresql
  labels:
    app: sh-mockpathfinder-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: sh-mockpathfinder-postgresql
    spec:
      containers:
      - name: sh-mockpathfinder-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "mock-pathfinder"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "mock-pathfinder"
        - name: POSTGRES_DB
          value: "mock_pathfinder"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-mockpathfinder-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/mockpathfinder/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-mockpathfinder
  labels:
    app: sh-mockpathfinder
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-mockpathfinder
        chart: mockpathfinder-2.4.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://mock-pathfinder:IypvXbJ1Zb@sh-mockpathfinder-postgresql:5432/mock_pathfinder?sslmode=disable"
      containers:
        - name: mockpathfinder
          image: "mojaloop/mock-pathfinder:v2.4"
          imagePullPolicy: Always
          ports:
            - name: tcp-prov
              containerPort: 8080
            - name: tcp-query
              containerPort: 15353
            - name: udp-query
              containerPort: 15353
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8080
          #     httpHeaders:
          #     - name: X-Custom-Header
          #      value: Awesome
          #   initialDelaySeconds: 30
          #   periodSeconds: 3
          # securityContext:
          #   capabilities:
          #     add:
          #       - NET_ADMIN
          env:
            - name: MOPF_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-mockpathfinder
                  key: db.uri
          volumeMounts:
          - name: sh-mockpathfinder-config-volume
            mountPath: /opt/mock-pathfinder/config
      volumes:
        - name: sh-mockpathfinder-config-volume
          configMap:
            name: sh-mockpathfinder
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centraldirectory/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centraldirectory-postgresql
  labels:
    app: sh-centraldirectory-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: sh-centraldirectory-postgresql
    spec:
      containers:
      - name: sh-centraldirectory-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "central-directory"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "central-directory"
        - name: POSTGRES_DB
          value: "central_directory"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-centraldirectory-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centraldirectory
  labels:
    app: sh-centraldirectory
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centraldirectory
        chart: centraldirectory-3.4.2
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://central-directory:gR5hARbsfa@sh-centraldirectory-postgresql:5432/central_directory?sslmode=disable"
      containers:
        - name: centraldirectory
          image: "mojaloop/central-directory:v2.4"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 15
          env:
            - name: CDIR_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centraldirectory
                  key: db.uri
            - name: CDIR_ADMIN_KEY
              valueFrom:
                configMapKeyRef:
                  name: sh-centraldirectory
                  key: cdir.admin.key
            - name: CDIR_ADMIN_SECRET
              valueFrom:
                configMapKeyRef:
                  name: sh-centraldirectory
                  key: cdir.admin.secret
            - name: CDIR_PATHFINDER__PROVISIONING__ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: sh-centraldirectory
                  key: cdir.pathfinder.provisioning.address
            - name: CDIR_PATHFINDER__QUERY__ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: sh-centraldirectory
                  key: cdir.pathfinder.query.address
            - name: CDIR_PATHFINDER__QUERY__PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centraldirectory
                  key: cdir.pathfinder.query.port
          volumeMounts:
          - name: sh-centraldirectory-config-volume
            mountPath: /opt/central-directory/config
      volumes:
        - name: sh-centraldirectory-config-volume
          configMap:
            name: sh-centraldirectory
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/charts/mongodb/templates/deployment-standalone.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-mongodb
  labels:
    app: mongodb
    chart: mongodb-4.9.0
    release: "sh"
    heritage: "Tiller"
spec:
  selector:
    matchLabels:
      app: mongodb
      release: "sh"
  template:
    metadata:
      labels:
        app: mongodb
        release: "sh"
        chart: mongodb-4.9.0
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
      - name: sh-mongodb
        image: docker.io/bitnami/mongodb:4.0.3
        imagePullPolicy: "Always"
        env:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-mongodb
              key: mongodb-root-password
        - name: MONGODB_USERNAME
          value: "mojaloop"
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-mongodb
              key: mongodb-password
        - name: MONGODB_DATABASE
          value: "mojaloop"
        - name: MONGODB_ENABLE_IPV6
          value: "yes"
        - name: MONGODB_EXTRA_FLAGS
          value: 
        ports:
        - name: mongodb
          containerPort: 27017
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/mongodb
        resources:
          {}
          
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: sh-centraleventprocessor
  labels:
    app.kubernetes.io/name: centraleventprocessor
    helm.sh/chart: centraleventprocessor-4.3.0
    app.kubernetes.io/instance: sh
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: centraleventprocessor
      app.kubernetes.io/instance: sh
  template:
    metadata:
      labels:
        app.kubernetes.io/name: centraleventprocessor
        app.kubernetes.io/instance: sh
    spec:
      initContainers:
        - name: wait-for-mongodb
          image: bitnami/mongodb:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "mongo mongodb://sh-mongodb:27017 --eval \"db.adminCommand('ping')\""
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:

      containers:
        - name: centraleventprocessor
          image: "mojaloop/central-event-processor:v4.3.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 3080
          readinessProbe:
            httpGet:
              path: /health
              port: 3080
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3080
            initialDelaySeconds: 30
            periodSeconds: 15
          volumeMounts:
            - name: sh-centraleventprocessor-config-volume
              mountPath: /opt/central-event-processor/config
      volumes:
        - name: sh-centraleventprocessor-config-volume
          configMap:
            name: sh-centraleventprocessor
            items:
              - key: default.json
                path: default.json
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-handler-admin-transfer
  labels:
    app: sh-centralledger-handler-admin-transfer
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-handler-admin-transfer
        chart: centralledger-handler-admin-transfer-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-admin-transfer
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--admin"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-admin-transfer
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-admin-transfer
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-handler-admin-transfer
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-handler-admin-transfer-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-handler-admin-transfer-config-volume
          configMap:
            name: sh-centralledger-handler-admin-transfer
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-handler-timeout
  labels:
    app: sh-centralledger-handler-timeout
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-handler-timeout
        chart: centralledger-handler-timeout-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-timeout
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--timeout"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-timeout
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-timeout
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-handler-timeout
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-handler-timeout-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-handler-timeout-config-volume
          configMap:
            name: sh-centralledger-handler-timeout
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-handler-transfer-fulfil
  labels:
    app: sh-centralledger-handler-transfer-fulfil
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-handler-transfer-fulfil
        chart: centralledger-handler-transfer-fulfil-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-fulfil
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--fulfil"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-fulfil
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-fulfil
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-handler-transfer-fulfil
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-handler-transfer-fulfil-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-handler-transfer-fulfil-config-volume
          configMap:
            name: sh-centralledger-handler-transfer-fulfil
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-handler-transfer-get
  labels:
    app: sh-centralledger-handler-transfer-get
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-handler-transfer-get
        chart: centralledger-handler-transfer-get-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-get
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--get"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-get
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-get
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-handler-transfer-get
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-handler-transfer-get-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-handler-transfer-get-config-volume
          configMap:
            name: sh-centralledger-handler-transfer-get
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-handler-transfer-position
  labels:
    app: sh-centralledger-handler-transfer-position
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-handler-transfer-position
        chart: centralledger-handler-transfer-position-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-position
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--position"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-position
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-position
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-handler-transfer-position
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-handler-transfer-position-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-handler-transfer-position-config-volume
          configMap:
            name: sh-centralledger-handler-transfer-position
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-handler-transfer-prepare
  labels:
    app: sh-centralledger-handler-transfer-prepare
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-handler-transfer-prepare
        chart: centralledger-handler-transfer-prepare-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: centralledger-handler-transfer-prepare
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--prepare"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-prepare
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-handler-transfer-prepare
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-handler-transfer-prepare
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-handler-transfer-prepare-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-handler-transfer-prepare-config-volume
          configMap:
            name: sh-centralledger-handler-transfer-prepare
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralledger-service
  labels:
    app: sh-centralledger-service
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralledger-service
        chart: centralledger-service-4.3.0
        release: sh
        heritage: Tiller
    spec:
      containers:
        - name: centralledger-service
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/api/index.js"]
          ports:
            - name: http-api
              containerPort: 3000
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-service
                  key: server.port
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-service
                  key: server.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-service
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-service-config-volume
            mountPath: /opt/central-ledger/config
        - name: centralledger-service-admin
          image: "mojaloop/central-ledger:v4.2.1"
          imagePullPolicy: Always
          command: ["node", "src/admin/index.js"]
          ports:
            - name: http-api-admin
              containerPort: 3001
          readinessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3001
            initialDelaySeconds: 90
            periodSeconds: 15
          env:
            - name: CLEDG_ADMIN_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-service
                  key: admin.port
            - name: CLEDG_ADMIN_KEY
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-service
                  key: admin.key
            - name: CLEDG_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-service
                  key: admin.secret
            - name: CLEDG_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  name: sh-centralledger-service
                  key: admin.host
            - name: CLEDG_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-centralledger-service
                  key: db.uri
          volumeMounts:
          - name: sh-centralledger-service-config-volume
            mountPath: /opt/central-ledger/config
      volumes:
        - name: sh-centralledger-service-config-volume
          configMap:
            name: sh-centralledger-service
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralkms-postgresql
  labels:
    app: sh-centralkms-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: sh-centralkms-postgresql
    spec:
      containers:
      - name: sh-centralkms-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "kms"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "kms"
        - name: POSTGRES_DB
          value: "central_kms"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-centralkms-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralkms
  labels:
    app: sh-centralkms
    chart: centralkms-2.4.0
    release: sh
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralkms
        chart: centralkms-2.4.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://kms:xD873IyaQB@sh-centralkms-postgresql:5432/central_kms?sslmode=disable"
      containers:
        - name: centralkms
          image: "mojaloop/central-kms:v2.4"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /sidecars
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /sidecars
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: sh-centralkms
                  key: db.username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sh-centralkms
                  key: db.password
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: sh-centralkms
                  key: db.host
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-centralkms
                  key: db.port
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-forensicloggingsidecar-ledger-postgresql
  labels:
    app: sh-forensicloggingsidecar-ledger-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: sh-forensicloggingsidecar-ledger-postgresql
    spec:
      containers:
      - name: sh-forensicloggingsidecar-ledger-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "sidecar"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "sidecar"
        - name: POSTGRES_DB
          value: "sidecar"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-forensicloggingsidecar-ledger-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-forensicloggingsidecar-ledger
  labels:
    app: sh-forensicloggingsidecar-ledger
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-forensicloggingsidecar-ledger
        chart: forensicloggingsidecar-2.4.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-postgres
          image: bowerswilkins/awaitpostgres
          imagePullPolicy: Always
          env:
          - name: "POSTGRES_URL"
            value: "postgresql://sidecar:Wqt0KlkKvL@sh-forensicloggingsidecar-ledger-postgresql:5432/sidecar?sslmode=disable"
      containers:
        - name: forensicloggingsidecar
          image: "mojaloop/forensic-logging-sidecar:v2.4"
          imagePullPolicy: Always
          command: ["/opt/sidecar/server.sh"]
          ports:
            - containerPort: 5678
          readinessProbe:
            tcpSocket:
              port: 5678
            initialDelaySeconds: 90
            periodSeconds: 15
          livenessProbe:
            tcpSocket:
              port: 5678
            initialDelaySeconds: 90
            periodSeconds: 15
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          env:
            - name: SIDE_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-forensicloggingsidecar-ledger
                  key: sidecar.port
            - name: SIDE_KMS__URL
              valueFrom:
                configMapKeyRef:
                  name: sh-forensicloggingsidecar-ledger
                  key: kms.uri
            - name: SIDE_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: sh-forensicloggingsidecar-ledger
                  key: db.uri
          volumeMounts:
          - name: sh-forensicloggingsidecar-ledger-config-volume
            mountPath: /opt/sidecar/config
      volumes:
        - name: sh-forensicloggingsidecar-ledger-config-volume
          configMap:
            name: sh-forensicloggingsidecar-ledger
            items:
            - key: default.json
              path: default.json
            - key: knexfile.js
              path: knexfile.js
---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-centralsettlement
  labels:
    app: sh-centralsettlement
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-centralsettlement
        chart: centralsettlement-4.3.0
        release: sh
        heritage: Tiller
    spec:
      initContainers: []
      containers:
        - name: centralsettlement
          image: "mojaloop/central-settlement:v4.2.0"
          imagePullPolicy: Always
          ports:
            - name: http-api
              containerPort: 3007
          env: []
          volumeMounts:
          - name: sh-centralsettlement-config-volume
            mountPath: /opt/central-settlement/config
      volumes:
        - name: sh-centralsettlement-config-volume
          configMap:
            name: sh-centralsettlement
            items:
            - key: default.json
              path: default.json
#            - key: knexfile.js
#              path: knexfile.js
---
# Source: mojaloop/charts/emailnotifier/templates/deployment.yaml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: sh-emailnotifier
  labels:
    app.kubernetes.io/name: emailnotifier
    helm.sh/chart: emailnotifier-4.3.0
    app.kubernetes.io/instance: sh
    app.kubernetes.io/managed-by: Tiller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: emailnotifier
      app.kubernetes.io/instance: sh
  template:
    metadata:
      labels:
        app.kubernetes.io/name: emailnotifier
        app.kubernetes.io/instance: sh
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:

      containers:
        - name: emailnotifier
          image: "mojaloop/email-notifier:v4.3.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 3081
          readinessProbe:
            httpGet:
              path: /health
              port: 3081
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3081
            initialDelaySeconds: 30
            periodSeconds: 15
          volumeMounts:
            - name: sh-emailnotifier-config-volume
              mountPath: /opt/email-notifier/config
      volumes:
        - name: sh-emailnotifier-config-volume
          configMap:
            name: sh-emailnotifier
            items:
              - key: default.json
                path: default.json
---
# Source: mojaloop/charts/interop-switch/charts/postgresql/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-interop-switch-postgresql
  labels:
    app: sh-interop-switch-postgresql
    chart: "postgresql-0.9.1"
    release: "sh"
    heritage: "Tiller"
spec:
  template:
    metadata:
      labels:
        app: sh-interop-switch-postgresql
    spec:
      containers:
      - name: sh-interop-switch-postgresql
        image: "postgres:9.6.2"
        imagePullPolicy: ""
        args:
        env:
        - name: POSTGRES_USER
          value: "interop_switch"
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: "interop_switch"
        - name: POSTGRES_DB
          value: "interop_switch"
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-interop-switch-postgresql
              key: postgres-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 120
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: postgresql-db
      volumes:
      - name: data
        emptyDir: {}
---
# Source: mojaloop/charts/interop-switch/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-interop-switch
  labels:
    app: sh-interop-switch
    chart: interop-switch-3.4.2
    release: sh
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-interop-switch
        chart: interop-switch-3.4.2
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: create-tables
          image: mojaloop/interop-switch-init-container:latest
          imagePullPolicy: Always
          env:
          - name: "PGHOST"
            value: "sh-interop-switch-postgresql"
          - name: "PGPORT"
            value: "5432"
          - name: "PGUSER"
            value: "interop_switch"
          - name: "PGPASSWORD"
            value: "cVq8iFqaLuHy8jjKuA"
          - name: "PGDATABASE"
            value: "interop_switch"
      containers:
        - name: interop-switch
          image: "mojaloop/interop-switch:v2.4"
          imagePullPolicy: Always
          ports:
            - containerPort: 8088
          env:
            - name: SWITCH_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: SWITCH_SERVICE_HOST
            - name: SWITCH_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: SWITCH_SERVICE_PORT
            - name: CENTRAL_DIR_HOST
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: CENTRAL_DIR_HOST
            - name: CENTRAL_DIR_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: CENTRAL_DIR_PORT
            - name: CONNECTOR_HOST
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: CONNECTOR_HOST
            - name: PSQL_HOST
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: PSQL_HOST
            - name: PSQL_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: PSQL_PORT
            - name: PSQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: PSQL_DATABASE
            - name: PSQL_USER
              valueFrom:
                secretKeyRef:
                  name: sh-interop-switch
                  key: PSQL_USER
            - name: PSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sh-interop-switch
                  key: PSQL_PASSWORD
            - name: ML_API_ADAPTER_HOST
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: ML_API_ADAPTER_HOST
            - name: ML_API_ADAPTER_PORT
              valueFrom:
                configMapKeyRef:
                  name: sh-interop-switch
                  key: ML_API_ADAPTER_PORT
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-ml-api-adapter-handler-notification
  labels:
    app: sh-ml-api-adapter-handler-notification
    chart: ml-api-adapter-handler-notification-4.1.0
    release: sh
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-ml-api-adapter-handler-notification
        chart: ml-api-adapter-handler-notification-4.1.0
        release: sh
        heritage: Tiller
    spec:
      initContainers:
        - name: wait-for-kafka
          image: solsson/kafka:latest
          imagePullPolicy: Always
          command:
            - sh
            - "-c"
            - "until ./bin/kafka-broker-api-versions.sh --bootstrap-server sh-kafka:9092; do echo waiting for Kafka; sleep 2; done;"
          env:
      containers:
        - name: ml-api-adapter-handler-notification
          image: "mojaloop/ml-api-adapter:v4.1.1"
          imagePullPolicy: Always
          command: ["node", "src/handlers/index.js", "handler", "--notification"]
          ports:
            - containerPort: 8088
          readinessProbe:
            httpGet:
              path: /health
              port: 8088
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 8088
            initialDelaySeconds: 90
            periodSeconds: 15
          volumeMounts:
            - name: sh-ml-api-adapter-handler-notification-config-volume
              mountPath: /opt/ml-api-adapter/config
      volumes:
        - name: sh-ml-api-adapter-handler-notification-config-volume
          configMap:
            name: sh-ml-api-adapter-handler-notification
            items:
            - key: default.json
              path: default.json
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: sh-ml-api-adapter-service
  labels:
    app: sh-ml-api-adapter-service
    chart: ml-api-adapter-service-4.1.0
    release: sh
    heritage: Tiller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: sh-ml-api-adapter-service
        chart: ml-api-adapter-service-4.1.0
        release: sh
        heritage: Tiller
    spec:
      containers:
        - name: ml-api-adapter-service
          image: "mojaloop/ml-api-adapter:v4.1.1"
          imagePullPolicy: Always
          command: ["node", "src/api/index.js"]
          ports:
            - containerPort: 8088
          readinessProbe:
            httpGet:
              path: /health
              port: 8088
            initialDelaySeconds: 120
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 8088
            initialDelaySeconds: 90
            periodSeconds: 15
          volumeMounts:
            - name: sh-ml-api-adapter-service-config-volume
              mountPath: /opt/ml-api-adapter/config
      volumes:
        - name: sh-ml-api-adapter-service-config-volume
          configMap:
            name: sh-ml-api-adapter-service
            items:
            - key: default.json
              path: default.json
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: sh-zookeeper
  labels:
    app: "zookeeper"
    chart: "zookeeper-0.5.0"
    release: "sh"
    heritage: "Tiller"
spec:
  serviceName: sh-zookeeper-headless
  replicas: 3
  updateStrategy:
    type: OnDelete
    
  template:
    metadata:
      labels:
        app: "zookeeper"
        release: "sh"
    spec:
      containers:
      - name: zookeeper-server
        imagePullPolicy: IfNotPresent
        image: gcr.io/google_samples/k8szk:v2
        resources:
          limits:
            cpu: 1
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 2Gi
          
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        env:
        - name : ZK_REPLICAS
          value: "3"
        - name : ZK_HEAP_SIZE
          value: "1G"
        - name : ZK_TICK_TIME
          value: "2000"
        - name : ZK_INIT_LIMIT
          value: "10"
        - name : ZK_SYNC_LIMIT
          value: "5"
        - name : ZK_MAX_CLIENT_CNXNS
          value: "60"
        - name: ZK_SNAP_RETAIN_COUNT
          value: "3"
        - name: ZK_PURGE_INTERVAL
          value: "1"
        - name: ZK_LOG_LEVEL
          value: INFO
        - name: ZK_CLIENT_PORT
          value: "2181"
        - name: ZK_SERVER_PORT
          value: "2888"
        - name: ZK_ELECTION_PORT
          value: "3888"
        command:
        - sh
        - -c
        - zkGenConfig.sh && exec zkServer.sh start-foreground
        readinessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
          subPath: data
      
      volumes:
      - name: datadir
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centralledger/charts/kafka/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: sh-kafka
  labels:
    app: kafka
    chart: kafka-0.7.2
    release: sh
    heritage: Tiller
spec:
  serviceName: sh-kafka-headless
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: OnDelete
    
  replicas: 1
  template:
    metadata:
      labels:
        app: kafka
        release: sh
    spec:
      serviceAccountName: sh
      containers:
      - name: kafka-broker
        image: "confluentinc/cp-kafka:4.0.1-1"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          exec:
            command:
              - sh
              - -ec
              - /usr/bin/jps | /bin/grep -q SupportedKafka
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - containerPort: 9092
          name: kafka
        resources:
          {}
          
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_HEAP_OPTS
          value: 
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "sh-zookeeper:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data/logs"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "1"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_IP}:9092 && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: "/opt/kafka/data"
      volumes:
      - name: datadir
        emptyDir: {}
      terminationGracePeriodSeconds: 60
---
# Source: mojaloop/charts/central/charts/centralledger/charts/mysql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: sh-centralledger-mysql
  labels:
    app: sh-centralledger-mysql
    chart: "mysql-0.1.4"
    release: "sh"
    heritage: "Tiller"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sh-centralledger-mysql
      release: "sh"
  serviceName: sh-centralledger-mysql
  template:
    metadata:
      labels:
        app: sh-centralledger-mysql
        chart: "mysql-0.1.4"
        release: "sh"
        heritage: "Tiller"
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "rm"
        - "-fr"
        - "/var/lib/mysql/lost+found"
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
      containers:
      - name: database
        image: "percona/percona-xtradb-cluster:5.7.19"
        imagePullPolicy: "Always"
        command:
        - "/bin/bash"
        - "/startup-scripts/entrypoint.sh"
        resources:
          null
          
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-centralledger-mysql
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-centralledger-mysql
              key: mysql-password
        - name: XTRABACKUP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sh-centralledger-mysql
              key: xtrabackup-password
        - name: MYSQL_USER
          value: "central_ledger"
        - name: MYSQL_DATABASE
          value: "central_ledger"
        - name: ALLOW_ROOT_FROM
          value: "%"
        - name: CLUSTER_NAME
          value: sh-centralledger-mysql
        - name: K8S_SERVICE_NAME
          value: sh-centralledger-mysql-repl
        - name: DEBUG
          value: "true"
        ports:
        - name: mysql
          containerPort: 3306
        - name: galera-repl
          containerPort: 4567
        - name: state-transfer
          containerPort: 4568
        - name: state-snapshot
          containerPort: 4444
        livenessProbe:
          exec:
            command: ["mysqladmin","ping"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 30
          timeoutSeconds: 2
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-startup-scripts
          mountPath: /startup-scripts
        - name: mysql-config-files
          mountPath: /etc/mysql/conf.d
        - name: slash-root
          mountPath: /root
        - name: var-log
          mountPath: /var/log
      
      - name: "logs"
        image: "busybox:1.25.0"
        imagePullPolicy: IfNotPresent
        command:
        - "tail"
        - "-f"
        - "/var/log/mysqld.log"
        volumeMounts:
        - name: var-log
          mountPath: /var/log
      
      
      volumes:
      - name: slash-root
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      - name: mysql-config-files
        configMap:
          name: sh-centralledger-mysql-config-files
      - name: mysql-startup-scripts
        configMap:
          name: sh-centralledger-mysql-startup-scripts
      - name: mysql-data
        emptyDir: {}
---
# Source: mojaloop/charts/central/charts/centraldirectory/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centraldirectory
  labels:
    app: sh-centraldirectory
    chart: centraldirectory-3.4.2
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-directory.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centraldirectory
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centraleventprocessor/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centraleventprocessor
  labels:
    app.kubernetes.io/name: centraleventprocessor
    helm.sh/chart: centraleventprocessor-4.3.0
    app.kubernetes.io/instance: sh
    app.kubernetes.io/managed-by: Tiller
spec:
  rules:
    - host: "central-event-processor.local"
      http:
        paths:
          - path: 
            backend:
              serviceName: sh-centraleventprocessor
              servicePort: http
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-admin-transfer/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-handler-admin-transfer
  labels:
    app: sh-centralledger-handler-admin-transfer
    chart: centralledger-handler-admin-transfer-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-admin-transfer.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-handler-admin-transfer
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-timeout/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-handler-timeout
  labels:
    app: sh-centralledger-handler-timeout
    chart: centralledger-handler-timeout-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-timeout.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-handler-timeout
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-fulfil/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-handler-transfer-fulfil
  labels:
    app: sh-centralledger-handler-transfer-fulfil
    chart: centralledger-handler-transfer-fulfil-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-fulfil.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-handler-transfer-fulfil
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-get/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-handler-transfer-get
  labels:
    app: sh-centralledger-handler-transfer-get
    chart: centralledger-handler-transfer-get-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-get.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-handler-transfer-get
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-position/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-handler-transfer-position
  labels:
    app: sh-centralledger-handler-transfer-position
    chart: centralledger-handler-transfer-position-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-position.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-handler-transfer-position
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-handler-transfer-prepare/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-handler-transfer-prepare
  labels:
    app: sh-centralledger-handler-transfer-prepare
    chart: centralledger-handler-transfer-prepare-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger-transfer-prepare.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-handler-transfer-prepare
              servicePort: 3000
---
# Source: mojaloop/charts/central/charts/centralledger/charts/centralledger-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralledger-service
  labels:
    app: sh-centralledger-service
    chart: centralledger-service-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-ledger.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralledger-service
              servicePort: 3000
    - host: central-ledger.local
      http:
        paths:
          - path: /admin
            backend:
              serviceName: sh-centralledger-service
              servicePort: 3001
---
# Source: mojaloop/charts/central/charts/centralledger/charts/forensicloggingsidecar/charts/centralkms/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralkms
  labels:
    app: sh-centralkms
    chart: centralkms-2.4.0
    release: sh
    heritage: Tiller
  annotations:
spec:
  rules:
    - host: central-kms.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralkms
              servicePort: 8080
---
# Source: mojaloop/charts/central/charts/centralsettlement/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-centralsettlement
  labels:
    app: sh-centralsettlement
    chart: centralsettlement-4.3.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: central-settlement.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-centralsettlement
              servicePort: 3007
---
# Source: mojaloop/charts/emailnotifier/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-emailnotifier
  labels:
    app.kubernetes.io/name: emailnotifier
    helm.sh/chart: emailnotifier-4.3.0
    app.kubernetes.io/instance: sh
    app.kubernetes.io/managed-by: Tiller
spec:
  rules:
    - host: "email-notifier.local"
      http:
        paths:
          - path: 
            backend:
              serviceName: sh-emailnotifier
              servicePort: http
---
# Source: mojaloop/charts/interop-switch/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-interop-switch
  labels:
    app: sh-interop-switch
    chart: interop-switch-3.4.2
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/switch/v1"
spec:
  rules:
    - host: interop-switch.local
      http:
        paths:
          - path: /interop/switch/v1
            backend:
              serviceName: sh-interop-switch
              servicePort: 8088
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-handler-notification/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-ml-api-adapter-handler-notification
  labels:
    app: sh-ml-api-adapter-handler-notification
    chart: ml-api-adapter-handler-notification-4.1.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: ml-api-adapter-notification.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-ml-api-adapter-handler-notification
              servicePort: 8088
---
# Source: mojaloop/charts/ml-api-adapter/charts/ml-api-adapter-service/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sh-ml-api-adapter-service
  labels:
    app: sh-ml-api-adapter-service
    chart: ml-api-adapter-service-4.1.0
    release: sh
    heritage: Tiller
  annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
spec:
  rules:
    - host: ml-api-adapter.local
      http:
        paths:
          - path: /
            backend:
              serviceName: sh-ml-api-adapter-service
              servicePort: 8088
LAST DEPLOYED: Tue Dec 18 23:28:51 2018
NAMESPACE: shtest
STATUS: DEPLOYED

RESOURCES:
==> v1beta2/Deployment
NAME                      DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
sh-centraleventprocessor  1        1        1           0          11s
sh-emailnotifier          1        1        1           0          11s

==> v1beta2/StatefulSet
NAME                    DESIRED  CURRENT  AGE
sh-centralledger-mysql  1        1        10s

==> v1/Secret
NAME                                         TYPE    DATA  AGE
sh-centralenduserregistry-postgresql         Opaque  1     12s
sh-centralenduserregistry                    Opaque  1     12s
sh-mockpathfinder-postgresql                 Opaque  1     12s
sh-mockpathfinder                            Opaque  1     12s
sh-centraldirectory-postgresql               Opaque  1     12s
sh-centraldirectory                          Opaque  1     12s
sh-mongodb                                   Opaque  2     12s
sh-centralledger-handler-admin-transfer      Opaque  1     12s
sh-centralledger-handler-timeout             Opaque  1     12s
sh-centralledger-handler-transfer-fulfil     Opaque  1     12s
sh-centralledger-handler-transfer-get        Opaque  1     12s
sh-centralledger-handler-transfer-position   Opaque  1     12s
sh-centralledger-handler-transfer-prepare    Opaque  1     12s
sh-centralledger-service                     Opaque  3     12s
sh-centralkms-postgresql                     Opaque  1     12s
sh-centralkms                                Opaque  2     12s
sh-forensicloggingsidecar-ledger-postgresql  Opaque  1     12s
sh-forensicloggingsidecar-ledger             Opaque  1     12s
sh-centralledger-mysql                       Opaque  3     12s
sh-centralsettlement                         Opaque  1     12s
sh-interop-switch-postgresql                 Opaque  1     12s
sh-interop-switch                            Opaque  2     12s

==> v1/ServiceAccount
NAME  SECRETS  AGE
sh    1        11s

==> v1/Service
NAME                                         TYPE       CLUSTER-IP     EXTERNAL-IP  PORT(S)                       AGE
sh-centralenduserregistry-postgresql         ClusterIP  10.43.222.140  <none>       5432/TCP                      11s
sh-centralenduserregistry                    ClusterIP  10.43.3.150    <none>       3001/TCP                      11s
sh-mockpathfinder-postgresql                 ClusterIP  10.43.82.83    <none>       5432/TCP                      11s
sh-mockpathfinder                            ClusterIP  10.43.30.26    <none>       8080/TCP,15353/TCP,15353/UDP  11s
sh-centraldirectory-postgresql               ClusterIP  10.43.14.15    <none>       5432/TCP                      11s
sh-centraldirectory                          ClusterIP  10.43.69.252   <none>       3000/TCP                      11s
sh-mongodb                                   ClusterIP  10.43.203.138  <none>       27017/TCP                     11s
sh-centraleventprocessor                     ClusterIP  10.43.65.80    <none>       3080/TCP                      11s
sh-centralledger-handler-admin-transfer      ClusterIP  10.43.3.109    <none>       3000/TCP                      11s
sh-centralledger-handler-timeout             ClusterIP  10.43.60.234   <none>       3000/TCP                      11s
sh-centralledger-handler-transfer-fulfil     ClusterIP  10.43.212.138  <none>       3000/TCP                      11s
sh-centralledger-handler-transfer-get        ClusterIP  10.43.236.175  <none>       3000/TCP                      11s
sh-centralledger-handler-transfer-position   ClusterIP  10.43.44.24    <none>       3000/TCP                      11s
sh-centralledger-handler-transfer-prepare    ClusterIP  10.43.208.60   <none>       3000/TCP                      11s
sh-centralledger-service                     ClusterIP  10.43.197.232  <none>       3000/TCP,3001/TCP             11s
sh-centralkms-postgresql                     ClusterIP  10.43.165.252  <none>       5432/TCP                      11s
sh-centralkms                                ClusterIP  10.43.221.111  <none>       8080/TCP                      11s
sh-forensicloggingsidecar-ledger-postgresql  ClusterIP  10.43.76.78    <none>       5432/TCP                      11s
sh-forensicloggingsidecar-ledger             ClusterIP  10.43.120.138  <none>       5678/TCP                      11s
sh-zookeeper                                 ClusterIP  10.43.34.62    <none>       2181/TCP                      11s
sh-zookeeper-headless                        ClusterIP  None           <none>       2888/TCP,3888/TCP             11s
sh-kafka                                     ClusterIP  10.43.186.214  <none>       9092/TCP                      11s
sh-kafka-headless                            ClusterIP  None           <none>       9092/TCP                      11s
sh-centralledger-mysql                       ClusterIP  10.43.105.124  <none>       3306/TCP                      11s
sh-centralledger-mysql-repl                  ClusterIP  None           <none>       4567/TCP,4568/TCP,4444/TCP    11s
sh-centralsettlement                         ClusterIP  10.43.97.175   <none>       3007/TCP                      11s
sh-emailnotifier                             ClusterIP  10.43.190.116  <none>       3081/TCP                      11s
sh-interop-switch-postgresql                 ClusterIP  10.43.145.30   <none>       5432/TCP                      11s
sh-interop-switch                            ClusterIP  10.43.7.127    <none>       8088/TCP                      11s
sh-ml-api-adapter-handler-notification       ClusterIP  10.43.116.177  <none>       8088/TCP                      11s
sh-ml-api-adapter-service                    ClusterIP  10.43.124.101  <none>       8088/TCP                      11s

==> v1beta1/Deployment
NAME                                         DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
sh-centralenduserregistry-postgresql         1        1        1           0          11s
sh-centralenduserregistry                    1        1        1           0          11s
sh-mockpathfinder-postgresql                 1        1        1           0          11s
sh-mockpathfinder                            1        1        1           0          11s
sh-centraldirectory-postgresql               1        1        1           0          11s
sh-centraldirectory                          1        1        1           0          11s
sh-mongodb                                   1        1        1           0          11s
sh-centralledger-handler-admin-transfer      1        1        1           0          11s
sh-centralledger-handler-timeout             1        1        1           0          11s
sh-centralledger-handler-transfer-fulfil     1        1        1           0          11s
sh-centralledger-handler-transfer-get        1        1        1           0          11s
sh-centralledger-handler-transfer-position   1        1        1           0          11s
sh-centralledger-handler-transfer-prepare    1        1        1           0          11s
sh-centralledger-service                     1        1        1           0          11s
sh-centralkms-postgresql                     1        1        1           0          11s
sh-centralkms                                1        1        1           0          11s
sh-forensicloggingsidecar-ledger-postgresql  1        1        1           0          11s
sh-forensicloggingsidecar-ledger             1        1        1           0          11s
sh-centralsettlement                         1        1        1           0          11s
sh-interop-switch-postgresql                 1        1        1           0          11s
sh-interop-switch                            1        1        1           0          11s
sh-ml-api-adapter-handler-notification       1        1        1           0          10s
sh-ml-api-adapter-service                    1        1        1           0          10s

==> v1beta1/StatefulSet
NAME          DESIRED  CURRENT  AGE
sh-zookeeper  3        1        10s
sh-kafka      1        1        10s

==> v1beta1/Ingress
NAME                                        HOSTS                                      ADDRESS  PORTS  AGE
sh-centraldirectory                         central-directory.local                    80       10s
sh-centraleventprocessor                    central-event-processor.local              80       10s
sh-centralledger-handler-admin-transfer     central-ledger-admin-transfer.local        80       10s
sh-centralledger-handler-timeout            central-ledger-timeout.local               80       10s
sh-centralledger-handler-transfer-fulfil    central-ledger-transfer-fulfil.local       80       10s
sh-centralledger-handler-transfer-get       central-ledger-transfer-get.local          80       10s
sh-centralledger-handler-transfer-position  central-ledger-transfer-position.local     80       10s
sh-centralledger-handler-transfer-prepare   central-ledger-transfer-prepare.local      80       10s
sh-centralledger-service                    central-ledger.local,central-ledger.local  80       10s
sh-centralkms                               central-kms.local                          80       10s
sh-centralsettlement                        central-settlement.local                   80       10s
sh-emailnotifier                            email-notifier.local                       80       10s
sh-interop-switch                           interop-switch.local                       80       10s
sh-ml-api-adapter-handler-notification      ml-api-adapter-notification.local          80       10s
sh-ml-api-adapter-service                   ml-api-adapter.local                       80       10s

==> v1/Pod(related)
NAME                                                         READY  STATUS             RESTARTS  AGE
sh-centralenduserregistry-postgresql-5fd9b9898f-94jht        0/1    ContainerCreating  0         11s
sh-centralenduserregistry-7c589df8cf-bltvk                   0/1    Init:0/1           0         11s
sh-mockpathfinder-postgresql-74bd569bf5-fnkkl                0/1    ContainerCreating  0         11s
sh-mockpathfinder-58bc6687f5-4n8jv                           0/1    Init:0/1           0         11s
sh-centraldirectory-postgresql-56d48dd585-mv78p              0/1    Running            0         11s
sh-centraldirectory-f745b7b48-6cd6q                          0/1    Init:0/1           0         11s
sh-mongodb-5595dd4cb-q8j4h                                   0/1    ContainerCreating  0         10s
sh-centraleventprocessor-6944f787cc-2kkk6                    0/1    Init:0/2           0         10s
sh-centralledger-handler-admin-transfer-77c848f64c-k9jwl     0/1    Init:0/1           0         10s
sh-centralledger-handler-timeout-57c74f5f55-9x9p2            0/1    Init:0/1           0         10s
sh-centralledger-handler-transfer-fulfil-559f68894c-7j44q    0/1    Init:0/1           0         10s
sh-centralledger-handler-transfer-get-57464c5487-n5pjv       0/1    Init:0/1           0         10s
sh-centralledger-handler-transfer-position-6574d9cfc7-d6v59  0/1    Init:0/1           0         10s
sh-centralledger-handler-transfer-prepare-75d8bbc7f5-hbznk   0/1    Init:0/1           0         10s
sh-centralledger-service-5b8d678559-v94j5                    0/2    ContainerCreating  0         9s
sh-centralkms-postgresql-9d897b485-7stjs                     0/1    ContainerCreating  0         9s
sh-centralkms-85ccb54dcc-qn74d                               0/1    Init:0/1           0         9s
sh-forensicloggingsidecar-ledger-postgresql-555f8574b-4rggx  0/1    Pending            0         9s
sh-forensicloggingsidecar-ledger-f4598665d-z5kbr             0/1    Init:0/1           0         9s
sh-centralsettlement-5c55b8d59b-gckdw                        0/1    ContainerCreating  0         8s
sh-emailnotifier-7d769ff6b-fgfh2                             0/1    Init:0/1           0         8s
sh-interop-switch-postgresql-78bb577d48-dv5bc                0/1    ContainerCreating  0         8s
sh-interop-switch-5d6bb57dc4-zbwq4                           0/1    Init:0/1           0         8s
sh-ml-api-adapter-handler-notification-65dc6b5bc8-kb84w      0/1    Init:0/1           0         7s
sh-ml-api-adapter-service-7dc9c5dcfc-sj4h8                   0/1    ContainerCreating  0         7s
sh-zookeeper-0                                               0/1    Running            0         10s
sh-kafka-0                                                   0/1    ContainerCreating  0         10s
sh-centralledger-mysql-0                                     0/2    Init:0/1           0         10s

==> v1beta1/PodDisruptionBudget
NAME          MIN AVAILABLE  MAX UNAVAILABLE  ALLOWED DISRUPTIONS  AGE
sh-zookeeper  2              N/A              0                    12s

==> v1/ConfigMap
NAME                                        DATA  AGE
sh-centralenduserregistry                   4     12s
sh-mockpathfinder                           2     12s
sh-centraldirectory                         9     12s
sh-centraleventprocessor                    1     12s
sh-centralledger-handler-admin-transfer     4     12s
sh-centralledger-handler-timeout            4     12s
sh-centralledger-handler-transfer-fulfil    4     12s
sh-centralledger-handler-transfer-get       4     12s
sh-centralledger-handler-transfer-position  4     12s
sh-centralledger-handler-transfer-prepare   4     12s
sh-centralledger-service                    6     12s
sh-centralkms                               2     12s
sh-forensicloggingsidecar-ledger            4     12s
sh-centralledger-mysql-config-files         1     12s
sh-centralledger-mysql-startup-scripts      2     12s
sh-centralledger-mysql-tests                1     12s
sh-centralsettlement                        1     12s
sh-emailnotifier                            1     12s
sh-interop-switch                           10    12s
sh-ml-api-adapter-handler-notification      1     12s
sh-ml-api-adapter-service                   1     11s

==> v1beta1/Role
NAME  AGE
sh    11s

==> v1beta1/RoleBinding
NAME  AGE
sh    11s


